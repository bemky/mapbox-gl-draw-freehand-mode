(()=>{var e={17:e=>{"use strict";e.exports=function e(t,o){if(t===o)return!0;if(t&&o&&"object"==typeof t&&"object"==typeof o){if(t.constructor!==o.constructor)return!1;var n,r,i;if(Array.isArray(t)){if((n=t.length)!=o.length)return!1;for(r=n;0!==r--;)if(!e(t[r],o[r]))return!1;return!0}if(t.constructor===RegExp)return t.source===o.source&&t.flags===o.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===o.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===o.toString();if((n=(i=Object.keys(t)).length)!==Object.keys(o).length)return!1;for(r=n;0!==r--;)if(!Object.prototype.hasOwnProperty.call(o,i[r]))return!1;for(r=n;0!==r--;){var s=i[r];if(!e(t[s],o[s]))return!1}return!0}return t!=t&&o!=o}},186:e=>{e.exports=function(e){if(!e||!e.type)return null;var o=t[e.type];return o?"geometry"===o?{type:"FeatureCollection",features:[{type:"Feature",properties:{},geometry:e}]}:"feature"===o?{type:"FeatureCollection",features:[e]}:"featurecollection"===o?e:void 0:null};var t={Point:"geometry",MultiPoint:"geometry",LineString:"geometry",MultiLineString:"geometry",Polygon:"geometry",MultiPolygon:"geometry",GeometryCollection:"geometry",Feature:"feature",FeatureCollection:"featurecollection"}},628:e=>{e.exports.RADIUS=6378137,e.exports.FLATTENING=1/298.257223563,e.exports.POLAR_RADIUS=6356752.3142},778:(e,t,o)=>{var n=o(628);function r(e){var t=0;if(e&&e.length>0){t+=Math.abs(i(e[0]));for(var o=1;o<e.length;o++)t-=Math.abs(i(e[o]))}return t}function i(e){var t,o,r,i,a,c,u=0,l=e.length;if(l>2){for(c=0;c<l;c++)c===l-2?(r=l-2,i=l-1,a=0):c===l-1?(r=l-1,i=0,a=1):(r=c,i=c+1,a=c+2),t=e[r],o=e[i],u+=(s(e[a][0])-s(t[0]))*Math.sin(s(o[1]));u=u*n.RADIUS*n.RADIUS/2}return u}function s(e){return e*Math.PI/180}e.exports.geometry=function e(t){var o,n=0;switch(t.type){case"Polygon":return r(t.coordinates);case"MultiPolygon":for(o=0;o<t.coordinates.length;o++)n+=r(t.coordinates[o]);return n;case"Point":case"MultiPoint":case"LineString":case"MultiLineString":return 0;case"GeometryCollection":for(o=0;o<t.geometries.length;o++)n+=e(t.geometries[o]);return n}},e.exports.ring=i}},t={};function o(n){var r=t[n];if(void 0!==r)return r.exports;var i=t[n]={exports:{}};return e[n](i,i.exports,o),i.exports}o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e={};o.r(e),o.d(e,{LAT_MAX:()=>v,LAT_MIN:()=>m,LAT_RENDERED_MAX:()=>C,LAT_RENDERED_MIN:()=>E,LNG_MAX:()=>S,LNG_MIN:()=>T,activeStates:()=>g,classes:()=>s,cursors:()=>c,events:()=>p,geojsonTypes:()=>l,interactions:()=>y,meta:()=>f,modes:()=>d,sources:()=>a,types:()=>u,updateActions:()=>h});var t={};o.r(t),o.d(t,{isActiveFeature:()=>me,isEnterKey:()=>_e,isEscapeKey:()=>Ie,isFeature:()=>Ce,isInactiveFeature:()=>Ee,isOfMetaType:()=>ge,isShiftDown:()=>Se,isShiftMousedown:()=>ye,isTrue:()=>Oe,isVertex:()=>Te,noTarget:()=>ve});var n={};o.r(n),o.d(n,{CommonSelectors:()=>t,ModeHandler:()=>r,StringSet:()=>L,constrainFeatureMovement:()=>ke,createMidPoint:()=>xe,createSupplementaryPoints:()=>Ne,createVertex:()=>Le,doubleClickZoom:()=>Pe,euclideanDistance:()=>F,featuresAt:()=>N,getFeatureAtAndSetCursors:()=>A,isClick:()=>U,isEventAtCoordinates:()=>He,isTap:()=>G,mapEventToBoundingBox:()=>b,moveFeatures:()=>Ve,sortFeatures:()=>O,stringSetsAreEqual:()=>it,theme:()=>fe,toDenseArray:()=>ie});const r=function(e,t){const o={drag:[],click:[],mousemove:[],mousedown:[],mouseup:[],mouseout:[],keydown:[],keyup:[],touchstart:[],touchmove:[],touchend:[],tap:[]},n={on(e,t,n){if(void 0===o[e])throw new Error(`Invalid event type: ${e}`);o[e].push({selector:t,fn:n})},render(e){t.store.featureChanged(e)}},r=function(e,r){const i=o[e];let s=i.length;for(;s--;){const e=i[s];if(e.selector(r)){e.fn.call(n,r)||t.store.render(),t.ui.updateMapClasses();break}}};return e.start.call(n),{render:e.render,stop(){e.stop&&e.stop()},trash(){e.trash&&(e.trash(),t.store.render())},combineFeatures(){e.combineFeatures&&e.combineFeatures()},uncombineFeatures(){e.uncombineFeatures&&e.uncombineFeatures()},drag(e){r("drag",e)},click(e){r("click",e)},mousemove(e){r("mousemove",e)},mousedown(e){r("mousedown",e)},mouseup(e){r("mouseup",e)},mouseout(e){r("mouseout",e)},keydown(e){r("keydown",e)},keyup(e){r("keyup",e)},touchstart(e){r("touchstart",e)},touchmove(e){r("touchmove",e)},touchend(e){r("touchend",e)},tap(e){r("tap",e)}}};var i=o(778);const s={CANVAS:"mapboxgl-canvas",CONTROL_BASE:"mapboxgl-ctrl",CONTROL_PREFIX:"mapboxgl-ctrl-",CONTROL_BUTTON:"mapbox-gl-draw_ctrl-draw-btn",CONTROL_BUTTON_LINE:"mapbox-gl-draw_line",CONTROL_BUTTON_POLYGON:"mapbox-gl-draw_polygon",CONTROL_BUTTON_POINT:"mapbox-gl-draw_point",CONTROL_BUTTON_TRASH:"mapbox-gl-draw_trash",CONTROL_BUTTON_COMBINE_FEATURES:"mapbox-gl-draw_combine",CONTROL_BUTTON_UNCOMBINE_FEATURES:"mapbox-gl-draw_uncombine",CONTROL_GROUP:"mapboxgl-ctrl-group",ATTRIBUTION:"mapboxgl-ctrl-attrib",ACTIVE_BUTTON:"active",BOX_SELECT:"mapbox-gl-draw_boxselect"},a={HOT:"mapbox-gl-draw-hot",COLD:"mapbox-gl-draw-cold"},c={ADD:"add",MOVE:"move",DRAG:"drag",POINTER:"pointer",NONE:"none"},u={POLYGON:"polygon",LINE:"line_string",POINT:"point"},l={FEATURE:"Feature",POLYGON:"Polygon",LINE_STRING:"LineString",POINT:"Point",FEATURE_COLLECTION:"FeatureCollection",MULTI_PREFIX:"Multi",MULTI_POINT:"MultiPoint",MULTI_LINE_STRING:"MultiLineString",MULTI_POLYGON:"MultiPolygon"},d={DRAW_LINE_STRING:"draw_line_string",DRAW_POLYGON:"draw_polygon",DRAW_POINT:"draw_point",SIMPLE_SELECT:"simple_select",DIRECT_SELECT:"direct_select"},p={CREATE:"draw.create",DELETE:"draw.delete",UPDATE:"draw.update",SELECTION_CHANGE:"draw.selectionchange",MODE_CHANGE:"draw.modechange",ACTIONABLE:"draw.actionable",RENDER:"draw.render",COMBINE_FEATURES:"draw.combine",UNCOMBINE_FEATURES:"draw.uncombine"},h={MOVE:"move",CHANGE_PROPERTIES:"change_properties",CHANGE_COORDINATES:"change_coordinates"},f={FEATURE:"feature",MIDPOINT:"midpoint",VERTEX:"vertex"},g={ACTIVE:"true",INACTIVE:"false"},y=["scrollZoom","boxZoom","dragRotate","dragPan","keyboard","doubleClickZoom","touchZoomRotate"],m=-90,E=-85,v=90,C=85,T=-270,S=270,I={Point:0,LineString:1,MultiLineString:1,Polygon:2};function _(e,t){const o=I[e.geometry.type]-I[t.geometry.type];return 0===o&&e.geometry.type===l.POLYGON?e.area-t.area:o}const O=function(e){return e.map((e=>(e.geometry.type===l.POLYGON&&(e.area=i.geometry({type:l.FEATURE,property:{},geometry:e.geometry})),e))).sort(_).map((e=>(delete e.area,e)))},b=function(e,t=0){return[[e.point.x-t,e.point.y-t],[e.point.x+t,e.point.y+t]]};function M(e){if(this._items={},this._nums={},this._length=e?e.length:0,e)for(let t=0,o=e.length;t<o;t++)this.add(e[t]),void 0!==e[t]&&("string"==typeof e[t]?this._items[e[t]]=t:this._nums[e[t]]=t)}M.prototype.add=function(e){return this.has(e)||(this._length++,"string"==typeof e?this._items[e]=this._length:this._nums[e]=this._length),this},M.prototype.delete=function(e){return!1===this.has(e)||(this._length--,delete this._items[e],delete this._nums[e]),this},M.prototype.has=function(e){return!("string"!=typeof e&&"number"!=typeof e||void 0===this._items[e]&&void 0===this._nums[e])},M.prototype.values=function(){const e=[];return Object.keys(this._items).forEach((t=>{e.push({k:t,v:this._items[t]})})),Object.keys(this._nums).forEach((t=>{e.push({k:JSON.parse(t),v:this._nums[t]})})),e.sort(((e,t)=>e.v-t.v)).map((e=>e.k))},M.prototype.clear=function(){return this._length=0,this._items={},this._nums={},this};const L=M,x=[f.FEATURE,f.MIDPOINT,f.VERTEX],N={click:function(e,t,o){return P(e,t,o,o.options.clickBuffer)},touch:function(e,t,o){return P(e,t,o,o.options.touchBuffer)}};function P(e,t,o,n){if(null===o.map)return[];const r=e?b(e,n):t,i={};o.options.styles&&(i.layers=o.options.styles.map((e=>e.id)).filter((e=>null!=o.map.getLayer(e))));const s=o.map.queryRenderedFeatures(r,i).filter((e=>-1!==x.indexOf(e.properties.meta))),a=new L,c=[];return s.forEach((e=>{const t=e.properties.id;a.has(t)||(a.add(t),c.push(e))})),O(c)}function A(e,t){const o=N.click(e,null,t),n={mouse:c.NONE};return o[0]&&(n.mouse=o[0].properties.active===g.ACTIVE?c.MOVE:c.POINTER,n.feature=o[0].properties.meta),-1!==t.events.currentModeName().indexOf("draw")&&(n.mouse=c.ADD),t.ui.queueMapClasses(n),t.ui.updateMapClasses(),o[0]}function F(e,t){const o=e.x-t.x,n=e.y-t.y;return Math.sqrt(o*o+n*n)}const w=4,R=12,D=500;function U(e,t,o={}){const n=null!=o.fineTolerance?o.fineTolerance:w,r=null!=o.grossTolerance?o.grossTolerance:R,i=null!=o.interval?o.interval:D;e.point=e.point||t.point,e.time=e.time||t.time;const s=F(e.point,t.point);return s<n||s<r&&t.time-e.time<i}const k=25,V=250;function G(e,t,o={}){const n=null!=o.tolerance?o.tolerance:k,r=null!=o.interval?o.interval:V;return e.point=e.point||t.point,e.time=e.time||t.time,F(e.point,t.point)<n&&t.time-e.time<r}const B=((e,t=21)=>(o=t)=>{let n="",r=0|o;for(;r--;)n+=e[Math.random()*e.length|0];return n})("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",32);function j(){return B()}const J=function(e,t){this.ctx=e,this.properties=t.properties||{},this.coordinates=t.geometry.coordinates,this.id=t.id||j(),this.type=t.geometry.type};J.prototype.changed=function(){this.ctx.store.featureChanged(this.id)},J.prototype.incomingCoords=function(e){this.setCoordinates(e)},J.prototype.setCoordinates=function(e){this.coordinates=e,this.changed()},J.prototype.getCoordinates=function(){return JSON.parse(JSON.stringify(this.coordinates))},J.prototype.setProperty=function(e,t){this.properties[e]=t},J.prototype.toGeoJSON=function(){return JSON.parse(JSON.stringify({id:this.id,type:l.FEATURE,properties:this.properties,geometry:{coordinates:this.getCoordinates(),type:this.type}}))},J.prototype.internal=function(e){const t={id:this.id,meta:f.FEATURE,"meta:type":this.type,active:g.INACTIVE,mode:e};if(this.ctx.options.userProperties)for(const e in this.properties)t[`user_${e}`]=this.properties[e];return{type:l.FEATURE,properties:t,geometry:{coordinates:this.getCoordinates(),type:this.type}}};const $=J,Y=function(e,t){$.call(this,e,t)};(Y.prototype=Object.create($.prototype)).isValid=function(){return"number"==typeof this.coordinates[0]&&"number"==typeof this.coordinates[1]},Y.prototype.updateCoordinate=function(e,t,o){this.coordinates=3===arguments.length?[t,o]:[e,t],this.changed()},Y.prototype.getCoordinate=function(){return this.getCoordinates()};const X=Y,q=function(e,t){$.call(this,e,t)};(q.prototype=Object.create($.prototype)).isValid=function(){return this.coordinates.length>1},q.prototype.addCoordinate=function(e,t,o){this.changed();const n=parseInt(e,10);this.coordinates.splice(n,0,[t,o])},q.prototype.getCoordinate=function(e){const t=parseInt(e,10);return JSON.parse(JSON.stringify(this.coordinates[t]))},q.prototype.removeCoordinate=function(e){this.changed(),this.coordinates.splice(parseInt(e,10),1)},q.prototype.updateCoordinate=function(e,t,o){const n=parseInt(e,10);this.coordinates[n]=[t,o],this.changed()};const H=q,Z=function(e,t){$.call(this,e,t),this.coordinates=this.coordinates.map((e=>e.slice(0,-1)))};(Z.prototype=Object.create($.prototype)).isValid=function(){return 0!==this.coordinates.length&&this.coordinates.every((e=>e.length>2))},Z.prototype.incomingCoords=function(e){this.coordinates=e.map((e=>e.slice(0,-1))),this.changed()},Z.prototype.setCoordinates=function(e){this.coordinates=e,this.changed()},Z.prototype.addCoordinate=function(e,t,o){this.changed();const n=e.split(".").map((e=>parseInt(e,10)));this.coordinates[n[0]].splice(n[1],0,[t,o])},Z.prototype.removeCoordinate=function(e){this.changed();const t=e.split(".").map((e=>parseInt(e,10))),o=this.coordinates[t[0]];o&&(o.splice(t[1],1),o.length<3&&this.coordinates.splice(t[0],1))},Z.prototype.getCoordinate=function(e){const t=e.split(".").map((e=>parseInt(e,10))),o=this.coordinates[t[0]];return JSON.parse(JSON.stringify(o[t[1]]))},Z.prototype.getCoordinates=function(){return this.coordinates.map((e=>e.concat([e[0]])))},Z.prototype.updateCoordinate=function(e,t,o){this.changed();const n=e.split("."),r=parseInt(n[0],10),i=parseInt(n[1],10);void 0===this.coordinates[r]&&(this.coordinates[r]=[]),this.coordinates[r][i]=[t,o]};const W=Z,K={MultiPoint:X,MultiLineString:H,MultiPolygon:W},z=(e,t,o,n,r)=>{const i=o.split("."),s=parseInt(i[0],10),a=i[1]?i.slice(1).join("."):null;return e[s][t](a,n,r)},Q=function(e,t){if($.call(this,e,t),delete this.coordinates,this.model=K[t.geometry.type],void 0===this.model)throw new TypeError(`${t.geometry.type} is not a valid type`);this.features=this._coordinatesToFeatures(t.geometry.coordinates)};(Q.prototype=Object.create($.prototype))._coordinatesToFeatures=function(e){const t=this.model.bind(this);return e.map((e=>new t(this.ctx,{id:j(),type:l.FEATURE,properties:{},geometry:{coordinates:e,type:this.type.replace("Multi","")}})))},Q.prototype.isValid=function(){return this.features.every((e=>e.isValid()))},Q.prototype.setCoordinates=function(e){this.features=this._coordinatesToFeatures(e),this.changed()},Q.prototype.getCoordinate=function(e){return z(this.features,"getCoordinate",e)},Q.prototype.getCoordinates=function(){return JSON.parse(JSON.stringify(this.features.map((e=>e.type===l.POLYGON?e.getCoordinates():e.coordinates))))},Q.prototype.updateCoordinate=function(e,t,o){z(this.features,"updateCoordinate",e,t,o),this.changed()},Q.prototype.addCoordinate=function(e,t,o){z(this.features,"addCoordinate",e,t,o),this.changed()},Q.prototype.removeCoordinate=function(e){z(this.features,"removeCoordinate",e),this.changed()},Q.prototype.getFeatures=function(){return this.features};const ee=Q;function te(e){this.map=e.map,this.drawConfig=JSON.parse(JSON.stringify(e.options||{})),this._ctx=e}te.prototype.setSelected=function(e){return this._ctx.store.setSelected(e)},te.prototype.setSelectedCoordinates=function(e){this._ctx.store.setSelectedCoordinates(e),e.reduce(((e,t)=>(void 0===e[t.feature_id]&&(e[t.feature_id]=!0,this._ctx.store.get(t.feature_id).changed()),e)),{})},te.prototype.getSelected=function(){return this._ctx.store.getSelected()},te.prototype.getSelectedIds=function(){return this._ctx.store.getSelectedIds()},te.prototype.isSelected=function(e){return this._ctx.store.isSelected(e)},te.prototype.getFeature=function(e){return this._ctx.store.get(e)},te.prototype.select=function(e){return this._ctx.store.select(e)},te.prototype.deselect=function(e){return this._ctx.store.deselect(e)},te.prototype.deleteFeature=function(e,t={}){return this._ctx.store.delete(e,t)},te.prototype.addFeature=function(e,t={}){return this._ctx.store.add(e,t)},te.prototype.clearSelectedFeatures=function(){return this._ctx.store.clearSelected()},te.prototype.clearSelectedCoordinates=function(){return this._ctx.store.clearSelectedCoordinates()},te.prototype.setActionableState=function(e={}){const t={trash:e.trash||!1,combineFeatures:e.combineFeatures||!1,uncombineFeatures:e.uncombineFeatures||!1};return this._ctx.events.actionable(t)},te.prototype.changeMode=function(e,t={},o={}){return this._ctx.events.changeMode(e,t,o)},te.prototype.fire=function(e,t){return this._ctx.events.fire(e,t)},te.prototype.updateUIClasses=function(e){return this._ctx.ui.queueMapClasses(e)},te.prototype.activateUIButton=function(e){return this._ctx.ui.setActiveButton(e)},te.prototype.featuresAt=function(e,t,o="click"){if("click"!==o&&"touch"!==o)throw new Error("invalid buffer type");return N[o](e,t,this._ctx)},te.prototype.newFeature=function(e){const t=e.geometry.type;return t===l.POINT?new X(this._ctx,e):t===l.LINE_STRING?new H(this._ctx,e):t===l.POLYGON?new W(this._ctx,e):new ee(this._ctx,e)},te.prototype.isInstanceOf=function(e,t){if(e===l.POINT)return t instanceof X;if(e===l.LINE_STRING)return t instanceof H;if(e===l.POLYGON)return t instanceof W;if("MultiFeature"===e)return t instanceof ee;throw new Error(`Unknown feature class: ${e}`)},te.prototype.doRender=function(e){return this._ctx.store.featureChanged(e)};const oe=te;te.prototype.onSetup=function(){},te.prototype.onDrag=function(){},te.prototype.onClick=function(){},te.prototype.onMouseMove=function(){},te.prototype.onMouseDown=function(){},te.prototype.onMouseUp=function(){},te.prototype.onMouseOut=function(){},te.prototype.onKeyUp=function(){},te.prototype.onKeyDown=function(){},te.prototype.onTouchStart=function(){},te.prototype.onTouchMove=function(){},te.prototype.onTouchEnd=function(){},te.prototype.onTap=function(){},te.prototype.onStop=function(){},te.prototype.onTrash=function(){},te.prototype.onCombineFeature=function(){},te.prototype.onUncombineFeature=function(){},te.prototype.toDisplayFeatures=function(){throw new Error("You must overwrite toDisplayFeatures")};const ne={drag:"onDrag",click:"onClick",mousemove:"onMouseMove",mousedown:"onMouseDown",mouseup:"onMouseUp",mouseout:"onMouseOut",keyup:"onKeyUp",keydown:"onKeyDown",touchstart:"onTouchStart",touchmove:"onTouchMove",touchend:"onTouchEnd",tap:"onTap"},re=Object.keys(ne);const ie=function(e){return[].concat(e).filter((e=>void 0!==e))};function se(){const e=this;if(!e.ctx.map||void 0===e.ctx.map.getSource(a.HOT))return c();const t=e.ctx.events.currentModeName();e.ctx.ui.queueMapClasses({mode:t});let o=[],n=[];e.isDirty?n=e.getAllIds():(o=e.getChangedIds().filter((t=>void 0!==e.get(t))),n=e.sources.hot.filter((t=>t.properties.id&&-1===o.indexOf(t.properties.id)&&void 0!==e.get(t.properties.id))).map((e=>e.properties.id))),e.sources.hot=[];const r=e.sources.cold.length;e.sources.cold=e.isDirty?[]:e.sources.cold.filter((e=>{const t=e.properties.id||e.properties.parent;return-1===o.indexOf(t)}));const i=r!==e.sources.cold.length||n.length>0;function s(o,n){const r=e.get(o).internal(t);e.ctx.events.currentModeRender(r,(o=>{o.properties.mode=t,e.sources[n].push(o)}))}function c(){e.isDirty=!1,e.clearChangedIds()}o.forEach((e=>s(e,"hot"))),n.forEach((e=>s(e,"cold"))),i&&e.ctx.map.getSource(a.COLD).setData({type:l.FEATURE_COLLECTION,features:e.sources.cold}),e.ctx.map.getSource(a.HOT).setData({type:l.FEATURE_COLLECTION,features:e.sources.hot}),c()}function ae(e){let t;this._features={},this._featureIds=new L,this._selectedFeatureIds=new L,this._selectedCoordinates=[],this._changedFeatureIds=new L,this._emitSelectionChange=!1,this._mapInitialConfig={},this.ctx=e,this.sources={hot:[],cold:[]},this.render=()=>{t||(t=requestAnimationFrame((()=>{t=null,se.call(this),this._emitSelectionChange&&(this.ctx.events.fire(p.SELECTION_CHANGE,{features:this.getSelected().map((e=>e.toGeoJSON())),points:this.getSelectedCoordinates().map((e=>({type:l.FEATURE,properties:{},geometry:{type:l.POINT,coordinates:e.coordinates}})))}),this._emitSelectionChange=!1),this.ctx.events.fire(p.RENDER,{})})))},this.isDirty=!1}function ce(e,t={}){const o=e._selectedCoordinates.filter((t=>e._selectedFeatureIds.has(t.feature_id)));e._selectedCoordinates.length===o.length||t.silent||(e._emitSelectionChange=!0),e._selectedCoordinates=o}ae.prototype.createRenderBatch=function(){const e=this.render;let t=0;return this.render=function(){t++},()=>{this.render=e,t>0&&this.render()}},ae.prototype.setDirty=function(){return this.isDirty=!0,this},ae.prototype.featureCreated=function(e,t={}){if(this._changedFeatureIds.add(e),!0!==(null!=t.silent?t.silent:this.ctx.options.suppressAPIEvents)){const t=this.get(e);this.ctx.events.fire(p.CREATE,{features:[t.toGeoJSON()]})}return this},ae.prototype.featureChanged=function(e,t={}){return this._changedFeatureIds.add(e),!0!==(null!=t.silent?t.silent:this.ctx.options.suppressAPIEvents)&&this.ctx.events.fire(p.UPDATE,{action:t.action?t.action:h.CHANGE_COORDINATES,features:[this.get(e).toGeoJSON()]}),this},ae.prototype.getChangedIds=function(){return this._changedFeatureIds.values()},ae.prototype.clearChangedIds=function(){return this._changedFeatureIds.clear(),this},ae.prototype.getAllIds=function(){return this._featureIds.values()},ae.prototype.add=function(e,t={}){return this._features[e.id]=e,this._featureIds.add(e.id),this.featureCreated(e.id,{silent:t.silent}),this},ae.prototype.delete=function(e,t={}){const o=[];return ie(e).forEach((e=>{this._featureIds.has(e)&&(this._featureIds.delete(e),this._selectedFeatureIds.delete(e),t.silent||-1===o.indexOf(this._features[e])&&o.push(this._features[e].toGeoJSON()),delete this._features[e],this.isDirty=!0)})),o.length&&this.ctx.events.fire(p.DELETE,{features:o}),ce(this,t),this},ae.prototype.get=function(e){return this._features[e]},ae.prototype.getAll=function(){return Object.keys(this._features).map((e=>this._features[e]))},ae.prototype.select=function(e,t={}){return ie(e).forEach((e=>{this._selectedFeatureIds.has(e)||(this._selectedFeatureIds.add(e),this._changedFeatureIds.add(e),t.silent||(this._emitSelectionChange=!0))})),this},ae.prototype.deselect=function(e,t={}){return ie(e).forEach((e=>{this._selectedFeatureIds.has(e)&&(this._selectedFeatureIds.delete(e),this._changedFeatureIds.add(e),t.silent||(this._emitSelectionChange=!0))})),ce(this,t),this},ae.prototype.clearSelected=function(e={}){return this.deselect(this._selectedFeatureIds.values(),{silent:e.silent}),this},ae.prototype.setSelected=function(e,t={}){return e=ie(e),this.deselect(this._selectedFeatureIds.values().filter((t=>-1===e.indexOf(t))),{silent:t.silent}),this.select(e.filter((e=>!this._selectedFeatureIds.has(e))),{silent:t.silent}),this},ae.prototype.setSelectedCoordinates=function(e){return this._selectedCoordinates=e,this._emitSelectionChange=!0,this},ae.prototype.clearSelectedCoordinates=function(){return this._selectedCoordinates=[],this._emitSelectionChange=!0,this},ae.prototype.getSelectedIds=function(){return this._selectedFeatureIds.values()},ae.prototype.getSelected=function(){return this.getSelectedIds().map((e=>this.get(e)))},ae.prototype.getSelectedCoordinates=function(){return this._selectedCoordinates.map((e=>({coordinates:this.get(e.feature_id).getCoordinate(e.coord_path)})))},ae.prototype.isSelected=function(e){return this._selectedFeatureIds.has(e)},ae.prototype.setFeatureProperty=function(e,t,o,n={}){this.get(e).setProperty(t,o),this.featureChanged(e,{silent:n.silent,action:h.CHANGE_PROPERTIES})},ae.prototype.storeMapConfig=function(){y.forEach((e=>{this.ctx.map[e]&&(this._mapInitialConfig[e]=this.ctx.map[e].isEnabled())}))},ae.prototype.restoreMapConfig=function(){Object.keys(this._mapInitialConfig).forEach((e=>{this._mapInitialConfig[e]?this.ctx.map[e].enable():this.ctx.map[e].disable()}))},ae.prototype.getInitialConfigValue=function(e){return void 0===this._mapInitialConfig[e]||this._mapInitialConfig[e]};const ue=["mode","feature","mouse"];function le(e){let t=null,o=null;const n={onRemove(){return e.map.off("load",n.connect),clearInterval(o),n.removeLayers(),e.store.restoreMapConfig(),e.ui.removeButtons(),e.events.removeEventListeners(),e.ui.clearMapClasses(),e.boxZoomInitial&&e.map.boxZoom.enable(),e.map=null,e.container=null,e.store=null,t&&t.parentNode&&t.parentNode.removeChild(t),t=null,this},connect(){e.map.off("load",n.connect),clearInterval(o),n.addLayers(),e.store.storeMapConfig(),e.events.addEventListeners()},onAdd(i){if(e.map=i,e.events=function(e){const t=Object.keys(e.options.modes).reduce(((t,o)=>(t[o]=function(e){const t=Object.keys(e);return function(o,n={}){let r={};const i=t.reduce(((t,o)=>(t[o]=e[o],t)),new oe(o));return{start(){r=i.onSetup(n),re.forEach((t=>{const o=ne[t];let n=()=>!1;var s;e[o]&&(n=()=>!0),this.on(t,n,(s=o,e=>i[s](r,e)))}))},stop(){i.onStop(r)},trash(){i.onTrash(r)},combineFeatures(){i.onCombineFeatures(r)},uncombineFeatures(){i.onUncombineFeatures(r)},render(e,t){i.toDisplayFeatures(r,e,t)}}}}(e.options.modes[o]),t)),{});let o={},n={};const i={};let a=null,u=null;i.drag=function(t,o){o({point:t.point,time:(new Date).getTime()})?(e.ui.queueMapClasses({mouse:c.DRAG}),u.drag(t)):t.originalEvent.stopPropagation()},i.mousedrag=function(e){i.drag(e,(e=>!U(o,e)))},i.touchdrag=function(e){i.drag(e,(e=>!G(n,e)))},i.mousemove=function(t){if(1===(void 0!==t.originalEvent.buttons?t.originalEvent.buttons:t.originalEvent.which))return i.mousedrag(t);const o=A(t,e);t.featureTarget=o,u.mousemove(t)},i.mousedown=function(t){o={time:(new Date).getTime(),point:t.point};const n=A(t,e);t.featureTarget=n,u.mousedown(t)},i.mouseup=function(t){const n=A(t,e);t.featureTarget=n,U(o,{point:t.point,time:(new Date).getTime()})?u.click(t):u.mouseup(t)},i.mouseout=function(e){u.mouseout(e)},i.touchstart=function(t){if(!e.options.touchEnabled)return;n={time:(new Date).getTime(),point:t.point};const o=N.touch(t,null,e)[0];t.featureTarget=o,u.touchstart(t)},i.touchmove=function(t){if(e.options.touchEnabled)return u.touchmove(t),i.touchdrag(t)},i.touchend=function(t){if(t.originalEvent.preventDefault(),!e.options.touchEnabled)return;const o=N.touch(t,null,e)[0];t.featureTarget=o,G(n,{time:(new Date).getTime(),point:t.point})?u.tap(t):u.touchend(t)};const l=e=>!(8===e||46===e||e>=48&&e<=57);function h(o,n,i={}){u.stop();const s=t[o];if(void 0===s)throw new Error(`${o} is not valid`);a=o;const c=s(e,n);u=r(c,e),i.silent||e.map.fire(p.MODE_CHANGE,{mode:o}),e.store.setDirty(),e.store.render()}i.keydown=function(t){(t.srcElement||t.target).classList.contains(s.CANVAS)&&(8!==t.keyCode&&46!==t.keyCode||!e.options.controls.trash?l(t.keyCode)?u.keydown(t):49===t.keyCode&&e.options.controls.point?h(d.DRAW_POINT):50===t.keyCode&&e.options.controls.line_string?h(d.DRAW_LINE_STRING):51===t.keyCode&&e.options.controls.polygon&&h(d.DRAW_POLYGON):(t.preventDefault(),u.trash()))},i.keyup=function(e){l(e.keyCode)&&u.keyup(e)},i.zoomend=function(){e.store.changeZoom()},i.data=function(t){if("style"===t.dataType){const{setup:t,map:o,options:n,store:r}=e;n.styles.some((e=>o.getLayer(e.id)))||(t.addLayers(),r.setDirty(),r.render())}};const f={trash:!1,combineFeatures:!1,uncombineFeatures:!1};return{start(){a=e.options.defaultMode,u=r(t[a](e),e)},changeMode:h,actionable:function(t){let o=!1;Object.keys(t).forEach((e=>{if(void 0===f[e])throw new Error("Invalid action type");f[e]!==t[e]&&(o=!0),f[e]=t[e]})),o&&e.map.fire(p.ACTIONABLE,{actions:f})},currentModeName:()=>a,currentModeRender:(e,t)=>u.render(e,t),fire(t,o){e.map&&e.map.fire(t,o)},addEventListeners(){e.map.on("mousemove",i.mousemove),e.map.on("mousedown",i.mousedown),e.map.on("mouseup",i.mouseup),e.map.on("data",i.data),e.map.on("touchmove",i.touchmove),e.map.on("touchstart",i.touchstart),e.map.on("touchend",i.touchend),e.container.addEventListener("mouseout",i.mouseout),e.options.keybindings&&(e.container.addEventListener("keydown",i.keydown),e.container.addEventListener("keyup",i.keyup))},removeEventListeners(){e.map.off("mousemove",i.mousemove),e.map.off("mousedown",i.mousedown),e.map.off("mouseup",i.mouseup),e.map.off("data",i.data),e.map.off("touchmove",i.touchmove),e.map.off("touchstart",i.touchstart),e.map.off("touchend",i.touchend),e.container.removeEventListener("mouseout",i.mouseout),e.options.keybindings&&(e.container.removeEventListener("keydown",i.keydown),e.container.removeEventListener("keyup",i.keyup))},trash(e){u.trash(e)},combineFeatures(){u.combineFeatures()},uncombineFeatures(){u.uncombineFeatures()},getMode:()=>a}}(e),e.ui=function(e){const t={};let o=null,n={mode:null,feature:null,mouse:null},r={mode:null,feature:null,mouse:null};function i(e){r=Object.assign(r,e)}function a(){if(!e.container)return;const t=[],o=[];ue.forEach((e=>{r[e]!==n[e]&&(t.push(`${e}-${n[e]}`),null!==r[e]&&o.push(`${e}-${r[e]}`))})),t.length>0&&e.container.classList.remove(...t),o.length>0&&e.container.classList.add(...o),n=Object.assign(n,r)}function c(e,t={}){const n=document.createElement("button");return n.className=`${s.CONTROL_BUTTON} ${t.className}`,n.setAttribute("title",t.title),t.container.appendChild(n),n.addEventListener("click",(n=>{if(n.preventDefault(),n.stopPropagation(),n.target===o)return l(),void t.onDeactivate();p(e),t.onActivate()}),!0),n}function l(){o&&(o.classList.remove(s.ACTIVE_BUTTON),o=null)}function p(e){l();const n=t[e];n&&n&&"trash"!==e&&(n.classList.add(s.ACTIVE_BUTTON),o=n)}return{setActiveButton:p,queueMapClasses:i,updateMapClasses:a,clearMapClasses:function(){i({mode:null,feature:null,mouse:null}),a()},addButtons:function(){const o=e.options.controls,n=document.createElement("div");return n.className=`${s.CONTROL_GROUP} ${s.CONTROL_BASE}`,o?(o[u.LINE]&&(t[u.LINE]=c(u.LINE,{container:n,className:s.CONTROL_BUTTON_LINE,title:"LineString tool "+(e.options.keybindings?"(l)":""),onActivate:()=>e.events.changeMode(d.DRAW_LINE_STRING),onDeactivate:()=>e.events.trash()})),o[u.POLYGON]&&(t[u.POLYGON]=c(u.POLYGON,{container:n,className:s.CONTROL_BUTTON_POLYGON,title:"Polygon tool "+(e.options.keybindings?"(p)":""),onActivate:()=>e.events.changeMode(d.DRAW_POLYGON),onDeactivate:()=>e.events.trash()})),o[u.POINT]&&(t[u.POINT]=c(u.POINT,{container:n,className:s.CONTROL_BUTTON_POINT,title:"Marker tool "+(e.options.keybindings?"(m)":""),onActivate:()=>e.events.changeMode(d.DRAW_POINT),onDeactivate:()=>e.events.trash()})),o.trash&&(t.trash=c("trash",{container:n,className:s.CONTROL_BUTTON_TRASH,title:"Delete",onActivate:()=>{e.events.trash()}})),o.combine_features&&(t.combine_features=c("combineFeatures",{container:n,className:s.CONTROL_BUTTON_COMBINE_FEATURES,title:"Combine",onActivate:()=>{e.events.combineFeatures()}})),o.uncombine_features&&(t.uncombine_features=c("uncombineFeatures",{container:n,className:s.CONTROL_BUTTON_UNCOMBINE_FEATURES,title:"Uncombine",onActivate:()=>{e.events.uncombineFeatures()}})),n):n},removeButtons:function(){Object.keys(t).forEach((e=>{const o=t[e];o.parentNode&&o.parentNode.removeChild(o),delete t[e]}))}}}(e),e.container=i.getContainer(),e.store=new ae(e),t=e.ui.addButtons(),e.options.boxSelect){e.boxZoomInitial=i.boxZoom.isEnabled(),i.boxZoom.disable();const t=i.dragPan.isEnabled();i.dragPan.disable(),i.dragPan.enable(),t||i.dragPan.disable()}return i.loaded()?n.connect():(i.on("load",n.connect),o=setInterval((()=>{i.loaded()&&n.connect()}),16)),e.events.start(),t},addLayers(){e.map.addSource(a.COLD,{data:{type:l.FEATURE_COLLECTION,features:[]},type:"geojson"}),e.map.addSource(a.HOT,{data:{type:l.FEATURE_COLLECTION,features:[]},type:"geojson"}),e.options.styles.forEach((t=>{e.map.addLayer(t)})),e.store.setDirty(!0),e.store.render()},removeLayers(){e.options.styles.forEach((t=>{e.map.getLayer(t.id)&&e.map.removeLayer(t.id)})),e.map.getSource(a.COLD)&&e.map.removeSource(a.COLD),e.map.getSource(a.HOT)&&e.map.removeSource(a.HOT)}};return e.setup=n,n}const de="#3bb2d0",pe="#fbb03b",he="#fff",fe=[{id:"gl-draw-polygon-fill",type:"fill",filter:["all",["==","$type","Polygon"]],paint:{"fill-color":["case",["==",["get","active"],"true"],pe,de],"fill-opacity":.1}},{id:"gl-draw-lines",type:"line",filter:["any",["==","$type","LineString"],["==","$type","Polygon"]],layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":["case",["==",["get","active"],"true"],pe,de],"line-dasharray":["case",["==",["get","active"],"true"],[.2,2],[2,0]],"line-width":2}},{id:"gl-draw-point-outer",type:"circle",filter:["all",["==","$type","Point"],["==","meta","feature"]],paint:{"circle-radius":["case",["==",["get","active"],"true"],7,5],"circle-color":he}},{id:"gl-draw-point-inner",type:"circle",filter:["all",["==","$type","Point"],["==","meta","feature"]],paint:{"circle-radius":["case",["==",["get","active"],"true"],5,3],"circle-color":["case",["==",["get","active"],"true"],pe,de]}},{id:"gl-draw-vertex-outer",type:"circle",filter:["all",["==","$type","Point"],["==","meta","vertex"],["!=","mode","simple_select"]],paint:{"circle-radius":["case",["==",["get","active"],"true"],7,5],"circle-color":he}},{id:"gl-draw-vertex-inner",type:"circle",filter:["all",["==","$type","Point"],["==","meta","vertex"],["!=","mode","simple_select"]],paint:{"circle-radius":["case",["==",["get","active"],"true"],5,3],"circle-color":pe}},{id:"gl-draw-midpoint",type:"circle",filter:["all",["==","meta","midpoint"]],paint:{"circle-radius":3,"circle-color":pe}}];function ge(e){return function(t){const o=t.featureTarget;return!!o&&!!o.properties&&o.properties.meta===e}}function ye(e){return!!e.originalEvent&&!!e.originalEvent.shiftKey&&0===e.originalEvent.button}function me(e){return!!e.featureTarget&&!!e.featureTarget.properties&&e.featureTarget.properties.active===g.ACTIVE&&e.featureTarget.properties.meta===f.FEATURE}function Ee(e){return!!e.featureTarget&&!!e.featureTarget.properties&&e.featureTarget.properties.active===g.INACTIVE&&e.featureTarget.properties.meta===f.FEATURE}function ve(e){return void 0===e.featureTarget}function Ce(e){return!!e.featureTarget&&!!e.featureTarget.properties&&e.featureTarget.properties.meta===f.FEATURE}function Te(e){const t=e.featureTarget;return!!t&&!!t.properties&&t.properties.meta===f.VERTEX}function Se(e){return!!e.originalEvent&&!0===e.originalEvent.shiftKey}function Ie(e){return 27===e.keyCode}function _e(e){return 13===e.keyCode}function Oe(){return!0}function be(e,t){this.x=e,this.y=t}be.prototype={clone(){return new be(this.x,this.y)},add(e){return this.clone()._add(e)},sub(e){return this.clone()._sub(e)},multByPoint(e){return this.clone()._multByPoint(e)},divByPoint(e){return this.clone()._divByPoint(e)},mult(e){return this.clone()._mult(e)},div(e){return this.clone()._div(e)},rotate(e){return this.clone()._rotate(e)},rotateAround(e,t){return this.clone()._rotateAround(e,t)},matMult(e){return this.clone()._matMult(e)},unit(){return this.clone()._unit()},perp(){return this.clone()._perp()},round(){return this.clone()._round()},mag(){return Math.sqrt(this.x*this.x+this.y*this.y)},equals(e){return this.x===e.x&&this.y===e.y},dist(e){return Math.sqrt(this.distSqr(e))},distSqr(e){const t=e.x-this.x,o=e.y-this.y;return t*t+o*o},angle(){return Math.atan2(this.y,this.x)},angleTo(e){return Math.atan2(this.y-e.y,this.x-e.x)},angleWith(e){return this.angleWithSep(e.x,e.y)},angleWithSep(e,t){return Math.atan2(this.x*t-this.y*e,this.x*e+this.y*t)},_matMult(e){const t=e[0]*this.x+e[1]*this.y,o=e[2]*this.x+e[3]*this.y;return this.x=t,this.y=o,this},_add(e){return this.x+=e.x,this.y+=e.y,this},_sub(e){return this.x-=e.x,this.y-=e.y,this},_mult(e){return this.x*=e,this.y*=e,this},_div(e){return this.x/=e,this.y/=e,this},_multByPoint(e){return this.x*=e.x,this.y*=e.y,this},_divByPoint(e){return this.x/=e.x,this.y/=e.y,this},_unit(){return this._div(this.mag()),this},_perp(){const e=this.y;return this.y=this.x,this.x=-e,this},_rotate(e){const t=Math.cos(e),o=Math.sin(e),n=t*this.x-o*this.y,r=o*this.x+t*this.y;return this.x=n,this.y=r,this},_rotateAround(e,t){const o=Math.cos(e),n=Math.sin(e),r=t.x+o*(this.x-t.x)-n*(this.y-t.y),i=t.y+n*(this.x-t.x)+o*(this.y-t.y);return this.x=r,this.y=i,this},_round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},constructor:be},be.convert=function(e){if(e instanceof be)return e;if(Array.isArray(e))return new be(+e[0],+e[1]);if(void 0!==e.x&&void 0!==e.y)return new be(+e.x,+e.y);throw new Error("Expected [x, y] or {x, y} point format")};const Me=function(e,t){const o=t.getBoundingClientRect();return new be(e.clientX-o.left-(t.clientLeft||0),e.clientY-o.top-(t.clientTop||0))};function Le(e,t,o,n){return{type:l.FEATURE,properties:{meta:f.VERTEX,parent:e,coord_path:o,active:n?g.ACTIVE:g.INACTIVE},geometry:{type:l.POINT,coordinates:t}}}function xe(e,t,o){const n=t.geometry.coordinates,r=o.geometry.coordinates;if(n[1]>C||n[1]<E||r[1]>C||r[1]<E)return null;const i={lng:(n[0]+r[0])/2,lat:(n[1]+r[1])/2};return{type:l.FEATURE,properties:{meta:f.MIDPOINT,parent:e,lng:i.lng,lat:i.lat,coord_path:o.properties.coord_path},geometry:{type:l.POINT,coordinates:[i.lng,i.lat]}}}const Ne=function e(t,o={},n=null){const{type:r,coordinates:i}=t.geometry,s=t.properties&&t.properties.id;let a=[];function c(e,t){let n="",r=null;e.forEach(((e,i)=>{const c=null!=t?`${t}.${i}`:String(i),l=Le(s,e,c,u(c));if(o.midpoints&&r){const e=xe(s,r,l);e&&a.push(e)}r=l;const d=JSON.stringify(e);n!==d&&a.push(l),0===i&&(n=d)}))}function u(e){return!!o.selectedPaths&&-1!==o.selectedPaths.indexOf(e)}return r===l.POINT?a.push(Le(s,i,n,u(n))):r===l.POLYGON?i.forEach(((e,t)=>{c(e,null!==n?`${n}.${t}`:String(t))})):r===l.LINE_STRING?c(i,n):0===r.indexOf(l.MULTI_PREFIX)&&function(){const n=r.replace(l.MULTI_PREFIX,"");i.forEach(((r,i)=>{const s={type:l.FEATURE,properties:t.properties,geometry:{type:n,coordinates:r}};a=a.concat(e(s,o,i))}))}(),a},Pe={enable(e){setTimeout((()=>{e.map&&e.map.doubleClickZoom&&e._ctx&&e._ctx.store&&e._ctx.store.getInitialConfigValue&&e._ctx.store.getInitialConfigValue("doubleClickZoom")&&e.map.doubleClickZoom.enable()}),0)},disable(e){setTimeout((()=>{e.map&&e.map.doubleClickZoom&&e.map.doubleClickZoom.disable()}),0)}},{LAT_MIN:Ae,LAT_MAX:Fe,LAT_RENDERED_MIN:we,LAT_RENDERED_MAX:Re,LNG_MIN:De,LNG_MAX:Ue}=e;function ke(e,t){let o=Ae,n=Fe,r=Ae,i=Fe,s=Ue,a=De;e.forEach((e=>{const t=function(e){const t={Point:0,LineString:1,Polygon:2,MultiPoint:1,MultiLineString:2,MultiPolygon:3}[e.geometry.type],o=[e.geometry.coordinates].flat(t),n=o.map((e=>e[0])),r=o.map((e=>e[1])),i=e=>Math.min.apply(null,e),s=e=>Math.max.apply(null,e);return[i(n),i(r),s(n),s(r)]}(e),c=t[1],u=t[3],l=t[0],d=t[2];c>o&&(o=c),u<n&&(n=u),u>r&&(r=u),c<i&&(i=c),l<s&&(s=l),d>a&&(a=d)}));const c=t;return o+c.lat>Re&&(c.lat=Re-o),r+c.lat>Fe&&(c.lat=Fe-r),n+c.lat<we&&(c.lat=we-n),i+c.lat<Ae&&(c.lat=Ae-i),s+c.lng<=De&&(c.lng+=360*Math.ceil(Math.abs(c.lng)/360)),a+c.lng>=Ue&&(c.lng-=360*Math.ceil(Math.abs(c.lng)/360)),c}function Ve(e,t){const o=ke(e.map((e=>e.toGeoJSON())),t);e.forEach((e=>{const t=e.getCoordinates(),n=e=>{const t={lng:e[0]+o.lng,lat:e[1]+o.lat};return[t.lng,t.lat]},r=e=>e.map((e=>n(e)));let i;e.type===l.POINT?i=n(t):e.type===l.LINE_STRING||e.type===l.MULTI_POINT?i=t.map(n):e.type===l.POLYGON||e.type===l.MULTI_LINE_STRING?i=t.map(r):e.type===l.MULTI_POLYGON&&(i=t.map((e=>e.map((e=>r(e)))))),e.incomingCoords(i)}))}const Ge={onSetup:function(e){const t={dragMoveLocation:null,boxSelectStartLocation:null,boxSelectElement:void 0,boxSelecting:!1,canBoxSelect:!1,dragMoving:!1,canDragMove:!1,initialDragPanState:this.map.dragPan.isEnabled(),initiallySelectedFeatureIds:e.featureIds||[]};return this.setSelected(t.initiallySelectedFeatureIds.filter((e=>void 0!==this.getFeature(e)))),this.fireActionable(),this.setActionableState({combineFeatures:!0,uncombineFeatures:!0,trash:!0}),t},fireUpdate:function(){this.fire(p.UPDATE,{action:h.MOVE,features:this.getSelected().map((e=>e.toGeoJSON()))})},fireActionable:function(){const e=this.getSelected(),t=e.filter((e=>this.isInstanceOf("MultiFeature",e)));let o=!1;if(e.length>1){o=!0;const t=e[0].type.replace("Multi","");e.forEach((e=>{e.type.replace("Multi","")!==t&&(o=!1)}))}const n=t.length>0,r=e.length>0;this.setActionableState({combineFeatures:o,uncombineFeatures:n,trash:r})},getUniqueIds:function(e){return e.length?e.map((e=>e.properties.id)).filter((e=>void 0!==e)).reduce(((e,t)=>(e.add(t),e)),new L).values():[]},stopExtendedInteractions:function(e){e.boxSelectElement&&(e.boxSelectElement.parentNode&&e.boxSelectElement.parentNode.removeChild(e.boxSelectElement),e.boxSelectElement=null),(e.canDragMove||e.canBoxSelect)&&!0===e.initialDragPanState&&this.map.dragPan.enable(),e.boxSelecting=!1,e.canBoxSelect=!1,e.dragMoving=!1,e.canDragMove=!1},onStop:function(){Pe.enable(this)},onMouseMove:function(e,t){return Ce(t)&&e.dragMoving&&this.fireUpdate(),this.stopExtendedInteractions(e),!0},onMouseOut:function(e){return!e.dragMoving||this.fireUpdate()}};Ge.onTap=Ge.onClick=function(e,t){return ve(t)?this.clickAnywhere(e,t):ge(f.VERTEX)(t)?this.clickOnVertex(e,t):Ce(t)?this.clickOnFeature(e,t):void 0},Ge.clickAnywhere=function(e){const t=this.getSelectedIds();t.length&&(this.clearSelectedFeatures(),t.forEach((e=>this.doRender(e)))),Pe.enable(this),this.stopExtendedInteractions(e)},Ge.clickOnVertex=function(e,t){this.changeMode(d.DIRECT_SELECT,{featureId:t.featureTarget.properties.parent,coordPath:t.featureTarget.properties.coord_path,startPos:t.lngLat}),this.updateUIClasses({mouse:c.MOVE})},Ge.startOnActiveFeature=function(e,t){this.stopExtendedInteractions(e),this.map.dragPan.disable(),this.doRender(t.featureTarget.properties.id),e.canDragMove=!0,e.dragMoveLocation=t.lngLat},Ge.clickOnFeature=function(e,t){Pe.disable(this),this.stopExtendedInteractions(e);const o=Se(t),n=this.getSelectedIds(),r=t.featureTarget.properties.id,i=this.isSelected(r);if(!o&&i&&this.getFeature(r).type!==l.POINT)return this.changeMode(d.DIRECT_SELECT,{featureId:r});i&&o?(this.deselect(r),this.updateUIClasses({mouse:c.POINTER}),1===n.length&&Pe.enable(this)):!i&&o?(this.select(r),this.updateUIClasses({mouse:c.MOVE})):i||o||(n.forEach((e=>this.doRender(e))),this.setSelected(r),this.updateUIClasses({mouse:c.MOVE})),this.doRender(r)},Ge.onMouseDown=function(e,t){return e.initialDragPanState=this.map.dragPan.isEnabled(),me(t)?this.startOnActiveFeature(e,t):this.drawConfig.boxSelect&&ye(t)?this.startBoxSelect(e,t):void 0},Ge.startBoxSelect=function(e,t){this.stopExtendedInteractions(e),this.map.dragPan.disable(),e.boxSelectStartLocation=Me(t.originalEvent,this.map.getContainer()),e.canBoxSelect=!0},Ge.onTouchStart=function(e,t){if(me(t))return this.startOnActiveFeature(e,t)},Ge.onDrag=function(e,t){return e.canDragMove?this.dragMove(e,t):this.drawConfig.boxSelect&&e.canBoxSelect?this.whileBoxSelect(e,t):void 0},Ge.whileBoxSelect=function(e,t){e.boxSelecting=!0,this.updateUIClasses({mouse:c.ADD}),e.boxSelectElement||(e.boxSelectElement=document.createElement("div"),e.boxSelectElement.classList.add(s.BOX_SELECT),this.map.getContainer().appendChild(e.boxSelectElement));const o=Me(t.originalEvent,this.map.getContainer()),n=Math.min(e.boxSelectStartLocation.x,o.x),r=Math.max(e.boxSelectStartLocation.x,o.x),i=Math.min(e.boxSelectStartLocation.y,o.y),a=Math.max(e.boxSelectStartLocation.y,o.y),u=`translate(${n}px, ${i}px)`;e.boxSelectElement.style.transform=u,e.boxSelectElement.style.WebkitTransform=u,e.boxSelectElement.style.width=r-n+"px",e.boxSelectElement.style.height=a-i+"px"},Ge.dragMove=function(e,t){e.dragMoving=!0,t.originalEvent.stopPropagation();const o={lng:t.lngLat.lng-e.dragMoveLocation.lng,lat:t.lngLat.lat-e.dragMoveLocation.lat};Ve(this.getSelected(),o),e.dragMoveLocation=t.lngLat},Ge.onTouchEnd=Ge.onMouseUp=function(e,t){if(e.dragMoving)this.fireUpdate();else if(e.boxSelecting){const o=[e.boxSelectStartLocation,Me(t.originalEvent,this.map.getContainer())],n=this.featuresAt(null,o,"click"),r=this.getUniqueIds(n).filter((e=>!this.isSelected(e)));r.length&&(this.select(r),r.forEach((e=>this.doRender(e))),this.updateUIClasses({mouse:c.MOVE}))}this.stopExtendedInteractions(e)},Ge.toDisplayFeatures=function(e,t,o){t.properties.active=this.isSelected(t.properties.id)?g.ACTIVE:g.INACTIVE,o(t),this.fireActionable(),t.properties.active===g.ACTIVE&&t.geometry.type!==l.POINT&&Ne(t).forEach(o)},Ge.onTrash=function(){this.deleteFeature(this.getSelectedIds()),this.fireActionable()},Ge.onCombineFeatures=function(){const e=this.getSelected();if(0===e.length||e.length<2)return;const t=[],o=[],n=e[0].type.replace("Multi","");for(let r=0;r<e.length;r++){const i=e[r];if(i.type.replace("Multi","")!==n)return;i.type.includes("Multi")?i.getCoordinates().forEach((e=>{t.push(e)})):t.push(i.getCoordinates()),o.push(i.toGeoJSON())}if(o.length>1){const e=this.newFeature({type:l.FEATURE,properties:o[0].properties,geometry:{type:`Multi${n}`,coordinates:t}});this.addFeature(e),this.deleteFeature(this.getSelectedIds(),{silent:!0}),this.setSelected([e.id]),this.fire(p.COMBINE_FEATURES,{createdFeatures:[e.toGeoJSON()],deletedFeatures:o})}this.fireActionable()},Ge.onUncombineFeatures=function(){const e=this.getSelected();if(0===e.length)return;const t=[],o=[];for(let n=0;n<e.length;n++){const r=e[n];this.isInstanceOf("MultiFeature",r)&&(r.getFeatures().forEach((e=>{this.addFeature(e),e.properties=r.properties,t.push(e.toGeoJSON()),this.select([e.id])})),this.deleteFeature(r.id,{silent:!0}),o.push(r.toGeoJSON()))}t.length>1&&this.fire(p.UNCOMBINE_FEATURES,{createdFeatures:t,deletedFeatures:o}),this.fireActionable()};const Be=Ge,je=ge(f.VERTEX),Je=ge(f.MIDPOINT),$e={fireUpdate:function(){this.fire(p.UPDATE,{action:h.CHANGE_COORDINATES,features:this.getSelected().map((e=>e.toGeoJSON()))})},fireActionable:function(e){this.setActionableState({combineFeatures:!1,uncombineFeatures:!1,trash:e.selectedCoordPaths.length>0})},startDragging:function(e,t){e.initialDragPanState=this.map.dragPan.isEnabled(),this.map.dragPan.disable(),e.canDragMove=!0,e.dragMoveLocation=t.lngLat},stopDragging:function(e){e.canDragMove&&!0===e.initialDragPanState&&this.map.dragPan.enable(),e.dragMoving=!1,e.canDragMove=!1,e.dragMoveLocation=null},onVertex:function(e,t){this.startDragging(e,t);const o=t.featureTarget.properties,n=e.selectedCoordPaths.indexOf(o.coord_path);Se(t)||-1!==n?Se(t)&&-1===n&&e.selectedCoordPaths.push(o.coord_path):e.selectedCoordPaths=[o.coord_path];const r=this.pathsToCoordinates(e.featureId,e.selectedCoordPaths);this.setSelectedCoordinates(r)},onMidpoint:function(e,t){this.startDragging(e,t);const o=t.featureTarget.properties;e.feature.addCoordinate(o.coord_path,o.lng,o.lat),this.fireUpdate(),e.selectedCoordPaths=[o.coord_path]},pathsToCoordinates:function(e,t){return t.map((t=>({feature_id:e,coord_path:t})))},onFeature:function(e,t){0===e.selectedCoordPaths.length?this.startDragging(e,t):this.stopDragging(e)},dragFeature:function(e,t,o){Ve(this.getSelected(),o),e.dragMoveLocation=t.lngLat},dragVertex:function(e,t,o){const n=e.selectedCoordPaths.map((t=>e.feature.getCoordinate(t))),r=ke(n.map((e=>({type:l.FEATURE,properties:{},geometry:{type:l.POINT,coordinates:e}}))),o);for(let t=0;t<n.length;t++){const o=n[t];e.feature.updateCoordinate(e.selectedCoordPaths[t],o[0]+r.lng,o[1]+r.lat)}},clickNoTarget:function(){this.changeMode(d.SIMPLE_SELECT)},clickInactive:function(){this.changeMode(d.SIMPLE_SELECT)},clickActiveFeature:function(e){e.selectedCoordPaths=[],this.clearSelectedCoordinates(),e.feature.changed()},onSetup:function(e){const t=e.featureId,o=this.getFeature(t);if(!o)throw new Error("You must provide a featureId to enter direct_select mode");if(o.type===l.POINT)throw new TypeError("direct_select mode doesn't handle point features");const n={featureId:t,feature:o,dragMoveLocation:e.startPos||null,dragMoving:!1,canDragMove:!1,selectedCoordPaths:e.coordPath?[e.coordPath]:[]};return this.setSelectedCoordinates(this.pathsToCoordinates(t,n.selectedCoordPaths)),this.setSelected(t),Pe.disable(this),this.setActionableState({trash:!0}),n},onStop:function(){Pe.enable(this),this.clearSelectedCoordinates()},toDisplayFeatures:function(e,t,o){e.featureId===t.properties.id?(t.properties.active=g.ACTIVE,o(t),Ne(t,{map:this.map,midpoints:!0,selectedPaths:e.selectedCoordPaths}).forEach(o)):(t.properties.active=g.INACTIVE,o(t)),this.fireActionable(e)},onTrash:function(e){e.selectedCoordPaths.sort(((e,t)=>t.localeCompare(e,"en",{numeric:!0}))).forEach((t=>e.feature.removeCoordinate(t))),this.fireUpdate(),e.selectedCoordPaths=[],this.clearSelectedCoordinates(),this.fireActionable(e),!1===e.feature.isValid()&&(this.deleteFeature([e.featureId]),this.changeMode(d.SIMPLE_SELECT,{}))},onMouseMove:function(e,t){const o=me(t),n=je(t),r=Je(t),i=0===e.selectedCoordPaths.length;return o&&i||n&&!i?this.updateUIClasses({mouse:c.MOVE}):this.updateUIClasses({mouse:c.NONE}),(n||o||r)&&e.dragMoving&&this.fireUpdate(),this.stopDragging(e),!0},onMouseOut:function(e){return e.dragMoving&&this.fireUpdate(),!0}};$e.onTouchStart=$e.onMouseDown=function(e,t){return je(t)?this.onVertex(e,t):me(t)?this.onFeature(e,t):Je(t)?this.onMidpoint(e,t):void 0},$e.onDrag=function(e,t){if(!0!==e.canDragMove)return;e.dragMoving=!0,t.originalEvent.stopPropagation();const o={lng:t.lngLat.lng-e.dragMoveLocation.lng,lat:t.lngLat.lat-e.dragMoveLocation.lat};e.selectedCoordPaths.length>0?this.dragVertex(e,t,o):this.dragFeature(e,t,o),e.dragMoveLocation=t.lngLat},$e.onClick=function(e,t){return ve(t)?this.clickNoTarget(e,t):me(t)?this.clickActiveFeature(e,t):Ee(t)?this.clickInactive(e,t):void this.stopDragging(e)},$e.onTap=function(e,t){return ve(t)?this.clickNoTarget(e,t):me(t)?this.clickActiveFeature(e,t):Ee(t)?this.clickInactive(e,t):void 0},$e.onTouchEnd=$e.onMouseUp=function(e){e.dragMoving&&this.fireUpdate(),this.stopDragging(e)};const Ye=$e,Xe={onSetup:function(){const e=this.newFeature({type:l.FEATURE,properties:{},geometry:{type:l.POINT,coordinates:[]}});return this.addFeature(e),this.clearSelectedFeatures(),this.updateUIClasses({mouse:c.ADD}),this.activateUIButton(u.POINT),this.setActionableState({trash:!0}),{point:e}},stopDrawingAndRemove:function(e){this.deleteFeature([e.point.id],{silent:!0}),this.changeMode(d.SIMPLE_SELECT)}};Xe.onTap=Xe.onClick=function(e,t){this.updateUIClasses({mouse:c.MOVE}),e.point.updateCoordinate("",t.lngLat.lng,t.lngLat.lat),this.fire(p.CREATE,{features:[e.point.toGeoJSON()]}),this.changeMode(d.SIMPLE_SELECT,{featureIds:[e.point.id]})},Xe.onStop=function(e){this.activateUIButton(),e.point.getCoordinate().length||this.deleteFeature([e.point.id],{silent:!0})},Xe.toDisplayFeatures=function(e,t,o){const n=t.properties.id===e.point.id;if(t.properties.active=n?g.ACTIVE:g.INACTIVE,!n)return o(t)},Xe.onTrash=Xe.stopDrawingAndRemove,Xe.onKeyUp=function(e,t){if(Ie(t)||_e(t))return this.stopDrawingAndRemove(e,t)};const qe=Xe,He=function(e,t){return!!e.lngLat&&e.lngLat.lng===t[0]&&e.lngLat.lat===t[1]},Ze={onSetup:function(){const e=this.newFeature({type:l.FEATURE,properties:{},geometry:{type:l.POLYGON,coordinates:[[]]}});return this.addFeature(e),this.clearSelectedFeatures(),Pe.disable(this),this.updateUIClasses({mouse:c.ADD}),this.activateUIButton(u.POLYGON),this.setActionableState({trash:!0}),{polygon:e,currentVertexPosition:0}},clickAnywhere:function(e,t){if(e.currentVertexPosition>0&&He(t,e.polygon.coordinates[0][e.currentVertexPosition-1]))return this.changeMode(d.SIMPLE_SELECT,{featureIds:[e.polygon.id]});this.updateUIClasses({mouse:c.ADD}),e.polygon.updateCoordinate(`0.${e.currentVertexPosition}`,t.lngLat.lng,t.lngLat.lat),e.currentVertexPosition++,e.polygon.updateCoordinate(`0.${e.currentVertexPosition}`,t.lngLat.lng,t.lngLat.lat)},clickOnVertex:function(e){return this.changeMode(d.SIMPLE_SELECT,{featureIds:[e.polygon.id]})},onMouseMove:function(e,t){e.polygon.updateCoordinate(`0.${e.currentVertexPosition}`,t.lngLat.lng,t.lngLat.lat),Te(t)&&this.updateUIClasses({mouse:c.POINTER})}};Ze.onTap=Ze.onClick=function(e,t){return Te(t)?this.clickOnVertex(e,t):this.clickAnywhere(e,t)},Ze.onKeyUp=function(e,t){Ie(t)?(this.deleteFeature([e.polygon.id],{silent:!0}),this.changeMode(d.SIMPLE_SELECT)):_e(t)&&this.changeMode(d.SIMPLE_SELECT,{featureIds:[e.polygon.id]})},Ze.onStop=function(e){this.updateUIClasses({mouse:c.NONE}),Pe.enable(this),this.activateUIButton(),void 0!==this.getFeature(e.polygon.id)&&(e.polygon.removeCoordinate(`0.${e.currentVertexPosition}`),e.polygon.isValid()?this.fire(p.CREATE,{features:[e.polygon.toGeoJSON()]}):(this.deleteFeature([e.polygon.id],{silent:!0}),this.changeMode(d.SIMPLE_SELECT,{},{silent:!0})))},Ze.toDisplayFeatures=function(e,t,o){const n=t.properties.id===e.polygon.id;if(t.properties.active=n?g.ACTIVE:g.INACTIVE,!n)return o(t);if(0===t.geometry.coordinates.length)return;const r=t.geometry.coordinates[0].length;if(!(r<3)){if(t.properties.meta=f.FEATURE,o(Le(e.polygon.id,t.geometry.coordinates[0][0],"0.0",!1)),r>3){const n=t.geometry.coordinates[0].length-3;o(Le(e.polygon.id,t.geometry.coordinates[0][n],`0.${n}`,!1))}if(r<=4){const e=[[t.geometry.coordinates[0][0][0],t.geometry.coordinates[0][0][1]],[t.geometry.coordinates[0][1][0],t.geometry.coordinates[0][1][1]]];if(o({type:l.FEATURE,properties:t.properties,geometry:{coordinates:e,type:l.LINE_STRING}}),3===r)return}return o(t)}},Ze.onTrash=function(e){this.deleteFeature([e.polygon.id],{silent:!0}),this.changeMode(d.SIMPLE_SELECT)};const We=Ze,Ke={onSetup:function(e){const t=(e=e||{}).featureId;let o,n,r="forward";if(t){if(o=this.getFeature(t),!o)throw new Error("Could not find a feature with the provided featureId");let i=e.from;if(i&&"Feature"===i.type&&i.geometry&&"Point"===i.geometry.type&&(i=i.geometry),i&&"Point"===i.type&&i.coordinates&&2===i.coordinates.length&&(i=i.coordinates),!i||!Array.isArray(i))throw new Error("Please use the `from` property to indicate which point to continue the line from");const s=o.coordinates.length-1;if(o.coordinates[s][0]===i[0]&&o.coordinates[s][1]===i[1])n=s+1,o.addCoordinate(n,...o.coordinates[s]);else{if(o.coordinates[0][0]!==i[0]||o.coordinates[0][1]!==i[1])throw new Error("`from` should match the point at either the start or the end of the provided LineString");r="backwards",n=0,o.addCoordinate(n,...o.coordinates[0])}}else o=this.newFeature({type:l.FEATURE,properties:{},geometry:{type:l.LINE_STRING,coordinates:[]}}),n=0,this.addFeature(o);return this.clearSelectedFeatures(),Pe.disable(this),this.updateUIClasses({mouse:c.ADD}),this.activateUIButton(u.LINE),this.setActionableState({trash:!0}),{line:o,currentVertexPosition:n,direction:r}},clickAnywhere:function(e,t){if(e.currentVertexPosition>0&&He(t,e.line.coordinates[e.currentVertexPosition-1])||"backwards"===e.direction&&He(t,e.line.coordinates[e.currentVertexPosition+1]))return this.changeMode(d.SIMPLE_SELECT,{featureIds:[e.line.id]});this.updateUIClasses({mouse:c.ADD}),e.line.updateCoordinate(e.currentVertexPosition,t.lngLat.lng,t.lngLat.lat),"forward"===e.direction?(e.currentVertexPosition++,e.line.updateCoordinate(e.currentVertexPosition,t.lngLat.lng,t.lngLat.lat)):e.line.addCoordinate(0,t.lngLat.lng,t.lngLat.lat)},clickOnVertex:function(e){return this.changeMode(d.SIMPLE_SELECT,{featureIds:[e.line.id]})},onMouseMove:function(e,t){e.line.updateCoordinate(e.currentVertexPosition,t.lngLat.lng,t.lngLat.lat),Te(t)&&this.updateUIClasses({mouse:c.POINTER})}};Ke.onTap=Ke.onClick=function(e,t){if(Te(t))return this.clickOnVertex(e,t);this.clickAnywhere(e,t)},Ke.onKeyUp=function(e,t){_e(t)?this.changeMode(d.SIMPLE_SELECT,{featureIds:[e.line.id]}):Ie(t)&&(this.deleteFeature([e.line.id],{silent:!0}),this.changeMode(d.SIMPLE_SELECT))},Ke.onStop=function(e){Pe.enable(this),this.activateUIButton(),void 0!==this.getFeature(e.line.id)&&(e.line.removeCoordinate(`${e.currentVertexPosition}`),e.line.isValid()?this.fire(p.CREATE,{features:[e.line.toGeoJSON()]}):(this.deleteFeature([e.line.id],{silent:!0}),this.changeMode(d.SIMPLE_SELECT,{},{silent:!0})))},Ke.onTrash=function(e){this.deleteFeature([e.line.id],{silent:!0}),this.changeMode(d.SIMPLE_SELECT)},Ke.toDisplayFeatures=function(e,t,o){const n=t.properties.id===e.line.id;if(t.properties.active=n?g.ACTIVE:g.INACTIVE,!n)return o(t);t.geometry.coordinates.length<2||(t.properties.meta=f.FEATURE,o(Le(e.line.id,t.geometry.coordinates["forward"===e.direction?t.geometry.coordinates.length-2:1],""+("forward"===e.direction?t.geometry.coordinates.length-2:1),!1)),o(t))};const ze={simple_select:Be,direct_select:Ye,draw_point:qe,draw_polygon:We,draw_line_string:Ke},Qe={defaultMode:d.SIMPLE_SELECT,keybindings:!0,touchEnabled:!0,clickBuffer:2,touchBuffer:25,boxSelect:!0,displayControlsDefault:!0,styles:fe,modes:ze,controls:{},userProperties:!1,suppressAPIEvents:!0},et={point:!0,line_string:!0,polygon:!0,trash:!0,combine_features:!0,uncombine_features:!0},tt={point:!1,line_string:!1,polygon:!1,trash:!1,combine_features:!1,uncombine_features:!1};function ot(e,t){return e.map((e=>e.source?e:Object.assign({},e,{id:`${e.id}.${t}`,source:"hot"===t?a.HOT:a.COLD})))}var nt=o(17),rt=o(186);function it(e,t){return e.length===t.length&&JSON.stringify(e.map((e=>e)).sort())===JSON.stringify(t.map((e=>e)).sort())}const st={Polygon:W,LineString:H,Point:X,MultiPolygon:ee,MultiLineString:ee,MultiPoint:ee};function at(e){!function(e,t){const o={options:e=function(e={}){let t=Object.assign({},e);return e.controls||(t.controls={}),!1===e.displayControlsDefault?t.controls=Object.assign({},tt,e.controls):t.controls=Object.assign({},et,e.controls),t=Object.assign({},Qe,t),t.styles=ot(t.styles,"cold").concat(ot(t.styles,"hot")),t}(e)};t=function(e,t){t.modes=d;const o=void 0===e.options.suppressAPIEvents||!!e.options.suppressAPIEvents;return t.getFeatureIdsAt=function(t){return N.click({point:t},null,e).map((e=>e.properties.id))},t.getSelectedIds=function(){return e.store.getSelectedIds()},t.getSelected=function(){return{type:l.FEATURE_COLLECTION,features:e.store.getSelectedIds().map((t=>e.store.get(t))).map((e=>e.toGeoJSON()))}},t.getSelectedPoints=function(){return{type:l.FEATURE_COLLECTION,features:e.store.getSelectedCoordinates().map((e=>({type:l.FEATURE,properties:{},geometry:{type:l.POINT,coordinates:e.coordinates}})))}},t.set=function(o){if(void 0===o.type||o.type!==l.FEATURE_COLLECTION||!Array.isArray(o.features))throw new Error("Invalid FeatureCollection");const n=e.store.createRenderBatch();let r=e.store.getAllIds().slice();const i=t.add(o),s=new L(i);return r=r.filter((e=>!s.has(e))),r.length&&t.delete(r),n(),i},t.add=function(t){const n=JSON.parse(JSON.stringify(rt(t))).features.map((t=>{if(t.id=t.id||j(),null===t.geometry)throw new Error("Invalid geometry: null");if(void 0===e.store.get(t.id)||e.store.get(t.id).type!==t.geometry.type){const n=st[t.geometry.type];if(void 0===n)throw new Error(`Invalid geometry type: ${t.geometry.type}.`);const r=new n(e,t);e.store.add(r,{silent:o})}else{const n=e.store.get(t.id),r=n.properties;n.properties=t.properties,nt(r,t.properties)||e.store.featureChanged(n.id,{silent:o}),nt(n.getCoordinates(),t.geometry.coordinates)||n.incomingCoords(t.geometry.coordinates)}return t.id}));return e.store.render(),n},t.get=function(t){const o=e.store.get(t);if(o)return o.toGeoJSON()},t.getAll=function(){return{type:l.FEATURE_COLLECTION,features:e.store.getAll().map((e=>e.toGeoJSON()))}},t.delete=function(n){return e.store.delete(n,{silent:o}),t.getMode()!==d.DIRECT_SELECT||e.store.getSelectedIds().length?e.store.render():e.events.changeMode(d.SIMPLE_SELECT,void 0,{silent:o}),t},t.deleteAll=function(){return e.store.delete(e.store.getAllIds(),{silent:o}),t.getMode()===d.DIRECT_SELECT?e.events.changeMode(d.SIMPLE_SELECT,void 0,{silent:o}):e.store.render(),t},t.changeMode=function(n,r={}){return n===d.SIMPLE_SELECT&&t.getMode()===d.SIMPLE_SELECT?(it(r.featureIds||[],e.store.getSelectedIds())||(e.store.setSelected(r.featureIds,{silent:o}),e.store.render()),t):(n===d.DIRECT_SELECT&&t.getMode()===d.DIRECT_SELECT&&r.featureId===e.store.getSelectedIds()[0]||e.events.changeMode(n,r,{silent:o}),t)},t.getMode=function(){return e.events.getMode()},t.trash=function(){return e.events.trash({silent:o}),t},t.combineFeatures=function(){return e.events.combineFeatures({silent:o}),t},t.uncombineFeatures=function(){return e.events.uncombineFeatures({silent:o}),t},t.setFeatureProperty=function(n,r,i){return e.store.setFeatureProperty(n,r,i,{silent:o}),t},t}(o,t),o.api=t;const n=le(o);t.onAdd=n.onAdd,t.onRemove=n.onRemove,t.types=u,t.options=e}(e,this)}at.modes=ze,at.constants=e,at.lib=n;const ct=at;function ut(e){if(Array.isArray(e))return e;if("Feature"===e.type){if(null!==e.geometry)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function lt(e){var t=ut(e);if(2===t.length&&!dt(t[0],t[1]))return t;var o=[],n=t.length-1,r=o.length;o.push(t[0]);for(var i=1;i<n;i++){var s=o[o.length-1];t[i][0]===s[0]&&t[i][1]===s[1]||(o.push(t[i]),(r=o.length)>2&&pt(o[r-3],o[r-1],o[r-2])&&o.splice(o.length-2,1))}if(o.push(t[t.length-1]),r=o.length,dt(t[0],t[t.length-1])&&r<4)throw new Error("invalid polygon");return pt(o[r-3],o[r-1],o[r-2])&&o.splice(o.length-2,1),o}function dt(e,t){return e[0]===t[0]&&e[1]===t[1]}function pt(e,t,o){var n=o[0],r=o[1],i=e[0],s=e[1],a=t[0],c=t[1],u=a-i,l=c-s;return 0===(n-i)*l-(r-s)*u&&(Math.abs(u)>=Math.abs(l)?u>0?i<=n&&n<=a:a<=n&&n<=i:l>0?s<=r&&r<=c:c<=r&&r<=s)}function ht(e){var t={type:"Feature"};return Object.keys(e).forEach((function(o){switch(o){case"type":case"properties":case"geometry":return;default:t[o]=e[o]}})),t.properties=ft(e.properties),t.geometry=gt(e.geometry),t}function ft(e){var t={};return e?(Object.keys(e).forEach((function(o){var n=e[o];"object"==typeof n?null===n?t[o]=null:Array.isArray(n)?t[o]=n.map((function(e){return e})):t[o]=ft(n):t[o]=n})),t):t}function gt(e){var t={type:e.type};return e.bbox&&(t.bbox=e.bbox),"GeometryCollection"===e.type?(t.geometries=e.geometries.map((function(e){return gt(e)})),t):(t.coordinates=yt(e.coordinates),t)}function yt(e){var t=e;return"object"!=typeof t[0]?t.slice():t.map((function(e){return yt(e)}))}function mt(e,t,o){var n=t.x,r=t.y,i=o.x-n,s=o.y-r;if(0!==i||0!==s){var a=((e.x-n)*i+(e.y-r)*s)/(i*i+s*s);a>1?(n=o.x,r=o.y):a>0&&(n+=i*a,r+=s*a)}return(i=e.x-n)*i+(s=e.y-r)*s}function Et(e,t,o,n,r){for(var i,s=n,a=t+1;a<o;a++){var c=mt(e[a],e[t],e[o]);c>s&&(i=a,s=c)}s>n&&(i-t>1&&Et(e,t,i,n,r),r.push(e[i]),o-i>1&&Et(e,i,o,n,r))}function vt(e,t){var o=e.length-1,n=[e[0]];return Et(e,0,o,t,n),n.push(e[o]),n}function Ct(e,t,o){if(e.length<=2)return e;var n=void 0!==t?t*t:1;return e=o?e:function(e,t){for(var o,n,r,i,s,a=e[0],c=[a],u=1,l=e.length;u<l;u++)r=a,void 0,void 0,(i=(n=o=e[u]).x-r.x)*i+(s=n.y-r.y)*s>t&&(c.push(o),a=o);return a!==o&&c.push(o),c}(e,n),vt(e,n)}function Tt(e,t,o){return Ct(e.map((function(e){return{x:e[0],y:e[1],z:e[2]}})),t,o).map((function(e){return e.z?[e.x,e.y,e.z]:[e.x,e.y]}))}function St(e,t,o){return e.map((function(e){var n=e.map((function(e){return{x:e[0],y:e[1]}}));if(n.length<4)throw new Error("invalid polygon");for(var r=Ct(n,t,o).map((function(e){return[e.x,e.y]}));!It(r);)r=Ct(n,t-=.01*t,o).map((function(e){return[e.x,e.y]}));return r[r.length-1][0]===r[0][0]&&r[r.length-1][1]===r[0][1]||r.push(r[0]),r}))}function It(e){return!(e.length<3||3===e.length&&e[2][0]===e[0][0]&&e[2][1]===e[0][1])}const _t=function(e,t){if(!(o=t=t||{})||o.constructor!==Object)throw new Error("options is invalid");var o,n=void 0!==t.tolerance?t.tolerance:1,r=t.highQuality||!1,i=t.mutate||!1;if(!e)throw new Error("geojson is required");if(n&&n<0)throw new Error("invalid tolerance");return!0!==i&&(e=function(e){if(!e)throw new Error("geojson is required");switch(e.type){case"Feature":return ht(e);case"FeatureCollection":return function(e){var t={type:"FeatureCollection"};return Object.keys(e).forEach((function(o){switch(o){case"type":case"features":return;default:t[o]=e[o]}})),t.features=e.features.map((function(e){return ht(e)})),t}(e);case"Point":case"LineString":case"Polygon":case"MultiPoint":case"MultiLineString":case"MultiPolygon":case"GeometryCollection":return gt(e);default:throw new Error("unknown GeoJSON type")}}(e)),function(e,t){var o,n,r,i,s,a,c,u,l,d,p=0,h="FeatureCollection"===e.type,f="Feature"===e.type,g=h?e.features.length:1;for(o=0;o<g;o++){for(a=h?e.features[o].geometry:f?e.geometry:e,u=h?e.features[o].properties:f?e.properties:{},l=h?e.features[o].bbox:f?e.bbox:void 0,d=h?e.features[o].id:f?e.id:void 0,s=(c=!!a&&"GeometryCollection"===a.type)?a.geometries.length:1,r=0;r<s;r++)if(null!==(i=c?a.geometries[r]:a))switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===t(i,p,u,l,d))return!1;break;case"GeometryCollection":for(n=0;n<i.geometries.length;n++)if(!1===t(i.geometries[n],p,u,l,d))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===t(null,p,u,l,d))return!1;p++}}(e,(function(e){!function(e,t,o){var n=e.type;if("Point"===n||"MultiPoint"===n)return e;!function(e,t){void 0===t&&(t={});var o="object"==typeof t?t.mutate:t;if(!e)throw new Error("geojson is required");var n=function(e){return"FeatureCollection"===e.type?"FeatureCollection":"GeometryCollection"===e.type?"GeometryCollection":"Feature"===e.type&&null!==e.geometry?e.geometry.type:e.type}(e),r=[];switch(n){case"LineString":r=lt(e);break;case"MultiLineString":case"Polygon":ut(e).forEach((function(e){r.push(lt(e))}));break;case"MultiPolygon":ut(e).forEach((function(e){var t=[];e.forEach((function(e){t.push(lt(e))})),r.push(t)}));break;case"Point":return e;case"MultiPoint":var i={};ut(e).forEach((function(e){var t=e.join("-");Object.prototype.hasOwnProperty.call(i,t)||(r.push(e),i[t]=!0)}));break;default:throw new Error(n+" geometry not supported")}e.coordinates?!0===o&&(e.coordinates=r):!0===o?e.geometry.coordinates=r:function(e,t,o){void 0===o&&(o={});var n={type:"Feature"};(0===o.id||o.id)&&(n.id=o.id),o.bbox&&(n.bbox=o.bbox),n.properties=t||{},n.geometry=e}({type:n,coordinates:r},e.properties,{bbox:e.bbox,id:e.id})}(e,!0);var r=e.coordinates;switch(n){case"LineString":e.coordinates=Tt(r,t,o);break;case"MultiLineString":e.coordinates=r.map((function(e){return Tt(e,t,o)}));break;case"Polygon":e.coordinates=St(r,t,o);break;case"MultiPolygon":e.coordinates=r.map((function(e){return St(e,t,o)}))}}(e,n,r)})),e},{geojsonTypes:Ot,cursors:bt,types:Mt,updateActions:Lt,modes:xt,events:Nt}=ct.constants,Pt=Object.assign({},ct.modes.draw_polygon);Pt.onSetup=function(){const e=this.newFeature({type:Ot.FEATURE,properties:{},geometry:{type:Ot.POLYGON,coordinates:[[]]}});return this.addFeature(e),this.clearSelectedFeatures(),setTimeout((()=>{this.map&&this.map.dragPan&&this.map.dragPan.disable()}),0),this.updateUIClasses({mouse:bt.ADD}),this.activateUIButton(Mt.POLYGON),this.setActionableState({trash:!0}),{polygon:e,currentVertexPosition:0,dragMoving:!1}},Pt.onDrag=Pt.onTouchMove=function(e,t){e.dragMoving=!0,this.updateUIClasses({mouse:bt.ADD}),e.polygon.updateCoordinate(`0.${e.currentVertexPosition}`,t.lngLat.lng,t.lngLat.lat),e.currentVertexPosition++,e.polygon.updateCoordinate(`0.${e.currentVertexPosition}`,t.lngLat.lng,t.lngLat.lat)},Pt.onMouseUp=function(e,t){e.dragMoving&&(this.simplify(e.polygon),this.fireUpdate(),this.changeMode(xt.SIMPLE_SELECT,{featureIds:[e.polygon.id]}))},Pt.onTouchEnd=function(e,t){this.onMouseUp(e,t)},Pt.fireUpdate=function(){this.map.fire(Nt.UPDATE,{action:Lt.MOVE,features:this.getSelected().map((e=>e.toGeoJSON()))})},Pt.simplify=function(e){const t=1/Math.pow(1.05,10*this.map.getZoom());_t(e,{mutate:!0,tolerance:t,highQuality:!0})},Pt.fire=function(){return this.map.fire},Pt.onStop=function(e,...t){ct.modes.draw_polygon.onStop.call(this,e,...t),setTimeout((()=>{this.map&&this.map.dragPan&&this.map.dragPan.enable()}),0)};const At=Pt;mapboxgl.accessToken="pk.eyJ1IjoiYmVuZWhta2UiLCJhIjoiY21hemlta3VlMGxhOTJqcHBkd3I5dXZnaiJ9.NzonVD9l39XPYIkIfyFi9w";var Ft=new mapboxgl.Map({container:document.getElementById("map"),style:"mapbox://styles/mapbox/streets-v11",center:[-94.737236,32.514885],zoom:12}),wt=new MapboxDraw({modes:Object.assign(MapboxDraw.modes,{draw_polygon:At})});Ft.addControl(wt,"top-left"),Ft.on("draw.create",(function(){console.log(arguments,wt.getAll())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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VyxLQUNGN1osS0FBS1gsS0FBUVcsS0FBS1gsSUFBSXFVLFNBQzNCMVQsS0FBS1gsSUFBSXFVLFFBQVF0RyxRQUFRLEdBQzFCLEVBQ1AsRUFFQSxZQ3RGQXdhLFNBQVNDLFlBQWMsNkZBQ3JCLElBQUl4b0IsR0FBTSxJQUFJdW9CLFNBQVNFLElBQUksQ0FDM0J6WixVQUFXb0UsU0FBU3NWLGVBQWUsT0FDbkN2VyxNQUFPLHFDQUNQd1csT0FBUSxFQUFFLFVBQVksV0FDdEJDLEtBQU0sS0FHSkMsR0FBTyxJQUFJQyxXQUFXLENBQ3hCeFosTUFBTzlaLE9BQU9zZCxPQUFPZ1csV0FBV3haLE1BQU8sQ0FDckNnVCxhQUFjLE9BSWxCdGlCLEdBQUkrb0IsV0FBV0YsR0FBTSxZQUNyQjdvQixHQUFJMUYsR0FBRyxlQUNQLFdBQ0kwdUIsUUFBUUMsSUFBSXhqQixVQUFXb2pCLEdBQUtyYixTQUNoQyxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9mYXN0LWRlZXAtZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L2dlb2pzb24tbm9ybWFsaXplL2luZGV4LmpzIiwid2VicGFjazovL21hcGJveC1nbC1kcmF3LWZyZWVoYW5kLW1vZGUvLi9ub2RlX21vZHVsZXMvd2dzODQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L2dlb2pzb24tYXJlYS9pbmRleC5qcyIsIndlYnBhY2s6Ly9tYXBib3gtZ2wtZHJhdy1mcmVlaGFuZC1tb2RlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL21hcGJveC1nbC1kcmF3LWZyZWVoYW5kLW1vZGUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL21hcGJveC1nbC1kcmF3LWZyZWVoYW5kLW1vZGUvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9tYXBib3gtZ2wtZHJhdy1mcmVlaGFuZC1tb2RlL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1kcmF3L3NyYy9saWIvbW9kZV9oYW5kbGVyLmpzIiwid2VicGFjazovL21hcGJveC1nbC1kcmF3LWZyZWVoYW5kLW1vZGUvLi9ub2RlX21vZHVsZXMvQG1hcGJveC9tYXBib3gtZ2wtZHJhdy9zcmMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL21hcGJveC1nbC1kcmF3LWZyZWVoYW5kLW1vZGUvLi9ub2RlX21vZHVsZXMvQG1hcGJveC9tYXBib3gtZ2wtZHJhdy9zcmMvbGliL3NvcnRfZmVhdHVyZXMuanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1kcmF3L3NyYy9saWIvbWFwX2V2ZW50X3RvX2JvdW5kaW5nX2JveC5qcyIsIndlYnBhY2s6Ly9tYXBib3gtZ2wtZHJhdy1mcmVlaGFuZC1tb2RlLy4vbm9kZV9tb2R1bGVzL0BtYXBib3gvbWFwYm94LWdsLWRyYXcvc3JjL2xpYi9zdHJpbmdfc2V0LmpzIiwid2VicGFjazovL21hcGJveC1nbC1kcmF3LWZyZWVoYW5kLW1vZGUvLi9ub2RlX21vZHVsZXMvQG1hcGJveC9tYXBib3gtZ2wtZHJhdy9zcmMvbGliL2ZlYXR1cmVzX2F0LmpzIiwid2VicGFjazovL21hcGJveC1nbC1kcmF3LWZyZWVoYW5kLW1vZGUvLi9ub2RlX21vZHVsZXMvQG1hcGJveC9tYXBib3gtZ2wtZHJhdy9zcmMvbGliL2dldF9mZWF0dXJlc19hbmRfc2V0X2N1cnNvci5qcyIsIndlYnBhY2s6Ly9tYXBib3gtZ2wtZHJhdy1mcmVlaGFuZC1tb2RlLy4vbm9kZV9tb2R1bGVzL0BtYXBib3gvbWFwYm94LWdsLWRyYXcvc3JjL2xpYi9ldWNsaWRlYW5fZGlzdGFuY2UuanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1kcmF3L3NyYy9saWIvaXNfY2xpY2suanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1kcmF3L3NyYy9saWIvaXNfdGFwLmpzIiwid2VicGFjazovL21hcGJveC1nbC1kcmF3LWZyZWVoYW5kLW1vZGUvLi9ub2RlX21vZHVsZXMvQG1hcGJveC9tYXBib3gtZ2wtZHJhdy9zcmMvbGliL2lkLmpzIiwid2VicGFjazovL21hcGJveC1nbC1kcmF3LWZyZWVoYW5kLW1vZGUvLi9ub2RlX21vZHVsZXMvbmFub2lkL25vbi1zZWN1cmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1kcmF3L3NyYy9mZWF0dXJlX3R5cGVzL2ZlYXR1cmUuanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1kcmF3L3NyYy9mZWF0dXJlX3R5cGVzL3BvaW50LmpzIiwid2VicGFjazovL21hcGJveC1nbC1kcmF3LWZyZWVoYW5kLW1vZGUvLi9ub2RlX21vZHVsZXMvQG1hcGJveC9tYXBib3gtZ2wtZHJhdy9zcmMvZmVhdHVyZV90eXBlcy9saW5lX3N0cmluZy5qcyIsIndlYnBhY2s6Ly9tYXBib3gtZ2wtZHJhdy1mcmVlaGFuZC1tb2RlLy4vbm9kZV9tb2R1bGVzL0BtYXBib3gvbWFwYm94LWdsLWRyYXcvc3JjL2ZlYXR1cmVfdHlwZXMvcG9seWdvbi5qcyIsIndlYnBhY2s6Ly9tYXBib3gtZ2wtZHJhdy1mcmVlaGFuZC1tb2RlLy4vbm9kZV9tb2R1bGVzL0BtYXBib3gvbWFwYm94LWdsLWRyYXcvc3JjL2ZlYXR1cmVfdHlwZXMvbXVsdGlfZmVhdHVyZS5qcyIsIndlYnBhY2s6Ly9tYXBib3gtZ2wtZHJhdy1mcmVlaGFuZC1tb2RlLy4vbm9kZV9tb2R1bGVzL0BtYXBib3gvbWFwYm94LWdsLWRyYXcvc3JjL21vZGVzL21vZGVfaW50ZXJmYWNlX2FjY2Vzc29ycy5qcyIsIndlYnBhY2s6Ly9tYXBib3gtZ2wtZHJhdy1mcmVlaGFuZC1tb2RlLy4vbm9kZV9tb2R1bGVzL0BtYXBib3gvbWFwYm94LWdsLWRyYXcvc3JjL21vZGVzL21vZGVfaW50ZXJmYWNlLmpzIiwid2VicGFjazovL21hcGJveC1nbC1kcmF3LWZyZWVoYW5kLW1vZGUvLi9ub2RlX21vZHVsZXMvQG1hcGJveC9tYXBib3gtZ2wtZHJhdy9zcmMvbW9kZXMvb2JqZWN0X3RvX21vZGUuanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1kcmF3L3NyYy9saWIvdG9fZGVuc2VfYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1kcmF3L3NyYy9yZW5kZXIuanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1kcmF3L3NyYy9zdG9yZS5qcyIsIndlYnBhY2s6Ly9tYXBib3gtZ2wtZHJhdy1mcmVlaGFuZC1tb2RlLy4vbm9kZV9tb2R1bGVzL0BtYXBib3gvbWFwYm94LWdsLWRyYXcvc3JjL3VpLmpzIiwid2VicGFjazovL21hcGJveC1nbC1kcmF3LWZyZWVoYW5kLW1vZGUvLi9ub2RlX21vZHVsZXMvQG1hcGJveC9tYXBib3gtZ2wtZHJhdy9zcmMvc2V0dXAuanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1kcmF3L3NyYy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1kcmF3L3NyYy9saWIvdGhlbWUuanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1kcmF3L3NyYy9saWIvY29tbW9uX3NlbGVjdG9ycy5qcyIsIndlYnBhY2s6Ly9tYXBib3gtZ2wtZHJhdy1mcmVlaGFuZC1tb2RlLy4vbm9kZV9tb2R1bGVzL0BtYXBib3gvcG9pbnQtZ2VvbWV0cnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1kcmF3L3NyYy9saWIvbW91c2VfZXZlbnRfcG9pbnQuanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1kcmF3L3NyYy9saWIvY3JlYXRlX3ZlcnRleC5qcyIsIndlYnBhY2s6Ly9tYXBib3gtZ2wtZHJhdy1mcmVlaGFuZC1tb2RlLy4vbm9kZV9tb2R1bGVzL0BtYXBib3gvbWFwYm94LWdsLWRyYXcvc3JjL2xpYi9jcmVhdGVfbWlkcG9pbnQuanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1kcmF3L3NyYy9saWIvY3JlYXRlX3N1cHBsZW1lbnRhcnlfcG9pbnRzLmpzIiwid2VicGFjazovL21hcGJveC1nbC1kcmF3LWZyZWVoYW5kLW1vZGUvLi9ub2RlX21vZHVsZXMvQG1hcGJveC9tYXBib3gtZ2wtZHJhdy9zcmMvbGliL2RvdWJsZV9jbGlja196b29tLmpzIiwid2VicGFjazovL21hcGJveC1nbC1kcmF3LWZyZWVoYW5kLW1vZGUvLi9ub2RlX21vZHVsZXMvQG1hcGJveC9tYXBib3gtZ2wtZHJhdy9zcmMvbGliL2NvbnN0cmFpbl9mZWF0dXJlX21vdmVtZW50LmpzIiwid2VicGFjazovL21hcGJveC1nbC1kcmF3LWZyZWVoYW5kLW1vZGUvLi9ub2RlX21vZHVsZXMvQG1hcGJveC9tYXBib3gtZ2wtZHJhdy9zcmMvbGliL21vdmVfZmVhdHVyZXMuanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1kcmF3L3NyYy9tb2Rlcy9zaW1wbGVfc2VsZWN0LmpzIiwid2VicGFjazovL21hcGJveC1nbC1kcmF3LWZyZWVoYW5kLW1vZGUvLi9ub2RlX21vZHVsZXMvQG1hcGJveC9tYXBib3gtZ2wtZHJhdy9zcmMvbW9kZXMvZGlyZWN0X3NlbGVjdC5qcyIsIndlYnBhY2s6Ly9tYXBib3gtZ2wtZHJhdy1mcmVlaGFuZC1tb2RlLy4vbm9kZV9tb2R1bGVzL0BtYXBib3gvbWFwYm94LWdsLWRyYXcvc3JjL21vZGVzL2RyYXdfcG9pbnQuanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1kcmF3L3NyYy9saWIvaXNfZXZlbnRfYXRfY29vcmRpbmF0ZXMuanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1kcmF3L3NyYy9tb2Rlcy9kcmF3X3BvbHlnb24uanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1kcmF3L3NyYy9tb2Rlcy9kcmF3X2xpbmVfc3RyaW5nLmpzIiwid2VicGFjazovL21hcGJveC1nbC1kcmF3LWZyZWVoYW5kLW1vZGUvLi9ub2RlX21vZHVsZXMvQG1hcGJveC9tYXBib3gtZ2wtZHJhdy9zcmMvbW9kZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1kcmF3L3NyYy9vcHRpb25zLmpzIiwid2VicGFjazovL21hcGJveC1nbC1kcmF3LWZyZWVoYW5kLW1vZGUvLi9ub2RlX21vZHVsZXMvQG1hcGJveC9tYXBib3gtZ2wtZHJhdy9zcmMvbGliL3N0cmluZ19zZXRzX2FyZV9lcXVhbC5qcyIsIndlYnBhY2s6Ly9tYXBib3gtZ2wtZHJhdy1mcmVlaGFuZC1tb2RlLy4vbm9kZV9tb2R1bGVzL0BtYXBib3gvbWFwYm94LWdsLWRyYXcvc3JjL2FwaS5qcyIsIndlYnBhY2s6Ly9tYXBib3gtZ2wtZHJhdy1mcmVlaGFuZC1tb2RlLy4vbm9kZV9tb2R1bGVzL0BtYXBib3gvbWFwYm94LWdsLWRyYXcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AdHVyZi9pbnZhcmlhbnQvZGlzdC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9tYXBib3gtZ2wtZHJhdy1mcmVlaGFuZC1tb2RlLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2NsZWFuLWNvb3Jkcy9kaXN0L2VzL2luZGV4LmpzIiwid2VicGFjazovL21hcGJveC1nbC1kcmF3LWZyZWVoYW5kLW1vZGUvLi9ub2RlX21vZHVsZXMvQHR1cmYvY2xvbmUvZGlzdC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9tYXBib3gtZ2wtZHJhdy1mcmVlaGFuZC1tb2RlLy4vbm9kZV9tb2R1bGVzL0B0dXJmL3NpbXBsaWZ5L2Rpc3QvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AdHVyZi9oZWxwZXJzL2Rpc3QvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL25vZGVfbW9kdWxlcy9AdHVyZi9tZXRhL2Rpc3QvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWFwYm94LWdsLWRyYXctZnJlZWhhbmQtbW9kZS8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9tYXBib3gtZ2wtZHJhdy1mcmVlaGFuZC1tb2RlLy4vZG9jcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIGRvIG5vdCBlZGl0IC5qcyBmaWxlcyBkaXJlY3RseSAtIGVkaXQgc3JjL2luZGV4LmpzdFxuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSAmJiBiICYmIHR5cGVvZiBhID09ICdvYmplY3QnICYmIHR5cGVvZiBiID09ICdvYmplY3QnKSB7XG4gICAgaWYgKGEuY29uc3RydWN0b3IgIT09IGIuY29uc3RydWN0b3IpIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBsZW5ndGgsIGksIGtleXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCAhPSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KVxuICAgICAgICBpZiAoIWVxdWFsKGFbaV0sIGJbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cblxuXG4gICAgaWYgKGEuY29uc3RydWN0b3IgPT09IFJlZ0V4cCkgcmV0dXJuIGEuc291cmNlID09PSBiLnNvdXJjZSAmJiBhLmZsYWdzID09PSBiLmZsYWdzO1xuICAgIGlmIChhLnZhbHVlT2YgIT09IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZikgcmV0dXJuIGEudmFsdWVPZigpID09PSBiLnZhbHVlT2YoKTtcbiAgICBpZiAoYS50b1N0cmluZyAhPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZykgcmV0dXJuIGEudG9TdHJpbmcoKSA9PT0gYi50b1N0cmluZygpO1xuXG4gICAga2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggIT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KVxuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwga2V5c1tpXSkpIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghZXF1YWwoYVtrZXldLCBiW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyB0cnVlIGlmIGJvdGggTmFOLCBmYWxzZSBvdGhlcndpc2VcbiAgcmV0dXJuIGEhPT1hICYmIGIhPT1iO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gbm9ybWFsaXplO1xuXG52YXIgdHlwZXMgPSB7XG4gICAgUG9pbnQ6ICdnZW9tZXRyeScsXG4gICAgTXVsdGlQb2ludDogJ2dlb21ldHJ5JyxcbiAgICBMaW5lU3RyaW5nOiAnZ2VvbWV0cnknLFxuICAgIE11bHRpTGluZVN0cmluZzogJ2dlb21ldHJ5JyxcbiAgICBQb2x5Z29uOiAnZ2VvbWV0cnknLFxuICAgIE11bHRpUG9seWdvbjogJ2dlb21ldHJ5JyxcbiAgICBHZW9tZXRyeUNvbGxlY3Rpb246ICdnZW9tZXRyeScsXG4gICAgRmVhdHVyZTogJ2ZlYXR1cmUnLFxuICAgIEZlYXR1cmVDb2xsZWN0aW9uOiAnZmVhdHVyZWNvbGxlY3Rpb24nXG59O1xuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIEdlb0pTT04gZmVhdHVyZSBpbnRvIGEgRmVhdHVyZUNvbGxlY3Rpb24uXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGdqIGdlb2pzb24gZGF0YVxuICogQHJldHVybnMge29iamVjdH0gbm9ybWFsaXplZCBnZW9qc29uIGRhdGFcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplKGdqKSB7XG4gICAgaWYgKCFnaiB8fCAhZ2oudHlwZSkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHR5cGUgPSB0eXBlc1tnai50eXBlXTtcbiAgICBpZiAoIXR5cGUpIHJldHVybiBudWxsO1xuXG4gICAgaWYgKHR5cGUgPT09ICdnZW9tZXRyeScpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdGZWF0dXJlQ29sbGVjdGlvbicsXG4gICAgICAgICAgICBmZWF0dXJlczogW3tcbiAgICAgICAgICAgICAgICB0eXBlOiAnRmVhdHVyZScsXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgICAgICAgICAgZ2VvbWV0cnk6IGdqXG4gICAgICAgICAgICB9XVxuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2ZlYXR1cmUnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnRmVhdHVyZUNvbGxlY3Rpb24nLFxuICAgICAgICAgICAgZmVhdHVyZXM6IFtnal1cbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdmZWF0dXJlY29sbGVjdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGdqO1xuICAgIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzLlJBRElVUyA9IDYzNzgxMzc7XG5tb2R1bGUuZXhwb3J0cy5GTEFUVEVOSU5HID0gMS8yOTguMjU3MjIzNTYzO1xubW9kdWxlLmV4cG9ydHMuUE9MQVJfUkFESVVTID0gNjM1Njc1Mi4zMTQyO1xuIiwidmFyIHdnczg0ID0gcmVxdWlyZSgnd2dzODQnKTtcblxubW9kdWxlLmV4cG9ydHMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcbm1vZHVsZS5leHBvcnRzLnJpbmcgPSByaW5nQXJlYTtcblxuZnVuY3Rpb24gZ2VvbWV0cnkoXykge1xuICAgIHZhciBhcmVhID0gMCwgaTtcbiAgICBzd2l0Y2ggKF8udHlwZSkge1xuICAgICAgICBjYXNlICdQb2x5Z29uJzpcbiAgICAgICAgICAgIHJldHVybiBwb2x5Z29uQXJlYShfLmNvb3JkaW5hdGVzKTtcbiAgICAgICAgY2FzZSAnTXVsdGlQb2x5Z29uJzpcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBfLmNvb3JkaW5hdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJlYSArPSBwb2x5Z29uQXJlYShfLmNvb3JkaW5hdGVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhcmVhO1xuICAgICAgICBjYXNlICdQb2ludCc6XG4gICAgICAgIGNhc2UgJ011bHRpUG9pbnQnOlxuICAgICAgICBjYXNlICdMaW5lU3RyaW5nJzpcbiAgICAgICAgY2FzZSAnTXVsdGlMaW5lU3RyaW5nJzpcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICBjYXNlICdHZW9tZXRyeUNvbGxlY3Rpb24nOlxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IF8uZ2VvbWV0cmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGFyZWEgKz0gZ2VvbWV0cnkoXy5nZW9tZXRyaWVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhcmVhO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcG9seWdvbkFyZWEoY29vcmRzKSB7XG4gICAgdmFyIGFyZWEgPSAwO1xuICAgIGlmIChjb29yZHMgJiYgY29vcmRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYXJlYSArPSBNYXRoLmFicyhyaW5nQXJlYShjb29yZHNbMF0pKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBjb29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZWEgLT0gTWF0aC5hYnMocmluZ0FyZWEoY29vcmRzW2ldKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFyZWE7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBhcHByb3hpbWF0ZSBhcmVhIG9mIHRoZSBwb2x5Z29uIHdlcmUgaXQgcHJvamVjdGVkIG9udG9cbiAqICAgICB0aGUgZWFydGguICBOb3RlIHRoYXQgdGhpcyBhcmVhIHdpbGwgYmUgcG9zaXRpdmUgaWYgcmluZyBpcyBvcmllbnRlZFxuICogICAgIGNsb2Nrd2lzZSwgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgbmVnYXRpdmUuXG4gKlxuICogUmVmZXJlbmNlOlxuICogUm9iZXJ0LiBHLiBDaGFtYmVybGFpbiBhbmQgV2lsbGlhbSBILiBEdXF1ZXR0ZSwgXCJTb21lIEFsZ29yaXRobXMgZm9yXG4gKiAgICAgUG9seWdvbnMgb24gYSBTcGhlcmVcIiwgSlBMIFB1YmxpY2F0aW9uIDA3LTAzLCBKZXQgUHJvcHVsc2lvblxuICogICAgIExhYm9yYXRvcnksIFBhc2FkZW5hLCBDQSwgSnVuZSAyMDA3IGh0dHA6Ly90cnMtbmV3LmpwbC5uYXNhLmdvdi9kc3BhY2UvaGFuZGxlLzIwMTQvNDA0MDlcbiAqXG4gKiBSZXR1cm5zOlxuICoge2Zsb2F0fSBUaGUgYXBwcm94aW1hdGUgc2lnbmVkIGdlb2Rlc2ljIGFyZWEgb2YgdGhlIHBvbHlnb24gaW4gc3F1YXJlXG4gKiAgICAgbWV0ZXJzLlxuICovXG5cbmZ1bmN0aW9uIHJpbmdBcmVhKGNvb3Jkcykge1xuICAgIHZhciBwMSwgcDIsIHAzLCBsb3dlckluZGV4LCBtaWRkbGVJbmRleCwgdXBwZXJJbmRleCwgaSxcbiAgICBhcmVhID0gMCxcbiAgICBjb29yZHNMZW5ndGggPSBjb29yZHMubGVuZ3RoO1xuXG4gICAgaWYgKGNvb3Jkc0xlbmd0aCA+IDIpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvb3Jkc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaSA9PT0gY29vcmRzTGVuZ3RoIC0gMikgey8vIGkgPSBOLTJcbiAgICAgICAgICAgICAgICBsb3dlckluZGV4ID0gY29vcmRzTGVuZ3RoIC0gMjtcbiAgICAgICAgICAgICAgICBtaWRkbGVJbmRleCA9IGNvb3Jkc0xlbmd0aCAtMTtcbiAgICAgICAgICAgICAgICB1cHBlckluZGV4ID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gY29vcmRzTGVuZ3RoIC0gMSkgey8vIGkgPSBOLTFcbiAgICAgICAgICAgICAgICBsb3dlckluZGV4ID0gY29vcmRzTGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICBtaWRkbGVJbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgdXBwZXJJbmRleCA9IDE7XG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBpID0gMCB0byBOLTNcbiAgICAgICAgICAgICAgICBsb3dlckluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBtaWRkbGVJbmRleCA9IGkrMTtcbiAgICAgICAgICAgICAgICB1cHBlckluZGV4ID0gaSsyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcDEgPSBjb29yZHNbbG93ZXJJbmRleF07XG4gICAgICAgICAgICBwMiA9IGNvb3Jkc1ttaWRkbGVJbmRleF07XG4gICAgICAgICAgICBwMyA9IGNvb3Jkc1t1cHBlckluZGV4XTtcbiAgICAgICAgICAgIGFyZWEgKz0gKCByYWQocDNbMF0pIC0gcmFkKHAxWzBdKSApICogTWF0aC5zaW4oIHJhZChwMlsxXSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXJlYSA9IGFyZWEgKiB3Z3M4NC5SQURJVVMgKiB3Z3M4NC5SQURJVVMgLyAyO1xuICAgIH1cblxuICAgIHJldHVybiBhcmVhO1xufVxuXG5mdW5jdGlvbiByYWQoXykge1xuICAgIHJldHVybiBfICogTWF0aC5QSSAvIDE4MDtcbn0iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIlxuY29uc3QgTW9kZUhhbmRsZXIgPSBmdW5jdGlvbihtb2RlLCBEcmF3Q29udGV4dCkge1xuXG4gIGNvbnN0IGhhbmRsZXJzID0ge1xuICAgIGRyYWc6IFtdLFxuICAgIGNsaWNrOiBbXSxcbiAgICBtb3VzZW1vdmU6IFtdLFxuICAgIG1vdXNlZG93bjogW10sXG4gICAgbW91c2V1cDogW10sXG4gICAgbW91c2VvdXQ6IFtdLFxuICAgIGtleWRvd246IFtdLFxuICAgIGtleXVwOiBbXSxcbiAgICB0b3VjaHN0YXJ0OiBbXSxcbiAgICB0b3VjaG1vdmU6IFtdLFxuICAgIHRvdWNoZW5kOiBbXSxcbiAgICB0YXA6IFtdXG4gIH07XG5cbiAgY29uc3QgY3R4ID0ge1xuICAgIG9uKGV2ZW50LCBzZWxlY3RvciwgZm4pIHtcbiAgICAgIGlmIChoYW5kbGVyc1tldmVudF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZXZlbnQgdHlwZTogJHtldmVudH1gKTtcbiAgICAgIH1cbiAgICAgIGhhbmRsZXJzW2V2ZW50XS5wdXNoKHtcbiAgICAgICAgc2VsZWN0b3IsXG4gICAgICAgIGZuXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJlbmRlcihpZCkge1xuICAgICAgRHJhd0NvbnRleHQuc3RvcmUuZmVhdHVyZUNoYW5nZWQoaWQpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBkZWxlZ2F0ZSA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGV2ZW50KSB7XG4gICAgY29uc3QgaGFuZGxlcyA9IGhhbmRsZXJzW2V2ZW50TmFtZV07XG4gICAgbGV0IGlIYW5kbGUgPSBoYW5kbGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoaUhhbmRsZS0tKSB7XG4gICAgICBjb25zdCBoYW5kbGUgPSBoYW5kbGVzW2lIYW5kbGVdO1xuICAgICAgaWYgKGhhbmRsZS5zZWxlY3RvcihldmVudCkpIHtcbiAgICAgICAgY29uc3Qgc2tpcFJlbmRlciA9IGhhbmRsZS5mbi5jYWxsKGN0eCwgZXZlbnQpO1xuICAgICAgICBpZiAoIXNraXBSZW5kZXIpIHtcbiAgICAgICAgICBEcmF3Q29udGV4dC5zdG9yZS5yZW5kZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBEcmF3Q29udGV4dC51aS51cGRhdGVNYXBDbGFzc2VzKCk7XG5cbiAgICAgICAgLy8gZW5zdXJlIGFuIGV2ZW50IGlzIG9ubHkgaGFuZGxlZCBvbmNlXG4gICAgICAgIC8vIHdlIGRvIHRoaXMgdG8gbGV0IG1vZGVzIGhhdmUgbXVsdGlwbGUgb3ZlcmxhcHBpbmcgc2VsZWN0b3JzXG4gICAgICAgIC8vIGFuZCByZWxheSBvbiBvcmRlciBvZiBvcHBlcnRhdGlvbnMgdG8gZmlsdGVyXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBtb2RlLnN0YXJ0LmNhbGwoY3R4KTtcblxuICByZXR1cm4ge1xuICAgIHJlbmRlcjogbW9kZS5yZW5kZXIsXG4gICAgc3RvcCgpIHtcbiAgICAgIGlmIChtb2RlLnN0b3ApIG1vZGUuc3RvcCgpO1xuICAgIH0sXG4gICAgdHJhc2goKSB7XG4gICAgICBpZiAobW9kZS50cmFzaCkge1xuICAgICAgICBtb2RlLnRyYXNoKCk7XG4gICAgICAgIERyYXdDb250ZXh0LnN0b3JlLnJlbmRlcigpO1xuICAgICAgfVxuICAgIH0sXG4gICAgY29tYmluZUZlYXR1cmVzKCkge1xuICAgICAgaWYgKG1vZGUuY29tYmluZUZlYXR1cmVzKSB7XG4gICAgICAgIG1vZGUuY29tYmluZUZlYXR1cmVzKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB1bmNvbWJpbmVGZWF0dXJlcygpIHtcbiAgICAgIGlmIChtb2RlLnVuY29tYmluZUZlYXR1cmVzKSB7XG4gICAgICAgIG1vZGUudW5jb21iaW5lRmVhdHVyZXMoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRyYWcoZXZlbnQpIHtcbiAgICAgIGRlbGVnYXRlKCdkcmFnJywgZXZlbnQpO1xuICAgIH0sXG4gICAgY2xpY2soZXZlbnQpIHtcbiAgICAgIGRlbGVnYXRlKCdjbGljaycsIGV2ZW50KTtcbiAgICB9LFxuICAgIG1vdXNlbW92ZShldmVudCkge1xuICAgICAgZGVsZWdhdGUoJ21vdXNlbW92ZScsIGV2ZW50KTtcbiAgICB9LFxuICAgIG1vdXNlZG93bihldmVudCkge1xuICAgICAgZGVsZWdhdGUoJ21vdXNlZG93bicsIGV2ZW50KTtcbiAgICB9LFxuICAgIG1vdXNldXAoZXZlbnQpIHtcbiAgICAgIGRlbGVnYXRlKCdtb3VzZXVwJywgZXZlbnQpO1xuICAgIH0sXG4gICAgbW91c2VvdXQoZXZlbnQpIHtcbiAgICAgIGRlbGVnYXRlKCdtb3VzZW91dCcsIGV2ZW50KTtcbiAgICB9LFxuICAgIGtleWRvd24oZXZlbnQpIHtcbiAgICAgIGRlbGVnYXRlKCdrZXlkb3duJywgZXZlbnQpO1xuICAgIH0sXG4gICAga2V5dXAoZXZlbnQpIHtcbiAgICAgIGRlbGVnYXRlKCdrZXl1cCcsIGV2ZW50KTtcbiAgICB9LFxuICAgIHRvdWNoc3RhcnQoZXZlbnQpIHtcbiAgICAgIGRlbGVnYXRlKCd0b3VjaHN0YXJ0JywgZXZlbnQpO1xuICAgIH0sXG4gICAgdG91Y2htb3ZlKGV2ZW50KSB7XG4gICAgICBkZWxlZ2F0ZSgndG91Y2htb3ZlJywgZXZlbnQpO1xuICAgIH0sXG4gICAgdG91Y2hlbmQoZXZlbnQpIHtcbiAgICAgIGRlbGVnYXRlKCd0b3VjaGVuZCcsIGV2ZW50KTtcbiAgICB9LFxuICAgIHRhcChldmVudCkge1xuICAgICAgZGVsZWdhdGUoJ3RhcCcsIGV2ZW50KTtcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNb2RlSGFuZGxlcjtcbiIsImV4cG9ydCBjb25zdCBjbGFzc2VzID0ge1xuICBDQU5WQVM6ICdtYXBib3hnbC1jYW52YXMnLFxuICBDT05UUk9MX0JBU0U6ICdtYXBib3hnbC1jdHJsJyxcbiAgQ09OVFJPTF9QUkVGSVg6ICdtYXBib3hnbC1jdHJsLScsXG4gIENPTlRST0xfQlVUVE9OOiAnbWFwYm94LWdsLWRyYXdfY3RybC1kcmF3LWJ0bicsXG4gIENPTlRST0xfQlVUVE9OX0xJTkU6ICdtYXBib3gtZ2wtZHJhd19saW5lJyxcbiAgQ09OVFJPTF9CVVRUT05fUE9MWUdPTjogJ21hcGJveC1nbC1kcmF3X3BvbHlnb24nLFxuICBDT05UUk9MX0JVVFRPTl9QT0lOVDogJ21hcGJveC1nbC1kcmF3X3BvaW50JyxcbiAgQ09OVFJPTF9CVVRUT05fVFJBU0g6ICdtYXBib3gtZ2wtZHJhd190cmFzaCcsXG4gIENPTlRST0xfQlVUVE9OX0NPTUJJTkVfRkVBVFVSRVM6ICdtYXBib3gtZ2wtZHJhd19jb21iaW5lJyxcbiAgQ09OVFJPTF9CVVRUT05fVU5DT01CSU5FX0ZFQVRVUkVTOiAnbWFwYm94LWdsLWRyYXdfdW5jb21iaW5lJyxcbiAgQ09OVFJPTF9HUk9VUDogJ21hcGJveGdsLWN0cmwtZ3JvdXAnLFxuICBBVFRSSUJVVElPTjogJ21hcGJveGdsLWN0cmwtYXR0cmliJyxcbiAgQUNUSVZFX0JVVFRPTjogJ2FjdGl2ZScsXG4gIEJPWF9TRUxFQ1Q6ICdtYXBib3gtZ2wtZHJhd19ib3hzZWxlY3QnXG59O1xuXG5leHBvcnQgY29uc3Qgc291cmNlcyA9IHtcbiAgSE9UOiAnbWFwYm94LWdsLWRyYXctaG90JyxcbiAgQ09MRDogJ21hcGJveC1nbC1kcmF3LWNvbGQnXG59O1xuXG5leHBvcnQgY29uc3QgY3Vyc29ycyA9IHtcbiAgQUREOiAnYWRkJyxcbiAgTU9WRTogJ21vdmUnLFxuICBEUkFHOiAnZHJhZycsXG4gIFBPSU5URVI6ICdwb2ludGVyJyxcbiAgTk9ORTogJ25vbmUnXG59O1xuXG5leHBvcnQgY29uc3QgdHlwZXMgPSB7XG4gIFBPTFlHT046ICdwb2x5Z29uJyxcbiAgTElORTogJ2xpbmVfc3RyaW5nJyxcbiAgUE9JTlQ6ICdwb2ludCdcbn07XG5cbmV4cG9ydCBjb25zdCBnZW9qc29uVHlwZXMgPSB7XG4gIEZFQVRVUkU6ICdGZWF0dXJlJyxcbiAgUE9MWUdPTjogJ1BvbHlnb24nLFxuICBMSU5FX1NUUklORzogJ0xpbmVTdHJpbmcnLFxuICBQT0lOVDogJ1BvaW50JyxcbiAgRkVBVFVSRV9DT0xMRUNUSU9OOiAnRmVhdHVyZUNvbGxlY3Rpb24nLFxuICBNVUxUSV9QUkVGSVg6ICdNdWx0aScsXG4gIE1VTFRJX1BPSU5UOiAnTXVsdGlQb2ludCcsXG4gIE1VTFRJX0xJTkVfU1RSSU5HOiAnTXVsdGlMaW5lU3RyaW5nJyxcbiAgTVVMVElfUE9MWUdPTjogJ011bHRpUG9seWdvbidcbn07XG5cbmV4cG9ydCBjb25zdCBtb2RlcyA9IHtcbiAgRFJBV19MSU5FX1NUUklORzogJ2RyYXdfbGluZV9zdHJpbmcnLFxuICBEUkFXX1BPTFlHT046ICdkcmF3X3BvbHlnb24nLFxuICBEUkFXX1BPSU5UOiAnZHJhd19wb2ludCcsXG4gIFNJTVBMRV9TRUxFQ1Q6ICdzaW1wbGVfc2VsZWN0JyxcbiAgRElSRUNUX1NFTEVDVDogJ2RpcmVjdF9zZWxlY3QnXG59O1xuXG5leHBvcnQgY29uc3QgZXZlbnRzID0ge1xuICBDUkVBVEU6ICdkcmF3LmNyZWF0ZScsXG4gIERFTEVURTogJ2RyYXcuZGVsZXRlJyxcbiAgVVBEQVRFOiAnZHJhdy51cGRhdGUnLFxuICBTRUxFQ1RJT05fQ0hBTkdFOiAnZHJhdy5zZWxlY3Rpb25jaGFuZ2UnLFxuICBNT0RFX0NIQU5HRTogJ2RyYXcubW9kZWNoYW5nZScsXG4gIEFDVElPTkFCTEU6ICdkcmF3LmFjdGlvbmFibGUnLFxuICBSRU5ERVI6ICdkcmF3LnJlbmRlcicsXG4gIENPTUJJTkVfRkVBVFVSRVM6ICdkcmF3LmNvbWJpbmUnLFxuICBVTkNPTUJJTkVfRkVBVFVSRVM6ICdkcmF3LnVuY29tYmluZSdcbn07XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVBY3Rpb25zID0ge1xuICBNT1ZFOiAnbW92ZScsXG4gIENIQU5HRV9QUk9QRVJUSUVTOiAnY2hhbmdlX3Byb3BlcnRpZXMnLFxuICBDSEFOR0VfQ09PUkRJTkFURVM6ICdjaGFuZ2VfY29vcmRpbmF0ZXMnXG59O1xuXG5leHBvcnQgY29uc3QgbWV0YSA9IHtcbiAgRkVBVFVSRTogJ2ZlYXR1cmUnLFxuICBNSURQT0lOVDogJ21pZHBvaW50JyxcbiAgVkVSVEVYOiAndmVydGV4J1xufTtcblxuZXhwb3J0IGNvbnN0IGFjdGl2ZVN0YXRlcyA9IHtcbiAgQUNUSVZFOiAndHJ1ZScsXG4gIElOQUNUSVZFOiAnZmFsc2UnXG59O1xuXG5leHBvcnQgY29uc3QgaW50ZXJhY3Rpb25zID0gW1xuICAnc2Nyb2xsWm9vbScsXG4gICdib3hab29tJyxcbiAgJ2RyYWdSb3RhdGUnLFxuICAnZHJhZ1BhbicsXG4gICdrZXlib2FyZCcsXG4gICdkb3VibGVDbGlja1pvb20nLFxuICAndG91Y2hab29tUm90YXRlJ1xuXTtcblxuZXhwb3J0IGNvbnN0IExBVF9NSU4gPSAtOTA7XG5leHBvcnQgY29uc3QgTEFUX1JFTkRFUkVEX01JTiA9IC04NTtcbmV4cG9ydCBjb25zdCBMQVRfTUFYID0gOTA7XG5leHBvcnQgY29uc3QgTEFUX1JFTkRFUkVEX01BWCA9IDg1O1xuZXhwb3J0IGNvbnN0IExOR19NSU4gPSAtMjcwO1xuZXhwb3J0IGNvbnN0IExOR19NQVggPSAyNzA7XG4iLCJpbXBvcnQgYXJlYSBmcm9tICdAbWFwYm94L2dlb2pzb24tYXJlYSc7XG5pbXBvcnQgKiBhcyBDb25zdGFudHMgZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcblxuY29uc3QgRkVBVFVSRV9TT1JUX1JBTktTID0ge1xuICBQb2ludDogMCxcbiAgTGluZVN0cmluZzogMSxcbiAgTXVsdGlMaW5lU3RyaW5nOiAxLFxuICBQb2x5Z29uOiAyXG59O1xuXG5mdW5jdGlvbiBjb21wYXJhdG9yKGEsIGIpIHtcbiAgY29uc3Qgc2NvcmUgPSBGRUFUVVJFX1NPUlRfUkFOS1NbYS5nZW9tZXRyeS50eXBlXSAtIEZFQVRVUkVfU09SVF9SQU5LU1tiLmdlb21ldHJ5LnR5cGVdO1xuXG4gIGlmIChzY29yZSA9PT0gMCAmJiBhLmdlb21ldHJ5LnR5cGUgPT09IENvbnN0YW50cy5nZW9qc29uVHlwZXMuUE9MWUdPTikge1xuICAgIHJldHVybiBhLmFyZWEgLSBiLmFyZWE7XG4gIH1cblxuICByZXR1cm4gc2NvcmU7XG59XG5cbi8vIFNvcnQgaW4gdGhlIG9yZGVyIGFib3ZlLCB0aGVuIHNvcnQgcG9seWdvbnMgYnkgYXJlYSBhc2NlbmRpbmcuXG5mdW5jdGlvbiBzb3J0RmVhdHVyZXMoZmVhdHVyZXMpIHtcbiAgcmV0dXJuIGZlYXR1cmVzLm1hcCgoZmVhdHVyZSkgPT4ge1xuICAgIGlmIChmZWF0dXJlLmdlb21ldHJ5LnR5cGUgPT09IENvbnN0YW50cy5nZW9qc29uVHlwZXMuUE9MWUdPTikge1xuICAgICAgZmVhdHVyZS5hcmVhID0gYXJlYS5nZW9tZXRyeSh7XG4gICAgICAgIHR5cGU6IENvbnN0YW50cy5nZW9qc29uVHlwZXMuRkVBVFVSRSxcbiAgICAgICAgcHJvcGVydHk6IHt9LFxuICAgICAgICBnZW9tZXRyeTogZmVhdHVyZS5nZW9tZXRyeVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBmZWF0dXJlO1xuICB9KS5zb3J0KGNvbXBhcmF0b3IpLm1hcCgoZmVhdHVyZSkgPT4ge1xuICAgIGRlbGV0ZSBmZWF0dXJlLmFyZWE7XG4gICAgcmV0dXJuIGZlYXR1cmU7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzb3J0RmVhdHVyZXM7XG4iLCIvKipcbiAqIFJldHVybnMgYSBib3VuZGluZyBib3ggcmVwcmVzZW50aW5nIHRoZSBldmVudCdzIGxvY2F0aW9uLlxuICpcbiAqIEBwYXJhbSB7RXZlbnR9IG1hcEV2ZW50IC0gTWFwYm94IEdMIEpTIG1hcCBldmVudCwgd2l0aCBhIHBvaW50IHByb3BlcnRpZXMuXG4gKiBAcmV0dXJuIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gQm91bmRpbmcgYm94LlxuICovXG5mdW5jdGlvbiBtYXBFdmVudFRvQm91bmRpbmdCb3gobWFwRXZlbnQsIGJ1ZmZlciA9IDApIHtcbiAgcmV0dXJuIFtcbiAgICBbbWFwRXZlbnQucG9pbnQueCAtIGJ1ZmZlciwgbWFwRXZlbnQucG9pbnQueSAtIGJ1ZmZlcl0sXG4gICAgW21hcEV2ZW50LnBvaW50LnggKyBidWZmZXIsIG1hcEV2ZW50LnBvaW50LnkgKyBidWZmZXJdXG4gIF07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcEV2ZW50VG9Cb3VuZGluZ0JveDtcbiIsImZ1bmN0aW9uIFN0cmluZ1NldChpdGVtcykge1xuICB0aGlzLl9pdGVtcyA9IHt9O1xuICB0aGlzLl9udW1zID0ge307XG4gIHRoaXMuX2xlbmd0aCA9IGl0ZW1zID8gaXRlbXMubGVuZ3RoIDogMDtcbiAgaWYgKCFpdGVtcykgcmV0dXJuO1xuICBmb3IgKGxldCBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHRoaXMuYWRkKGl0ZW1zW2ldKTtcbiAgICBpZiAoaXRlbXNbaV0gPT09IHVuZGVmaW5lZCkgY29udGludWU7XG4gICAgaWYgKHR5cGVvZiBpdGVtc1tpXSA9PT0gJ3N0cmluZycpIHRoaXMuX2l0ZW1zW2l0ZW1zW2ldXSA9IGk7XG4gICAgZWxzZSB0aGlzLl9udW1zW2l0ZW1zW2ldXSA9IGk7XG5cbiAgfVxufVxuXG5TdHJpbmdTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKHgpIHtcbiAgaWYgKHRoaXMuaGFzKHgpKSByZXR1cm4gdGhpcztcbiAgdGhpcy5fbGVuZ3RoKys7XG4gIGlmICh0eXBlb2YgeCA9PT0gJ3N0cmluZycpIHRoaXMuX2l0ZW1zW3hdID0gdGhpcy5fbGVuZ3RoO1xuICBlbHNlIHRoaXMuX251bXNbeF0gPSB0aGlzLl9sZW5ndGg7XG4gIHJldHVybiB0aGlzO1xufTtcblxuU3RyaW5nU2V0LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbih4KSB7XG4gIGlmICh0aGlzLmhhcyh4KSA9PT0gZmFsc2UpIHJldHVybiB0aGlzO1xuICB0aGlzLl9sZW5ndGgtLTtcbiAgZGVsZXRlIHRoaXMuX2l0ZW1zW3hdO1xuICBkZWxldGUgdGhpcy5fbnVtc1t4XTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5TdHJpbmdTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKHgpIHtcbiAgaWYgKHR5cGVvZiB4ICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgeCAhPT0gJ251bWJlcicpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHRoaXMuX2l0ZW1zW3hdICE9PSB1bmRlZmluZWQgfHwgdGhpcy5fbnVtc1t4XSAhPT0gdW5kZWZpbmVkO1xufTtcblxuU3RyaW5nU2V0LnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgdmFsdWVzID0gW107XG4gIE9iamVjdC5rZXlzKHRoaXMuX2l0ZW1zKS5mb3JFYWNoKChrKSA9PiB7XG4gICAgdmFsdWVzLnB1c2goeyBrLCB2OiB0aGlzLl9pdGVtc1trXSB9KTtcbiAgfSk7XG4gIE9iamVjdC5rZXlzKHRoaXMuX251bXMpLmZvckVhY2goKGspID0+IHtcbiAgICB2YWx1ZXMucHVzaCh7IGs6IEpTT04ucGFyc2UoayksIHY6IHRoaXMuX251bXNba10gfSk7XG4gIH0pO1xuXG4gIHJldHVybiB2YWx1ZXMuc29ydCgoYSwgYikgPT4gYS52IC0gYi52KS5tYXAoYSA9PiBhLmspO1xufTtcblxuU3RyaW5nU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9sZW5ndGggPSAwO1xuICB0aGlzLl9pdGVtcyA9IHt9O1xuICB0aGlzLl9udW1zID0ge307XG4gIHJldHVybiB0aGlzO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU3RyaW5nU2V0O1xuIiwiaW1wb3J0IHNvcnRGZWF0dXJlcyBmcm9tICcuL3NvcnRfZmVhdHVyZXMuanMnO1xuaW1wb3J0IG1hcEV2ZW50VG9Cb3VuZGluZ0JveCBmcm9tICcuL21hcF9ldmVudF90b19ib3VuZGluZ19ib3guanMnO1xuaW1wb3J0ICogYXMgQ29uc3RhbnRzIGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgU3RyaW5nU2V0IGZyb20gJy4vc3RyaW5nX3NldC5qcyc7XG5cbmNvbnN0IE1FVEFfVFlQRVMgPSBbXG4gIENvbnN0YW50cy5tZXRhLkZFQVRVUkUsXG4gIENvbnN0YW50cy5tZXRhLk1JRFBPSU5ULFxuICBDb25zdGFudHMubWV0YS5WRVJURVhcbl07XG5cbi8vIFJlcXVpcmVzIGVpdGhlciBldmVudCBvciBiYm94XG5leHBvcnQgZGVmYXVsdCB7XG4gIGNsaWNrOiBmZWF0dXJlc0F0Q2xpY2ssXG4gIHRvdWNoOiBmZWF0dXJlc0F0VG91Y2hcbn07XG5cbmZ1bmN0aW9uIGZlYXR1cmVzQXRDbGljayhldmVudCwgYmJveCwgY3R4KSB7XG4gIHJldHVybiBmZWF0dXJlc0F0KGV2ZW50LCBiYm94LCBjdHgsIGN0eC5vcHRpb25zLmNsaWNrQnVmZmVyKTtcbn1cblxuZnVuY3Rpb24gZmVhdHVyZXNBdFRvdWNoKGV2ZW50LCBiYm94LCBjdHgpIHtcbiAgcmV0dXJuIGZlYXR1cmVzQXQoZXZlbnQsIGJib3gsIGN0eCwgY3R4Lm9wdGlvbnMudG91Y2hCdWZmZXIpO1xufVxuXG5mdW5jdGlvbiBmZWF0dXJlc0F0KGV2ZW50LCBiYm94LCBjdHgsIGJ1ZmZlcikge1xuICBpZiAoY3R4Lm1hcCA9PT0gbnVsbCkgcmV0dXJuIFtdO1xuXG4gIGNvbnN0IGJveCA9IChldmVudCkgPyBtYXBFdmVudFRvQm91bmRpbmdCb3goZXZlbnQsIGJ1ZmZlcikgOiBiYm94O1xuXG4gIGNvbnN0IHF1ZXJ5UGFyYW1zID0ge307XG5cbiAgaWYgKGN0eC5vcHRpb25zLnN0eWxlcykgcXVlcnlQYXJhbXMubGF5ZXJzID0gY3R4Lm9wdGlvbnMuc3R5bGVzLm1hcChzID0+IHMuaWQpLmZpbHRlcihpZCA9PiBjdHgubWFwLmdldExheWVyKGlkKSAhPSBudWxsKTtcblxuICBjb25zdCBmZWF0dXJlcyA9IGN0eC5tYXAucXVlcnlSZW5kZXJlZEZlYXR1cmVzKGJveCwgcXVlcnlQYXJhbXMpXG4gICAgLmZpbHRlcihmZWF0dXJlID0+IE1FVEFfVFlQRVMuaW5kZXhPZihmZWF0dXJlLnByb3BlcnRpZXMubWV0YSkgIT09IC0xKTtcblxuICBjb25zdCBmZWF0dXJlSWRzID0gbmV3IFN0cmluZ1NldCgpO1xuICBjb25zdCB1bmlxdWVGZWF0dXJlcyA9IFtdO1xuICBmZWF0dXJlcy5mb3JFYWNoKChmZWF0dXJlKSA9PiB7XG4gICAgY29uc3QgZmVhdHVyZUlkID0gZmVhdHVyZS5wcm9wZXJ0aWVzLmlkO1xuICAgIGlmIChmZWF0dXJlSWRzLmhhcyhmZWF0dXJlSWQpKSByZXR1cm47XG4gICAgZmVhdHVyZUlkcy5hZGQoZmVhdHVyZUlkKTtcbiAgICB1bmlxdWVGZWF0dXJlcy5wdXNoKGZlYXR1cmUpO1xuICB9KTtcblxuICByZXR1cm4gc29ydEZlYXR1cmVzKHVuaXF1ZUZlYXR1cmVzKTtcbn1cbiIsImltcG9ydCBmZWF0dXJlc0F0IGZyb20gJy4vZmVhdHVyZXNfYXQuanMnO1xuaW1wb3J0ICogYXMgQ29uc3RhbnRzIGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEZlYXR1cmVBdEFuZFNldEN1cnNvcnMoZXZlbnQsIGN0eCkge1xuICBjb25zdCBmZWF0dXJlcyA9IGZlYXR1cmVzQXQuY2xpY2soZXZlbnQsIG51bGwsIGN0eCk7XG4gIGNvbnN0IGNsYXNzZXMgPSB7IG1vdXNlOiBDb25zdGFudHMuY3Vyc29ycy5OT05FIH07XG5cbiAgaWYgKGZlYXR1cmVzWzBdKSB7XG4gICAgY2xhc3Nlcy5tb3VzZSA9IChmZWF0dXJlc1swXS5wcm9wZXJ0aWVzLmFjdGl2ZSA9PT0gQ29uc3RhbnRzLmFjdGl2ZVN0YXRlcy5BQ1RJVkUpID9cbiAgICAgIENvbnN0YW50cy5jdXJzb3JzLk1PVkUgOiBDb25zdGFudHMuY3Vyc29ycy5QT0lOVEVSO1xuICAgIGNsYXNzZXMuZmVhdHVyZSA9IGZlYXR1cmVzWzBdLnByb3BlcnRpZXMubWV0YTtcbiAgfVxuXG4gIGlmIChjdHguZXZlbnRzLmN1cnJlbnRNb2RlTmFtZSgpLmluZGV4T2YoJ2RyYXcnKSAhPT0gLTEpIHtcbiAgICBjbGFzc2VzLm1vdXNlID0gQ29uc3RhbnRzLmN1cnNvcnMuQUREO1xuICB9XG5cbiAgY3R4LnVpLnF1ZXVlTWFwQ2xhc3NlcyhjbGFzc2VzKTtcbiAgY3R4LnVpLnVwZGF0ZU1hcENsYXNzZXMoKTtcblxuICByZXR1cm4gZmVhdHVyZXNbMF07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIGNvbnN0IHggPSBhLnggLSBiLng7XG4gIGNvbnN0IHkgPSBhLnkgLSBiLnk7XG4gIHJldHVybiBNYXRoLnNxcnQoKHggKiB4KSArICh5ICogeSkpO1xufVxuIiwiaW1wb3J0IGV1Y2xpZGVhbkRpc3RhbmNlIGZyb20gJy4vZXVjbGlkZWFuX2Rpc3RhbmNlLmpzJztcblxuY29uc3QgRklORV9UT0xFUkFOQ0UgPSA0O1xuY29uc3QgR1JPU1NfVE9MRVJBTkNFID0gMTI7XG5jb25zdCBJTlRFUlZBTCA9IDUwMDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNDbGljayhzdGFydCwgZW5kLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3QgZmluZVRvbGVyYW5jZSA9IChvcHRpb25zLmZpbmVUb2xlcmFuY2UgIT0gbnVsbCkgPyBvcHRpb25zLmZpbmVUb2xlcmFuY2UgOiBGSU5FX1RPTEVSQU5DRTtcbiAgY29uc3QgZ3Jvc3NUb2xlcmFuY2UgPSAob3B0aW9ucy5ncm9zc1RvbGVyYW5jZSAhPSBudWxsKSA/IG9wdGlvbnMuZ3Jvc3NUb2xlcmFuY2UgOiBHUk9TU19UT0xFUkFOQ0U7XG4gIGNvbnN0IGludGVydmFsID0gKG9wdGlvbnMuaW50ZXJ2YWwgIT0gbnVsbCkgPyBvcHRpb25zLmludGVydmFsIDogSU5URVJWQUw7XG5cbiAgc3RhcnQucG9pbnQgPSBzdGFydC5wb2ludCB8fCBlbmQucG9pbnQ7XG4gIHN0YXJ0LnRpbWUgPSBzdGFydC50aW1lIHx8IGVuZC50aW1lO1xuICBjb25zdCBtb3ZlRGlzdGFuY2UgPSBldWNsaWRlYW5EaXN0YW5jZShzdGFydC5wb2ludCwgZW5kLnBvaW50KTtcblxuICByZXR1cm4gbW92ZURpc3RhbmNlIDwgZmluZVRvbGVyYW5jZSB8fFxuICAgIChtb3ZlRGlzdGFuY2UgPCBncm9zc1RvbGVyYW5jZSAmJiAoZW5kLnRpbWUgLSBzdGFydC50aW1lKSA8IGludGVydmFsKTtcbn1cbiIsImltcG9ydCBldWNsaWRlYW5EaXN0YW5jZSBmcm9tICcuL2V1Y2xpZGVhbl9kaXN0YW5jZS5qcyc7XG5cbmV4cG9ydCBjb25zdCBUQVBfVE9MRVJBTkNFID0gMjU7XG5leHBvcnQgY29uc3QgVEFQX0lOVEVSVkFMID0gMjUwO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1RhcChzdGFydCwgZW5kLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3QgdG9sZXJhbmNlID0gKG9wdGlvbnMudG9sZXJhbmNlICE9IG51bGwpID8gb3B0aW9ucy50b2xlcmFuY2UgOiBUQVBfVE9MRVJBTkNFO1xuICBjb25zdCBpbnRlcnZhbCA9IChvcHRpb25zLmludGVydmFsICE9IG51bGwpID8gb3B0aW9ucy5pbnRlcnZhbCA6IFRBUF9JTlRFUlZBTDtcblxuICBzdGFydC5wb2ludCA9IHN0YXJ0LnBvaW50IHx8IGVuZC5wb2ludDtcbiAgc3RhcnQudGltZSA9IHN0YXJ0LnRpbWUgfHwgZW5kLnRpbWU7XG4gIGNvbnN0IG1vdmVEaXN0YW5jZSA9IGV1Y2xpZGVhbkRpc3RhbmNlKHN0YXJ0LnBvaW50LCBlbmQucG9pbnQpO1xuXG4gIHJldHVybiBtb3ZlRGlzdGFuY2UgPCB0b2xlcmFuY2UgJiYgKGVuZC50aW1lIC0gc3RhcnQudGltZSkgPCBpbnRlcnZhbDtcbn1cbiIsImltcG9ydCB7Y3VzdG9tQWxwaGFiZXR9IGZyb20gJ25hbm9pZC9ub24tc2VjdXJlJztcblxuY29uc3QgbmFub2lkID0gY3VzdG9tQWxwaGFiZXQoJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JywgMzIpO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVJRCgpIHtcbiAgcmV0dXJuIG5hbm9pZCgpO1xufVxuIiwiLyogQHRzLXNlbGYtdHlwZXM9XCIuL2luZGV4LmQudHNcIiAqL1xubGV0IHVybEFscGhhYmV0ID1cbiAgJ3VzZWFuZG9tLTI2VDE5ODM0MFBYNzVweEpBQ0tWRVJZTUlOREJVU0hXT0xGX0dRWmJmZ2hqa2xxdnd5enJpY3QnXG5leHBvcnQgbGV0IGN1c3RvbUFscGhhYmV0ID0gKGFscGhhYmV0LCBkZWZhdWx0U2l6ZSA9IDIxKSA9PiB7XG4gIHJldHVybiAoc2l6ZSA9IGRlZmF1bHRTaXplKSA9PiB7XG4gICAgbGV0IGlkID0gJydcbiAgICBsZXQgaSA9IHNpemUgfCAwXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWQgKz0gYWxwaGFiZXRbKE1hdGgucmFuZG9tKCkgKiBhbHBoYWJldC5sZW5ndGgpIHwgMF1cbiAgICB9XG4gICAgcmV0dXJuIGlkXG4gIH1cbn1cbmV4cG9ydCBsZXQgbmFub2lkID0gKHNpemUgPSAyMSkgPT4ge1xuICBsZXQgaWQgPSAnJ1xuICBsZXQgaSA9IHNpemUgfCAwXG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZCArPSB1cmxBbHBoYWJldFsoTWF0aC5yYW5kb20oKSAqIDY0KSB8IDBdXG4gIH1cbiAgcmV0dXJuIGlkXG59XG4iLCJpbXBvcnQge2dlbmVyYXRlSUR9IGZyb20gJy4uL2xpYi9pZC5qcyc7XG5pbXBvcnQgKiBhcyBDb25zdGFudHMgZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcblxuY29uc3QgRmVhdHVyZSA9IGZ1bmN0aW9uKGN0eCwgZ2VvanNvbikge1xuICB0aGlzLmN0eCA9IGN0eDtcbiAgdGhpcy5wcm9wZXJ0aWVzID0gZ2VvanNvbi5wcm9wZXJ0aWVzIHx8IHt9O1xuICB0aGlzLmNvb3JkaW5hdGVzID0gZ2VvanNvbi5nZW9tZXRyeS5jb29yZGluYXRlcztcbiAgdGhpcy5pZCA9IGdlb2pzb24uaWQgfHwgZ2VuZXJhdGVJRCgpO1xuICB0aGlzLnR5cGUgPSBnZW9qc29uLmdlb21ldHJ5LnR5cGU7XG59O1xuXG5GZWF0dXJlLnByb3RvdHlwZS5jaGFuZ2VkID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY3R4LnN0b3JlLmZlYXR1cmVDaGFuZ2VkKHRoaXMuaWQpO1xufTtcblxuRmVhdHVyZS5wcm90b3R5cGUuaW5jb21pbmdDb29yZHMgPSBmdW5jdGlvbihjb29yZHMpIHtcbiAgdGhpcy5zZXRDb29yZGluYXRlcyhjb29yZHMpO1xufTtcblxuRmVhdHVyZS5wcm90b3R5cGUuc2V0Q29vcmRpbmF0ZXMgPSBmdW5jdGlvbihjb29yZHMpIHtcbiAgdGhpcy5jb29yZGluYXRlcyA9IGNvb3JkcztcbiAgdGhpcy5jaGFuZ2VkKCk7XG59O1xuXG5GZWF0dXJlLnByb3RvdHlwZS5nZXRDb29yZGluYXRlcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmNvb3JkaW5hdGVzKSk7XG59O1xuXG5GZWF0dXJlLnByb3RvdHlwZS5zZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uKHByb3BlcnR5LCB2YWx1ZSkge1xuICB0aGlzLnByb3BlcnRpZXNbcHJvcGVydHldID0gdmFsdWU7XG59O1xuXG5GZWF0dXJlLnByb3RvdHlwZS50b0dlb0pTT04gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoe1xuICAgIGlkOiB0aGlzLmlkLFxuICAgIHR5cGU6IENvbnN0YW50cy5nZW9qc29uVHlwZXMuRkVBVFVSRSxcbiAgICBwcm9wZXJ0aWVzOiB0aGlzLnByb3BlcnRpZXMsXG4gICAgZ2VvbWV0cnk6IHtcbiAgICAgIGNvb3JkaW5hdGVzOiB0aGlzLmdldENvb3JkaW5hdGVzKCksXG4gICAgICB0eXBlOiB0aGlzLnR5cGVcbiAgICB9XG4gIH0pKTtcbn07XG5cbkZlYXR1cmUucHJvdG90eXBlLmludGVybmFsID0gZnVuY3Rpb24obW9kZSkge1xuICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgIGlkOiB0aGlzLmlkLFxuICAgIG1ldGE6IENvbnN0YW50cy5tZXRhLkZFQVRVUkUsXG4gICAgJ21ldGE6dHlwZSc6IHRoaXMudHlwZSxcbiAgICBhY3RpdmU6IENvbnN0YW50cy5hY3RpdmVTdGF0ZXMuSU5BQ1RJVkUsXG4gICAgbW9kZVxuICB9O1xuXG4gIGlmICh0aGlzLmN0eC5vcHRpb25zLnVzZXJQcm9wZXJ0aWVzKSB7XG4gICAgZm9yIChjb25zdCBuYW1lIGluIHRoaXMucHJvcGVydGllcykge1xuICAgICAgcHJvcGVydGllc1tgdXNlcl8ke25hbWV9YF0gPSB0aGlzLnByb3BlcnRpZXNbbmFtZV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBDb25zdGFudHMuZ2VvanNvblR5cGVzLkZFQVRVUkUsXG4gICAgcHJvcGVydGllcyxcbiAgICBnZW9tZXRyeToge1xuICAgICAgY29vcmRpbmF0ZXM6IHRoaXMuZ2V0Q29vcmRpbmF0ZXMoKSxcbiAgICAgIHR5cGU6IHRoaXMudHlwZVxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZlYXR1cmU7XG4iLCJpbXBvcnQgRmVhdHVyZSBmcm9tICcuL2ZlYXR1cmUuanMnO1xuXG5jb25zdCBQb2ludCA9IGZ1bmN0aW9uKGN0eCwgZ2VvanNvbikge1xuICBGZWF0dXJlLmNhbGwodGhpcywgY3R4LCBnZW9qc29uKTtcbn07XG5cblBvaW50LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRmVhdHVyZS5wcm90b3R5cGUpO1xuXG5Qb2ludC5wcm90b3R5cGUuaXNWYWxpZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMuY29vcmRpbmF0ZXNbMF0gPT09ICdudW1iZXInICYmXG4gICAgdHlwZW9mIHRoaXMuY29vcmRpbmF0ZXNbMV0gPT09ICdudW1iZXInO1xufTtcblxuUG9pbnQucHJvdG90eXBlLnVwZGF0ZUNvb3JkaW5hdGUgPSBmdW5jdGlvbihwYXRoT3JMbmcsIGxuZ09yTGF0LCBsYXQpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICB0aGlzLmNvb3JkaW5hdGVzID0gW2xuZ09yTGF0LCBsYXRdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuY29vcmRpbmF0ZXMgPSBbcGF0aE9yTG5nLCBsbmdPckxhdF07XG4gIH1cbiAgdGhpcy5jaGFuZ2VkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0Q29vcmRpbmF0ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5nZXRDb29yZGluYXRlcygpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUG9pbnQ7XG4iLCJpbXBvcnQgRmVhdHVyZSBmcm9tICcuL2ZlYXR1cmUuanMnO1xuXG5jb25zdCBMaW5lU3RyaW5nID0gZnVuY3Rpb24oY3R4LCBnZW9qc29uKSB7XG4gIEZlYXR1cmUuY2FsbCh0aGlzLCBjdHgsIGdlb2pzb24pO1xufTtcblxuTGluZVN0cmluZy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEZlYXR1cmUucHJvdG90eXBlKTtcblxuTGluZVN0cmluZy5wcm90b3R5cGUuaXNWYWxpZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jb29yZGluYXRlcy5sZW5ndGggPiAxO1xufTtcblxuTGluZVN0cmluZy5wcm90b3R5cGUuYWRkQ29vcmRpbmF0ZSA9IGZ1bmN0aW9uKHBhdGgsIGxuZywgbGF0KSB7XG4gIHRoaXMuY2hhbmdlZCgpO1xuICBjb25zdCBpZCA9IHBhcnNlSW50KHBhdGgsIDEwKTtcbiAgdGhpcy5jb29yZGluYXRlcy5zcGxpY2UoaWQsIDAsIFtsbmcsIGxhdF0pO1xufTtcblxuTGluZVN0cmluZy5wcm90b3R5cGUuZ2V0Q29vcmRpbmF0ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgY29uc3QgaWQgPSBwYXJzZUludChwYXRoLCAxMCk7XG4gIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY29vcmRpbmF0ZXNbaWRdKSk7XG59O1xuXG5MaW5lU3RyaW5nLnByb3RvdHlwZS5yZW1vdmVDb29yZGluYXRlID0gZnVuY3Rpb24ocGF0aCkge1xuICB0aGlzLmNoYW5nZWQoKTtcbiAgdGhpcy5jb29yZGluYXRlcy5zcGxpY2UocGFyc2VJbnQocGF0aCwgMTApLCAxKTtcbn07XG5cbkxpbmVTdHJpbmcucHJvdG90eXBlLnVwZGF0ZUNvb3JkaW5hdGUgPSBmdW5jdGlvbihwYXRoLCBsbmcsIGxhdCkge1xuICBjb25zdCBpZCA9IHBhcnNlSW50KHBhdGgsIDEwKTtcbiAgdGhpcy5jb29yZGluYXRlc1tpZF0gPSBbbG5nLCBsYXRdO1xuICB0aGlzLmNoYW5nZWQoKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExpbmVTdHJpbmc7XG4iLCJpbXBvcnQgRmVhdHVyZSBmcm9tICcuL2ZlYXR1cmUuanMnO1xuXG5jb25zdCBQb2x5Z29uID0gZnVuY3Rpb24oY3R4LCBnZW9qc29uKSB7XG4gIEZlYXR1cmUuY2FsbCh0aGlzLCBjdHgsIGdlb2pzb24pO1xuICB0aGlzLmNvb3JkaW5hdGVzID0gdGhpcy5jb29yZGluYXRlcy5tYXAocmluZyA9PiByaW5nLnNsaWNlKDAsIC0xKSk7XG59O1xuXG5Qb2x5Z29uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRmVhdHVyZS5wcm90b3R5cGUpO1xuXG5Qb2x5Z29uLnByb3RvdHlwZS5pc1ZhbGlkID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmNvb3JkaW5hdGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gdGhpcy5jb29yZGluYXRlcy5ldmVyeShyaW5nID0+IHJpbmcubGVuZ3RoID4gMik7XG59O1xuXG4vLyBFeHBlY3RzIHZhbGlkIGdlb0pTT04gcG9seWdvbiBnZW9tZXRyeTogZmlyc3QgYW5kIGxhc3QgcG9zaXRpb25zIG11c3QgYmUgZXF1aXZhbGVudC5cblBvbHlnb24ucHJvdG90eXBlLmluY29taW5nQ29vcmRzID0gZnVuY3Rpb24oY29vcmRzKSB7XG4gIHRoaXMuY29vcmRpbmF0ZXMgPSBjb29yZHMubWFwKHJpbmcgPT4gcmluZy5zbGljZSgwLCAtMSkpO1xuICB0aGlzLmNoYW5nZWQoKTtcbn07XG5cbi8vIERvZXMgTk9UIGV4cGVjdCB2YWxpZCBnZW9KU09OIHBvbHlnb24gZ2VvbWV0cnk6IGZpcnN0IGFuZCBsYXN0IHBvc2l0aW9ucyBzaG91bGQgbm90IGJlIGVxdWl2YWxlbnQuXG5Qb2x5Z29uLnByb3RvdHlwZS5zZXRDb29yZGluYXRlcyA9IGZ1bmN0aW9uKGNvb3Jkcykge1xuICB0aGlzLmNvb3JkaW5hdGVzID0gY29vcmRzO1xuICB0aGlzLmNoYW5nZWQoKTtcbn07XG5cblBvbHlnb24ucHJvdG90eXBlLmFkZENvb3JkaW5hdGUgPSBmdW5jdGlvbihwYXRoLCBsbmcsIGxhdCkge1xuICB0aGlzLmNoYW5nZWQoKTtcbiAgY29uc3QgaWRzID0gcGF0aC5zcGxpdCgnLicpLm1hcCh4ID0+IHBhcnNlSW50KHgsIDEwKSk7XG5cbiAgY29uc3QgcmluZyA9IHRoaXMuY29vcmRpbmF0ZXNbaWRzWzBdXTtcblxuICByaW5nLnNwbGljZShpZHNbMV0sIDAsIFtsbmcsIGxhdF0pO1xufTtcblxuUG9seWdvbi5wcm90b3R5cGUucmVtb3ZlQ29vcmRpbmF0ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdGhpcy5jaGFuZ2VkKCk7XG4gIGNvbnN0IGlkcyA9IHBhdGguc3BsaXQoJy4nKS5tYXAoeCA9PiBwYXJzZUludCh4LCAxMCkpO1xuICBjb25zdCByaW5nID0gdGhpcy5jb29yZGluYXRlc1tpZHNbMF1dO1xuICBpZiAocmluZykge1xuICAgIHJpbmcuc3BsaWNlKGlkc1sxXSwgMSk7XG4gICAgaWYgKHJpbmcubGVuZ3RoIDwgMykge1xuICAgICAgdGhpcy5jb29yZGluYXRlcy5zcGxpY2UoaWRzWzBdLCAxKTtcbiAgICB9XG4gIH1cbn07XG5cblBvbHlnb24ucHJvdG90eXBlLmdldENvb3JkaW5hdGUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIGNvbnN0IGlkcyA9IHBhdGguc3BsaXQoJy4nKS5tYXAoeCA9PiBwYXJzZUludCh4LCAxMCkpO1xuICBjb25zdCByaW5nID0gdGhpcy5jb29yZGluYXRlc1tpZHNbMF1dO1xuICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyaW5nW2lkc1sxXV0pKTtcbn07XG5cblBvbHlnb24ucHJvdG90eXBlLmdldENvb3JkaW5hdGVzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNvb3JkaW5hdGVzLm1hcChjb29yZHMgPT4gY29vcmRzLmNvbmNhdChbY29vcmRzWzBdXSkpO1xufTtcblxuUG9seWdvbi5wcm90b3R5cGUudXBkYXRlQ29vcmRpbmF0ZSA9IGZ1bmN0aW9uKHBhdGgsIGxuZywgbGF0KSB7XG4gIHRoaXMuY2hhbmdlZCgpO1xuICBjb25zdCBwYXJ0cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgY29uc3QgcmluZ0lkID0gcGFyc2VJbnQocGFydHNbMF0sIDEwKTtcbiAgY29uc3QgY29vcmRJZCA9IHBhcnNlSW50KHBhcnRzWzFdLCAxMCk7XG5cbiAgaWYgKHRoaXMuY29vcmRpbmF0ZXNbcmluZ0lkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5jb29yZGluYXRlc1tyaW5nSWRdID0gW107XG4gIH1cblxuICB0aGlzLmNvb3JkaW5hdGVzW3JpbmdJZF1bY29vcmRJZF0gPSBbbG5nLCBsYXRdO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUG9seWdvbjtcbiIsImltcG9ydCB7Z2VuZXJhdGVJRH0gZnJvbSAnLi4vbGliL2lkLmpzJztcbmltcG9ydCBGZWF0dXJlIGZyb20gJy4vZmVhdHVyZS5qcyc7XG5pbXBvcnQgKiBhcyBDb25zdGFudHMgZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcblxuaW1wb3J0IE11bHRpUG9pbnQgZnJvbSAnLi9wb2ludC5qcyc7XG5pbXBvcnQgTXVsdGlMaW5lU3RyaW5nIGZyb20gJy4vbGluZV9zdHJpbmcuanMnO1xuaW1wb3J0IE11bHRpUG9seWdvbiBmcm9tICcuL3BvbHlnb24uanMnO1xuXG5jb25zdCBtb2RlbHMgPSB7XG4gIE11bHRpUG9pbnQsXG4gIE11bHRpTGluZVN0cmluZyxcbiAgTXVsdGlQb2x5Z29uXG59O1xuXG5jb25zdCB0YWtlQWN0aW9uID0gKGZlYXR1cmVzLCBhY3Rpb24sIHBhdGgsIGxuZywgbGF0KSA9PiB7XG4gIGNvbnN0IHBhcnRzID0gcGF0aC5zcGxpdCgnLicpO1xuICBjb25zdCBpZHggPSBwYXJzZUludChwYXJ0c1swXSwgMTApO1xuICBjb25zdCB0YWlsID0gKCFwYXJ0c1sxXSkgPyBudWxsIDogcGFydHMuc2xpY2UoMSkuam9pbignLicpO1xuICByZXR1cm4gZmVhdHVyZXNbaWR4XVthY3Rpb25dKHRhaWwsIGxuZywgbGF0KTtcbn07XG5cbmNvbnN0IE11bHRpRmVhdHVyZSA9IGZ1bmN0aW9uKGN0eCwgZ2VvanNvbikge1xuICBGZWF0dXJlLmNhbGwodGhpcywgY3R4LCBnZW9qc29uKTtcblxuICBkZWxldGUgdGhpcy5jb29yZGluYXRlcztcbiAgdGhpcy5tb2RlbCA9IG1vZGVsc1tnZW9qc29uLmdlb21ldHJ5LnR5cGVdO1xuICBpZiAodGhpcy5tb2RlbCA9PT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2dlb2pzb24uZ2VvbWV0cnkudHlwZX0gaXMgbm90IGEgdmFsaWQgdHlwZWApO1xuICB0aGlzLmZlYXR1cmVzID0gdGhpcy5fY29vcmRpbmF0ZXNUb0ZlYXR1cmVzKGdlb2pzb24uZ2VvbWV0cnkuY29vcmRpbmF0ZXMpO1xufTtcblxuTXVsdGlGZWF0dXJlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRmVhdHVyZS5wcm90b3R5cGUpO1xuXG5NdWx0aUZlYXR1cmUucHJvdG90eXBlLl9jb29yZGluYXRlc1RvRmVhdHVyZXMgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICBjb25zdCBNb2RlbCA9IHRoaXMubW9kZWwuYmluZCh0aGlzKTtcbiAgcmV0dXJuIGNvb3JkaW5hdGVzLm1hcChjb29yZHMgPT4gbmV3IE1vZGVsKHRoaXMuY3R4LCB7XG4gICAgaWQ6IGdlbmVyYXRlSUQoKSxcbiAgICB0eXBlOiBDb25zdGFudHMuZ2VvanNvblR5cGVzLkZFQVRVUkUsXG4gICAgcHJvcGVydGllczoge30sXG4gICAgZ2VvbWV0cnk6IHtcbiAgICAgIGNvb3JkaW5hdGVzOiBjb29yZHMsXG4gICAgICB0eXBlOiB0aGlzLnR5cGUucmVwbGFjZSgnTXVsdGknLCAnJylcbiAgICB9XG4gIH0pKTtcbn07XG5cbk11bHRpRmVhdHVyZS5wcm90b3R5cGUuaXNWYWxpZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5mZWF0dXJlcy5ldmVyeShmID0+IGYuaXNWYWxpZCgpKTtcbn07XG5cbk11bHRpRmVhdHVyZS5wcm90b3R5cGUuc2V0Q29vcmRpbmF0ZXMgPSBmdW5jdGlvbihjb29yZHMpIHtcbiAgdGhpcy5mZWF0dXJlcyA9IHRoaXMuX2Nvb3JkaW5hdGVzVG9GZWF0dXJlcyhjb29yZHMpO1xuICB0aGlzLmNoYW5nZWQoKTtcbn07XG5cbk11bHRpRmVhdHVyZS5wcm90b3R5cGUuZ2V0Q29vcmRpbmF0ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgcmV0dXJuIHRha2VBY3Rpb24odGhpcy5mZWF0dXJlcywgJ2dldENvb3JkaW5hdGUnLCBwYXRoKTtcbn07XG5cbk11bHRpRmVhdHVyZS5wcm90b3R5cGUuZ2V0Q29vcmRpbmF0ZXMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5mZWF0dXJlcy5tYXAoKGYpID0+IHtcbiAgICBpZiAoZi50eXBlID09PSBDb25zdGFudHMuZ2VvanNvblR5cGVzLlBPTFlHT04pIHJldHVybiBmLmdldENvb3JkaW5hdGVzKCk7XG4gICAgcmV0dXJuIGYuY29vcmRpbmF0ZXM7XG4gIH0pKSk7XG59O1xuXG5NdWx0aUZlYXR1cmUucHJvdG90eXBlLnVwZGF0ZUNvb3JkaW5hdGUgPSBmdW5jdGlvbihwYXRoLCBsbmcsIGxhdCkge1xuICB0YWtlQWN0aW9uKHRoaXMuZmVhdHVyZXMsICd1cGRhdGVDb29yZGluYXRlJywgcGF0aCwgbG5nLCBsYXQpO1xuICB0aGlzLmNoYW5nZWQoKTtcbn07XG5cbk11bHRpRmVhdHVyZS5wcm90b3R5cGUuYWRkQ29vcmRpbmF0ZSA9IGZ1bmN0aW9uKHBhdGgsIGxuZywgbGF0KSB7XG4gIHRha2VBY3Rpb24odGhpcy5mZWF0dXJlcywgJ2FkZENvb3JkaW5hdGUnLCBwYXRoLCBsbmcsIGxhdCk7XG4gIHRoaXMuY2hhbmdlZCgpO1xufTtcblxuTXVsdGlGZWF0dXJlLnByb3RvdHlwZS5yZW1vdmVDb29yZGluYXRlID0gZnVuY3Rpb24ocGF0aCkge1xuICB0YWtlQWN0aW9uKHRoaXMuZmVhdHVyZXMsICdyZW1vdmVDb29yZGluYXRlJywgcGF0aCk7XG4gIHRoaXMuY2hhbmdlZCgpO1xufTtcblxuTXVsdGlGZWF0dXJlLnByb3RvdHlwZS5nZXRGZWF0dXJlcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5mZWF0dXJlcztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE11bHRpRmVhdHVyZTtcbiIsImltcG9ydCAqIGFzIENvbnN0YW50cyBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IGZlYXR1cmVzQXQgZnJvbSAnLi4vbGliL2ZlYXR1cmVzX2F0LmpzJztcbmltcG9ydCBQb2ludCBmcm9tICcuLi9mZWF0dXJlX3R5cGVzL3BvaW50LmpzJztcbmltcG9ydCBMaW5lU3RyaW5nIGZyb20gJy4uL2ZlYXR1cmVfdHlwZXMvbGluZV9zdHJpbmcuanMnO1xuaW1wb3J0IFBvbHlnb24gZnJvbSAnLi4vZmVhdHVyZV90eXBlcy9wb2x5Z29uLmpzJztcbmltcG9ydCBNdWx0aUZlYXR1cmUgZnJvbSAnLi4vZmVhdHVyZV90eXBlcy9tdWx0aV9mZWF0dXJlLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTW9kZUludGVyZmFjZShjdHgpIHtcbiAgdGhpcy5tYXAgPSBjdHgubWFwO1xuICB0aGlzLmRyYXdDb25maWcgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGN0eC5vcHRpb25zIHx8IHt9KSk7XG4gIHRoaXMuX2N0eCA9IGN0eDtcbn1cblxuLyoqXG4gKiBTZXRzIERyYXcncyBpbnRlcmFsIHNlbGVjdGVkIHN0YXRlXG4gKiBAbmFtZSB0aGlzLnNldFNlbGVjdGVkXG4gKiBAcGFyYW0ge0RyYXdGZWF0dXJlW119IC0gd2hhdHMgc2VsZWN0ZWQgYXMgYSBbRHJhd0ZlYXR1cmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvbWFwYm94LWdsLWRyYXcvYmxvYi9tYWluL3NyYy9mZWF0dXJlX3R5cGVzL2ZlYXR1cmUuanMpXG4gKi9cbk1vZGVJbnRlcmZhY2UucHJvdG90eXBlLnNldFNlbGVjdGVkID0gZnVuY3Rpb24oZmVhdHVyZXMpIHtcbiAgcmV0dXJuIHRoaXMuX2N0eC5zdG9yZS5zZXRTZWxlY3RlZChmZWF0dXJlcyk7XG59O1xuXG4vKipcbiAqIFNldHMgRHJhdydzIGludGVybmFsIHNlbGVjdGVkIGNvb3JkaW5hdGUgc3RhdGVcbiAqIEBuYW1lIHRoaXMuc2V0U2VsZWN0ZWRDb29yZGluYXRlc1xuICogQHBhcmFtIHtPYmplY3RbXX0gY29vcmRzIC0gYSBhcnJheSBvZiB7Y29vcmRfcGF0aDogJ3N0cmluZycsIGZlYXR1cmVfaWQ6ICdzdHJpbmcnfVxuICovXG5Nb2RlSW50ZXJmYWNlLnByb3RvdHlwZS5zZXRTZWxlY3RlZENvb3JkaW5hdGVzID0gZnVuY3Rpb24oY29vcmRzKSB7XG4gIHRoaXMuX2N0eC5zdG9yZS5zZXRTZWxlY3RlZENvb3JkaW5hdGVzKGNvb3Jkcyk7XG4gIGNvb3Jkcy5yZWR1Y2UoKG0sIGMpID0+IHtcbiAgICBpZiAobVtjLmZlYXR1cmVfaWRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG1bYy5mZWF0dXJlX2lkXSA9IHRydWU7XG4gICAgICB0aGlzLl9jdHguc3RvcmUuZ2V0KGMuZmVhdHVyZV9pZCkuY2hhbmdlZCgpO1xuICAgIH1cbiAgICByZXR1cm4gbTtcbiAgfSwge30pO1xufTtcblxuLyoqXG4gKiBHZXQgYWxsIHNlbGVjdGVkIGZlYXR1cmVzIGFzIGEgW0RyYXdGZWF0dXJlXShodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1kcmF3L2Jsb2IvbWFpbi9zcmMvZmVhdHVyZV90eXBlcy9mZWF0dXJlLmpzKVxuICogQG5hbWUgdGhpcy5nZXRTZWxlY3RlZFxuICogQHJldHVybnMge0RyYXdGZWF0dXJlW119XG4gKi9cbk1vZGVJbnRlcmZhY2UucHJvdG90eXBlLmdldFNlbGVjdGVkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9jdHguc3RvcmUuZ2V0U2VsZWN0ZWQoKTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBpZHMgb2YgYWxsIGN1cnJlbnRseSBzZWxlY3RlZCBmZWF0dXJlc1xuICogQG5hbWUgdGhpcy5nZXRTZWxlY3RlZElkc1xuICogQHJldHVybnMge1N0cmluZ1tdfVxuICovXG5Nb2RlSW50ZXJmYWNlLnByb3RvdHlwZS5nZXRTZWxlY3RlZElkcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fY3R4LnN0b3JlLmdldFNlbGVjdGVkSWRzKCk7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGEgZmVhdHVyZSBpcyBzZWxlY3RlZFxuICogQG5hbWUgdGhpcy5pc1NlbGVjdGVkXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgLSBhIGZlYXR1cmUgaWRcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5Nb2RlSW50ZXJmYWNlLnByb3RvdHlwZS5pc1NlbGVjdGVkID0gZnVuY3Rpb24oaWQpIHtcbiAgcmV0dXJuIHRoaXMuX2N0eC5zdG9yZS5pc1NlbGVjdGVkKGlkKTtcbn07XG5cbi8qKlxuICogR2V0IGEgW0RyYXdGZWF0dXJlXShodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1kcmF3L2Jsb2IvbWFpbi9zcmMvZmVhdHVyZV90eXBlcy9mZWF0dXJlLmpzKSBieSBpdHMgaWRcbiAqIEBuYW1lIHRoaXMuZ2V0RmVhdHVyZVxuICogQHBhcmFtIHtTdHJpbmd9IGlkIC0gYSBmZWF0dXJlIGlkXG4gKiBAcmV0dXJucyB7RHJhd0ZlYXR1cmV9XG4gKi9cbk1vZGVJbnRlcmZhY2UucHJvdG90eXBlLmdldEZlYXR1cmUgPSBmdW5jdGlvbihpZCkge1xuICByZXR1cm4gdGhpcy5fY3R4LnN0b3JlLmdldChpZCk7XG59O1xuXG4vKipcbiAqIEFkZCBhIGZlYXR1cmUgdG8gZHJhdydzIGludGVybmFsIHNlbGVjdGVkIHN0YXRlXG4gKiBAbmFtZSB0aGlzLnNlbGVjdFxuICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gKi9cbk1vZGVJbnRlcmZhY2UucHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uKGlkKSB7XG4gIHJldHVybiB0aGlzLl9jdHguc3RvcmUuc2VsZWN0KGlkKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGEgZmVhdHVyZSBmcm9tIGRyYXcncyBpbnRlcm5hbCBzZWxlY3RlZCBzdGF0ZVxuICogQG5hbWUgdGhpcy5kZWxldGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICovXG5Nb2RlSW50ZXJmYWNlLnByb3RvdHlwZS5kZXNlbGVjdCA9IGZ1bmN0aW9uKGlkKSB7XG4gIHJldHVybiB0aGlzLl9jdHguc3RvcmUuZGVzZWxlY3QoaWQpO1xufTtcblxuLyoqXG4gKiBEZWxldGUgYSBmZWF0dXJlIGZyb20gZHJhd1xuICogQG5hbWUgdGhpcy5kZWxldGVGZWF0dXJlXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgLSBhIGZlYXR1cmUgaWRcbiAqL1xuTW9kZUludGVyZmFjZS5wcm90b3R5cGUuZGVsZXRlRmVhdHVyZSA9IGZ1bmN0aW9uKGlkLCBvcHRzID0ge30pIHtcbiAgcmV0dXJuIHRoaXMuX2N0eC5zdG9yZS5kZWxldGUoaWQsIG9wdHMpO1xufTtcblxuLyoqXG4gKiBBZGQgYSBbRHJhd0ZlYXR1cmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvbWFwYm94LWdsLWRyYXcvYmxvYi9tYWluL3NyYy9mZWF0dXJlX3R5cGVzL2ZlYXR1cmUuanMpIHRvIGRyYXcuXG4gKiBTZWUgYHRoaXMubmV3RmVhdHVyZWAgZm9yIGNvbnZlcnRpbmcgZ2VvanNvbiBpbnRvIGEgRHJhd0ZlYXR1cmVcbiAqIEBuYW1lIHRoaXMuYWRkRmVhdHVyZVxuICogQHBhcmFtIHtEcmF3RmVhdHVyZX0gZmVhdHVyZSAtIHRoZSBmZWF0dXJlIHRvIGFkZFxuICovXG5Nb2RlSW50ZXJmYWNlLnByb3RvdHlwZS5hZGRGZWF0dXJlID0gZnVuY3Rpb24oZmVhdHVyZSwgb3B0cyA9IHt9KSB7XG4gIHJldHVybiB0aGlzLl9jdHguc3RvcmUuYWRkKGZlYXR1cmUsIG9wdHMpO1xufTtcblxuLyoqXG4gKiBDbGVhciBhbGwgc2VsZWN0ZWQgZmVhdHVyZXNcbiAqL1xuTW9kZUludGVyZmFjZS5wcm90b3R5cGUuY2xlYXJTZWxlY3RlZEZlYXR1cmVzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9jdHguc3RvcmUuY2xlYXJTZWxlY3RlZCgpO1xufTtcblxuLyoqXG4gKiBDbGVhciBhbGwgc2VsZWN0ZWQgY29vcmRpbmF0ZXNcbiAqL1xuTW9kZUludGVyZmFjZS5wcm90b3R5cGUuY2xlYXJTZWxlY3RlZENvb3JkaW5hdGVzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9jdHguc3RvcmUuY2xlYXJTZWxlY3RlZENvb3JkaW5hdGVzKCk7XG59O1xuXG4vKipcbiAqIEluZGljYXRlIGlmIHRoZSBkaWZmZXJlbnQgYWN0aW9uIGFyZSBjdXJyZW50bHkgcG9zc2libGUgd2l0aCB5b3VyIG1vZGVcbiAqIFNlZSBbZHJhdy5hY3Rpb25hbGJlXShodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1kcmF3L2Jsb2IvbWFpbi9BUEkubWQjZHJhd2FjdGlvbmFibGUpIGZvciBhIGxpc3Qgb2YgcG9zc2libGUgYWN0aW9ucy4gQWxsIHVuZGVmaW5lZCBhY3Rpb25zIGFyZSBzZXQgdG8gKipmYWxzZSoqIGJ5IGRlZmF1bHRcbiAqIEBuYW1lIHRoaXMuc2V0QWN0aW9uYWJsZVN0YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uc1xuICovXG5Nb2RlSW50ZXJmYWNlLnByb3RvdHlwZS5zZXRBY3Rpb25hYmxlU3RhdGUgPSBmdW5jdGlvbihhY3Rpb25zID0ge30pIHtcbiAgY29uc3QgbmV3U2V0ID0ge1xuICAgIHRyYXNoOiBhY3Rpb25zLnRyYXNoIHx8IGZhbHNlLFxuICAgIGNvbWJpbmVGZWF0dXJlczogYWN0aW9ucy5jb21iaW5lRmVhdHVyZXMgfHwgZmFsc2UsXG4gICAgdW5jb21iaW5lRmVhdHVyZXM6IGFjdGlvbnMudW5jb21iaW5lRmVhdHVyZXMgfHwgZmFsc2VcbiAgfTtcbiAgcmV0dXJuIHRoaXMuX2N0eC5ldmVudHMuYWN0aW9uYWJsZShuZXdTZXQpO1xufTtcblxuLyoqXG4gKiBUcmlnZ2VyIGEgbW9kZSBjaGFuZ2VcbiAqIEBuYW1lIHRoaXMuY2hhbmdlTW9kZVxuICogQHBhcmFtIHtTdHJpbmd9IG1vZGUgLSB0aGUgbW9kZSB0byB0cmFuc2l0aW9uIGludG9cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gdGhlIG9wdGlvbnMgb2JqZWN0IHRvIHBhc3MgdG8gdGhlIG5ldyBtb2RlXG4gKiBAcGFyYW0ge09iamVjdH0gZXZlbnRPcHRzIC0gdXNlZCB0byBjb250cm9sIHdoYXQga2luZCBvZiBldmVudHMgYXJlIGVtaXR0ZWQuXG4gKi9cbk1vZGVJbnRlcmZhY2UucHJvdG90eXBlLmNoYW5nZU1vZGUgPSBmdW5jdGlvbihtb2RlLCBvcHRzID0ge30sIGV2ZW50T3B0cyA9IHt9KSB7XG4gIHJldHVybiB0aGlzLl9jdHguZXZlbnRzLmNoYW5nZU1vZGUobW9kZSwgb3B0cywgZXZlbnRPcHRzKTtcbn07XG5cbi8qKlxuICogRmlyZSBhIG1hcCBldmVudFxuICogQG5hbWUgdGhpcy5maXJlXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lIC0gdGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge09iamVjdH0gZXZlbnREYXRhIC0gdGhlIGV2ZW50IGRhdGEgb2JqZWN0LlxuICovXG5Nb2RlSW50ZXJmYWNlLnByb3RvdHlwZS5maXJlID0gZnVuY3Rpb24oZXZlbnROYW1lLCBldmVudERhdGEpIHtcbiAgcmV0dXJuIHRoaXMuX2N0eC5ldmVudHMuZmlyZShldmVudE5hbWUsIGV2ZW50RGF0YSk7XG59O1xuXG4vKipcbiAqIFVwZGF0ZSB0aGUgc3RhdGUgb2YgZHJhdyBtYXAgY2xhc3Nlc1xuICogQG5hbWUgdGhpcy51cGRhdGVVSUNsYXNzZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKi9cbk1vZGVJbnRlcmZhY2UucHJvdG90eXBlLnVwZGF0ZVVJQ2xhc3NlcyA9IGZ1bmN0aW9uKG9wdHMpIHtcbiAgcmV0dXJuIHRoaXMuX2N0eC51aS5xdWV1ZU1hcENsYXNzZXMob3B0cyk7XG59O1xuXG4vKipcbiAqIElmIGEgbmFtZSBpcyBwcm92aWRlZCBpdCBtYWtlcyB0aGF0IGJ1dHRvbiBhY3RpdmUsIGVsc2UgaWYgbWFrZXMgYWxsIGJ1dHRvbnMgaW5hY3RpdmVcbiAqIEBuYW1lIHRoaXMuYWN0aXZhdGVVSUJ1dHRvblxuICogQHBhcmFtIHtTdHJpbmc/fSBuYW1lIC0gbmFtZSBvZiB0aGUgYnV0dG9uIHRvIG1ha2UgYWN0aXZlLCBsZWF2ZSBhcyB1bmRlZmluZWQgdG8gc2V0IGJ1dHRvbnMgdG8gYmUgaW5hY3RpdmVcbiAqL1xuTW9kZUludGVyZmFjZS5wcm90b3R5cGUuYWN0aXZhdGVVSUJ1dHRvbiA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMuX2N0eC51aS5zZXRBY3RpdmVCdXR0b24obmFtZSk7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgZmVhdHVyZXMgYXQgdGhlIGxvY2F0aW9uIG9mIGFuIGV2ZW50IG9iamVjdCBvciBpbiBhIGJib3hcbiAqIEBuYW1lIHRoaXMuZmVhdHVyZXNBdFxuICogQHBhcmFtIHtFdmVudHx8TlVMTH0gZXZlbnQgLSBhIG1hcGJveC1nbCBldmVudCBvYmplY3RcbiAqIEBwYXJhbSB7QkJPWHx8TlVMTH0gYmJveCAtIHRoZSBhcmVhIHRvIGdldCBmZWF0dXJlcyBmcm9tXG4gKiBAcGFyYW0ge1N0cmluZ30gYnVmZmVyVHlwZSAtIGlzIHRoaXMgYGNsaWNrYCBvciBgdGFwYCBldmVudCwgZGVmYXVsdHMgdG8gY2xpY2tcbiAqL1xuTW9kZUludGVyZmFjZS5wcm90b3R5cGUuZmVhdHVyZXNBdCA9IGZ1bmN0aW9uKGV2ZW50LCBiYm94LCBidWZmZXJUeXBlID0gJ2NsaWNrJykge1xuICBpZiAoYnVmZmVyVHlwZSAhPT0gJ2NsaWNrJyAmJiBidWZmZXJUeXBlICE9PSAndG91Y2gnKSB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgYnVmZmVyIHR5cGUnKTtcbiAgcmV0dXJuIGZlYXR1cmVzQXRbYnVmZmVyVHlwZV0oZXZlbnQsIGJib3gsIHRoaXMuX2N0eCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBbRHJhd0ZlYXR1cmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvbWFwYm94LWdsLWRyYXcvYmxvYi9tYWluL3NyYy9mZWF0dXJlX3R5cGVzL2ZlYXR1cmUuanMpIGZyb20gZ2VvanNvblxuICogQG5hbWUgdGhpcy5uZXdGZWF0dXJlXG4gKiBAcGFyYW0ge0dlb0pTT05GZWF0dXJlfSBnZW9qc29uXG4gKiBAcmV0dXJucyB7RHJhd0ZlYXR1cmV9XG4gKi9cbk1vZGVJbnRlcmZhY2UucHJvdG90eXBlLm5ld0ZlYXR1cmUgPSBmdW5jdGlvbihnZW9qc29uKSB7XG4gIGNvbnN0IHR5cGUgPSBnZW9qc29uLmdlb21ldHJ5LnR5cGU7XG4gIGlmICh0eXBlID09PSBDb25zdGFudHMuZ2VvanNvblR5cGVzLlBPSU5UKSByZXR1cm4gbmV3IFBvaW50KHRoaXMuX2N0eCwgZ2VvanNvbik7XG4gIGlmICh0eXBlID09PSBDb25zdGFudHMuZ2VvanNvblR5cGVzLkxJTkVfU1RSSU5HKSByZXR1cm4gbmV3IExpbmVTdHJpbmcodGhpcy5fY3R4LCBnZW9qc29uKTtcbiAgaWYgKHR5cGUgPT09IENvbnN0YW50cy5nZW9qc29uVHlwZXMuUE9MWUdPTikgcmV0dXJuIG5ldyBQb2x5Z29uKHRoaXMuX2N0eCwgZ2VvanNvbik7XG4gIHJldHVybiBuZXcgTXVsdGlGZWF0dXJlKHRoaXMuX2N0eCwgZ2VvanNvbik7XG59O1xuXG4vKipcbiAqIENoZWNrIGlzIGFuIG9iamVjdCBpcyBhbiBpbnN0YW5jZSBvZiBhIFtEcmF3RmVhdHVyZV0oaHR0cHM6Ly9naXRodWIuY29tL21hcGJveC9tYXBib3gtZ2wtZHJhdy9ibG9iL21haW4vc3JjL2ZlYXR1cmVfdHlwZXMvZmVhdHVyZS5qcylcbiAqIEBuYW1lIHRoaXMuaXNJbnN0YW5jZU9mXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSAtIGBQb2ludGAsIGBMaW5lU3RyaW5nYCwgYFBvbHlnb25gLCBgTXVsdGlGZWF0dXJlYFxuICogQHBhcmFtIHtPYmplY3R9IGZlYXR1cmUgLSB0aGUgb2JqZWN0IHRoYXQgbmVlZHMgdG8gYmUgY2hlY2tlZFxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbk1vZGVJbnRlcmZhY2UucHJvdG90eXBlLmlzSW5zdGFuY2VPZiA9IGZ1bmN0aW9uKHR5cGUsIGZlYXR1cmUpIHtcbiAgaWYgKHR5cGUgPT09IENvbnN0YW50cy5nZW9qc29uVHlwZXMuUE9JTlQpIHJldHVybiBmZWF0dXJlIGluc3RhbmNlb2YgUG9pbnQ7XG4gIGlmICh0eXBlID09PSBDb25zdGFudHMuZ2VvanNvblR5cGVzLkxJTkVfU1RSSU5HKSByZXR1cm4gZmVhdHVyZSBpbnN0YW5jZW9mIExpbmVTdHJpbmc7XG4gIGlmICh0eXBlID09PSBDb25zdGFudHMuZ2VvanNvblR5cGVzLlBPTFlHT04pIHJldHVybiBmZWF0dXJlIGluc3RhbmNlb2YgUG9seWdvbjtcbiAgaWYgKHR5cGUgPT09ICdNdWx0aUZlYXR1cmUnKSByZXR1cm4gZmVhdHVyZSBpbnN0YW5jZW9mIE11bHRpRmVhdHVyZTtcbiAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGZlYXR1cmUgY2xhc3M6ICR7dHlwZX1gKTtcbn07XG5cbi8qKlxuICogRm9yY2UgZHJhdyB0byByZXJlbmRlciB0aGUgZmVhdHVyZSBvZiB0aGUgcHJvdmlkZWQgaWRcbiAqIEBuYW1lIHRoaXMuZG9SZW5kZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZCAtIGEgZmVhdHVyZSBpZFxuICovXG5Nb2RlSW50ZXJmYWNlLnByb3RvdHlwZS5kb1JlbmRlciA9IGZ1bmN0aW9uKGlkKSB7XG4gIHJldHVybiB0aGlzLl9jdHguc3RvcmUuZmVhdHVyZUNoYW5nZWQoaWQpO1xufTtcblxuIiwiaW1wb3J0IE1vZGVJbnRlcmZhY2UgZnJvbSAnLi9tb2RlX2ludGVyZmFjZV9hY2Nlc3NvcnMuanMnO1xuZXhwb3J0IGRlZmF1bHQgTW9kZUludGVyZmFjZTtcblxuLyoqXG4gKiBUcmlnZ2VyZWQgd2hpbGUgYSBtb2RlIGlzIGJlaW5nIHRyYW5zaXRpb25lZCBpbnRvLlxuICogQHBhcmFtIG9wdHMge09iamVjdH0gLSB0aGlzIGlzIHRoZSBvYmplY3QgcGFzc2VkIHZpYSBgZHJhdy5jaGFuZ2VNb2RlKCdtb2RlJywgb3B0cylgO1xuICogQG5hbWUgTU9ERS5vblNldHVwXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAtIHRoaXMgb2JqZWN0IHdpbGwgYmUgcGFzc2VkIHRvIGFsbCBvdGhlciBsaWZlIGN5Y2xlIGZ1bmN0aW9uc1xuICovXG5Nb2RlSW50ZXJmYWNlLnByb3RvdHlwZS5vblNldHVwID0gZnVuY3Rpb24oKSB7fTtcblxuLyoqXG4gKiBUcmlnZ2VyZWQgd2hlbiBhIGRyYWcgZXZlbnQgaXMgZGV0ZWN0ZWQgb24gdGhlIG1hcFxuICogQG5hbWUgTU9ERS5vbkRyYWdcbiAqIEBwYXJhbSBzdGF0ZSB7T2JqZWN0fSAtIGEgbXV0aWJsZSBzdGF0ZSBvYmplY3QgY3JlYXRlZCBieSBvblNldHVwXG4gKiBAcGFyYW0gZSB7T2JqZWN0fSAtIHRoZSBjYXB0dXJlZCBldmVudCB0aGF0IGlzIHRyaWdnZXJpbmcgdGhpcyBsaWZlIGN5Y2xlIGV2ZW50XG4gKi9cbk1vZGVJbnRlcmZhY2UucHJvdG90eXBlLm9uRHJhZyA9IGZ1bmN0aW9uKCkge307XG5cbi8qKlxuICogVHJpZ2dlcmVkIHdoZW4gdGhlIG1vdXNlIGlzIGNsaWNrZWRcbiAqIEBuYW1lIE1PREUub25DbGlja1xuICogQHBhcmFtIHN0YXRlIHtPYmplY3R9IC0gYSBtdXRpYmxlIHN0YXRlIG9iamVjdCBjcmVhdGVkIGJ5IG9uU2V0dXBcbiAqIEBwYXJhbSBlIHtPYmplY3R9IC0gdGhlIGNhcHR1cmVkIGV2ZW50IHRoYXQgaXMgdHJpZ2dlcmluZyB0aGlzIGxpZmUgY3ljbGUgZXZlbnRcbiAqL1xuTW9kZUludGVyZmFjZS5wcm90b3R5cGUub25DbGljayA9IGZ1bmN0aW9uKCkge307XG5cbi8qKlxuICogVHJpZ2dlcmVkIHdpdGggdGhlIG1vdXNlIGlzIG1vdmVkXG4gKiBAbmFtZSBNT0RFLm9uTW91c2VNb3ZlXG4gKiBAcGFyYW0gc3RhdGUge09iamVjdH0gLSBhIG11dGlibGUgc3RhdGUgb2JqZWN0IGNyZWF0ZWQgYnkgb25TZXR1cFxuICogQHBhcmFtIGUge09iamVjdH0gLSB0aGUgY2FwdHVyZWQgZXZlbnQgdGhhdCBpcyB0cmlnZ2VyaW5nIHRoaXMgbGlmZSBjeWNsZSBldmVudFxuICovXG5Nb2RlSW50ZXJmYWNlLnByb3RvdHlwZS5vbk1vdXNlTW92ZSA9IGZ1bmN0aW9uKCkge307XG5cbi8qKlxuICogVHJpZ2dlcmVkIHdoZW4gdGhlIG1vdXNlIGJ1dHRvbiBpcyBwcmVzc2VkIGRvd25cbiAqIEBuYW1lIE1PREUub25Nb3VzZURvd25cbiAqIEBwYXJhbSBzdGF0ZSB7T2JqZWN0fSAtIGEgbXV0aWJsZSBzdGF0ZSBvYmplY3QgY3JlYXRlZCBieSBvblNldHVwXG4gKiBAcGFyYW0gZSB7T2JqZWN0fSAtIHRoZSBjYXB0dXJlZCBldmVudCB0aGF0IGlzIHRyaWdnZXJpbmcgdGhpcyBsaWZlIGN5Y2xlIGV2ZW50XG4gKi9cbk1vZGVJbnRlcmZhY2UucHJvdG90eXBlLm9uTW91c2VEb3duID0gZnVuY3Rpb24oKSB7fTtcblxuLyoqXG4gKiBUcmlnZ2VyZWQgd2hlbiB0aGUgbW91c2UgYnV0dG9uIGlzIHJlbGVhc2VkXG4gKiBAbmFtZSBNT0RFLm9uTW91c2VVcFxuICogQHBhcmFtIHN0YXRlIHtPYmplY3R9IC0gYSBtdXRpYmxlIHN0YXRlIG9iamVjdCBjcmVhdGVkIGJ5IG9uU2V0dXBcbiAqIEBwYXJhbSBlIHtPYmplY3R9IC0gdGhlIGNhcHR1cmVkIGV2ZW50IHRoYXQgaXMgdHJpZ2dlcmluZyB0aGlzIGxpZmUgY3ljbGUgZXZlbnRcbiAqL1xuTW9kZUludGVyZmFjZS5wcm90b3R5cGUub25Nb3VzZVVwID0gZnVuY3Rpb24oKSB7fTtcblxuLyoqXG4gKiBUcmlnZ2VyZWQgd2hlbiB0aGUgbW91c2UgbGVhdmVzIHRoZSBtYXAncyBjb250YWluZXJcbiAqIEBuYW1lIE1PREUub25Nb3VzZU91dFxuICogQHBhcmFtIHN0YXRlIHtPYmplY3R9IC0gYSBtdXRpYmxlIHN0YXRlIG9iamVjdCBjcmVhdGVkIGJ5IG9uU2V0dXBcbiAqIEBwYXJhbSBlIHtPYmplY3R9IC0gdGhlIGNhcHR1cmVkIGV2ZW50IHRoYXQgaXMgdHJpZ2dlcmluZyB0aGlzIGxpZmUgY3ljbGUgZXZlbnRcbiAqL1xuTW9kZUludGVyZmFjZS5wcm90b3R5cGUub25Nb3VzZU91dCA9IGZ1bmN0aW9uKCkge307XG5cbi8qKlxuICogVHJpZ2dlcmVkIHdoZW4gYSBrZXkgdXAgZXZlbnQgaXMgZGV0ZWN0ZWRcbiAqIEBuYW1lIE1PREUub25LZXlVcFxuICogQHBhcmFtIHN0YXRlIHtPYmplY3R9IC0gYSBtdXRpYmxlIHN0YXRlIG9iamVjdCBjcmVhdGVkIGJ5IG9uU2V0dXBcbiAqIEBwYXJhbSBlIHtPYmplY3R9IC0gdGhlIGNhcHR1cmVkIGV2ZW50IHRoYXQgaXMgdHJpZ2dlcmluZyB0aGlzIGxpZmUgY3ljbGUgZXZlbnRcbiAqL1xuTW9kZUludGVyZmFjZS5wcm90b3R5cGUub25LZXlVcCA9IGZ1bmN0aW9uKCkge307XG5cbi8qKlxuICogVHJpZ2dlcmVkIHdoZW4gYSBrZXkgZG93biBldmVudCBpcyBkZXRlY3RlZFxuICogQG5hbWUgTU9ERS5vbktleURvd25cbiAqIEBwYXJhbSBzdGF0ZSB7T2JqZWN0fSAtIGEgbXV0aWJsZSBzdGF0ZSBvYmplY3QgY3JlYXRlZCBieSBvblNldHVwXG4gKiBAcGFyYW0gZSB7T2JqZWN0fSAtIHRoZSBjYXB0dXJlZCBldmVudCB0aGF0IGlzIHRyaWdnZXJpbmcgdGhpcyBsaWZlIGN5Y2xlIGV2ZW50XG4gKi9cbk1vZGVJbnRlcmZhY2UucHJvdG90eXBlLm9uS2V5RG93biA9IGZ1bmN0aW9uKCkge307XG5cbi8qKlxuICogVHJpZ2dlcmVkIHdoZW4gYSB0b3VjaCBldmVudCBpcyBzdGFydGVkXG4gKiBAbmFtZSBNT0RFLm9uVG91Y2hTdGFydFxuICogQHBhcmFtIHN0YXRlIHtPYmplY3R9IC0gYSBtdXRpYmxlIHN0YXRlIG9iamVjdCBjcmVhdGVkIGJ5IG9uU2V0dXBcbiAqIEBwYXJhbSBlIHtPYmplY3R9IC0gdGhlIGNhcHR1cmVkIGV2ZW50IHRoYXQgaXMgdHJpZ2dlcmluZyB0aGlzIGxpZmUgY3ljbGUgZXZlbnRcbiAqL1xuTW9kZUludGVyZmFjZS5wcm90b3R5cGUub25Ub3VjaFN0YXJ0ID0gZnVuY3Rpb24oKSB7fTtcblxuLyoqXG4gKiBUcmlnZ2VyZWQgd2hlbiBvbmUgZHJhZ3MgdGhpZXIgZmluZ2VyIG9uIGEgbW9iaWxlIGRldmljZVxuICogQG5hbWUgTU9ERS5vblRvdWNoTW92ZVxuICogQHBhcmFtIHN0YXRlIHtPYmplY3R9IC0gYSBtdXRpYmxlIHN0YXRlIG9iamVjdCBjcmVhdGVkIGJ5IG9uU2V0dXBcbiAqIEBwYXJhbSBlIHtPYmplY3R9IC0gdGhlIGNhcHR1cmVkIGV2ZW50IHRoYXQgaXMgdHJpZ2dlcmluZyB0aGlzIGxpZmUgY3ljbGUgZXZlbnRcbiAqL1xuTW9kZUludGVyZmFjZS5wcm90b3R5cGUub25Ub3VjaE1vdmUgPSBmdW5jdGlvbigpIHt9O1xuXG4vKipcbiAqIFRyaWdnZXJlZCB3aGVuIG9uZSByZW1vdmVzIHRoZWlyIGZpbmdlciBmcm9tIHRoZSBtYXBcbiAqIEBuYW1lIE1PREUub25Ub3VjaEVuZFxuICogQHBhcmFtIHN0YXRlIHtPYmplY3R9IC0gYSBtdXRpYmxlIHN0YXRlIG9iamVjdCBjcmVhdGVkIGJ5IG9uU2V0dXBcbiAqIEBwYXJhbSBlIHtPYmplY3R9IC0gdGhlIGNhcHR1cmVkIGV2ZW50IHRoYXQgaXMgdHJpZ2dlcmluZyB0aGlzIGxpZmUgY3ljbGUgZXZlbnRcbiAqL1xuTW9kZUludGVyZmFjZS5wcm90b3R5cGUub25Ub3VjaEVuZCA9IGZ1bmN0aW9uKCkge307XG5cbi8qKlxuICogVHJpZ2dlcmVkIHdoZW4gb25lIHF1aWNseSB0YXBzIHRoZSBtYXBcbiAqIEBuYW1lIE1PREUub25UYXBcbiAqIEBwYXJhbSBzdGF0ZSB7T2JqZWN0fSAtIGEgbXV0aWJsZSBzdGF0ZSBvYmplY3QgY3JlYXRlZCBieSBvblNldHVwXG4gKiBAcGFyYW0gZSB7T2JqZWN0fSAtIHRoZSBjYXB0dXJlZCBldmVudCB0aGF0IGlzIHRyaWdnZXJpbmcgdGhpcyBsaWZlIGN5Y2xlIGV2ZW50XG4gKi9cbk1vZGVJbnRlcmZhY2UucHJvdG90eXBlLm9uVGFwID0gZnVuY3Rpb24oKSB7fTtcblxuLyoqXG4gKiBUcmlnZ2VyZWQgd2hlbiB0aGUgbW9kZSBpcyBiZWluZyBleGl0ZWQsIHRvIGJlIHVzZWQgZm9yIGNsZWFuaW5nIHVwIGFydGlmYWN0cyBzdWNoIGFzIGludmFsaWQgZmVhdHVyZXNcbiAqIEBuYW1lIE1PREUub25TdG9wXG4gKiBAcGFyYW0gc3RhdGUge09iamVjdH0gLSBhIG11dGlibGUgc3RhdGUgb2JqZWN0IGNyZWF0ZWQgYnkgb25TZXR1cFxuICovXG5Nb2RlSW50ZXJmYWNlLnByb3RvdHlwZS5vblN0b3AgPSBmdW5jdGlvbigpIHt9O1xuXG4vKipcbiAqIFRyaWdnZXJlZCB3aGVuIFtkcmF3LnRyYXNoKCldKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvbWFwYm94LWdsLWRyYXcvYmxvYi9tYWluL0FQSS5tZCN0cmFzaC1kcmF3KSBpcyBjYWxsZWQuXG4gKiBAbmFtZSBNT0RFLm9uVHJhc2hcbiAqIEBwYXJhbSBzdGF0ZSB7T2JqZWN0fSAtIGEgbXV0aWJsZSBzdGF0ZSBvYmplY3QgY3JlYXRlZCBieSBvblNldHVwXG4gKi9cbk1vZGVJbnRlcmZhY2UucHJvdG90eXBlLm9uVHJhc2ggPSBmdW5jdGlvbigpIHt9O1xuXG4vKipcbiAqIFRyaWdnZXJlZCB3aGVuIFtkcmF3LmNvbWJpbmVGZWF0dXJlcygpXShodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1kcmF3L2Jsb2IvbWFpbi9BUEkubWQjY29tYmluZWZlYXR1cmVzLWRyYXcpIGlzIGNhbGxlZC5cbiAqIEBuYW1lIE1PREUub25Db21iaW5lRmVhdHVyZVxuICogQHBhcmFtIHN0YXRlIHtPYmplY3R9IC0gYSBtdXRpYmxlIHN0YXRlIG9iamVjdCBjcmVhdGVkIGJ5IG9uU2V0dXBcbiAqL1xuTW9kZUludGVyZmFjZS5wcm90b3R5cGUub25Db21iaW5lRmVhdHVyZSA9IGZ1bmN0aW9uKCkge307XG5cbi8qKlxuICogVHJpZ2dlcmVkIHdoZW4gW2RyYXcudW5jb21iaW5lRmVhdHVyZXMoKV0oaHR0cHM6Ly9naXRodWIuY29tL21hcGJveC9tYXBib3gtZ2wtZHJhdy9ibG9iL21haW4vQVBJLm1kI3VuY29tYmluZWZlYXR1cmVzLWRyYXcpIGlzIGNhbGxlZC5cbiAqIEBuYW1lIE1PREUub25VbmNvbWJpbmVGZWF0dXJlXG4gKiBAcGFyYW0gc3RhdGUge09iamVjdH0gLSBhIG11dGlibGUgc3RhdGUgb2JqZWN0IGNyZWF0ZWQgYnkgb25TZXR1cFxuICovXG5Nb2RlSW50ZXJmYWNlLnByb3RvdHlwZS5vblVuY29tYmluZUZlYXR1cmUgPSBmdW5jdGlvbigpIHt9O1xuXG4vKipcbiAqIFRyaWdnZXJlZCBwZXIgZmVhdHVyZSBvbiByZW5kZXIgdG8gY29udmVydCByYXcgZmVhdHVyZXMgaW50byBzZXQgb2YgZmVhdHVyZXMgZm9yIGRpc3BsYXkgb24gdGhlIG1hcFxuICogU2VlIFtzdHlsaW5nIGRyYXddKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvbWFwYm94LWdsLWRyYXcvYmxvYi9tYWluL0FQSS5tZCNzdHlsaW5nLWRyYXcpIGZvciBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGdlb2pzb24gcHJvcGVydGllcyBEcmF3IHVzZXMgYXMgcGFydCBvZiByZW5kZXJpbmcuXG4gKiBAbmFtZSBNT0RFLnRvRGlzcGxheUZlYXR1cmVzXG4gKiBAcGFyYW0gc3RhdGUge09iamVjdH0gLSBhIG11dGlibGUgc3RhdGUgb2JqZWN0IGNyZWF0ZWQgYnkgb25TZXR1cFxuICogQHBhcmFtIGdlb2pzb24ge09iamVjdH0gLSBhIGdlb2pzb24gYmVpbmcgZXZhdWxhdGVkLiBUbyByZW5kZXIsIHBhc3MgdG8gYGRpc3BsYXlgLlxuICogQHBhcmFtIGRpc3BsYXkge0Z1bmN0aW9ufSAtIGFsbCBnZW9qc29uIG9iamVjdHMgcGFzc2VkIHRvIHRoaXMgYmUgcmVuZGVyZWQgb250byB0aGUgbWFwXG4gKi9cbk1vZGVJbnRlcmZhY2UucHJvdG90eXBlLnRvRGlzcGxheUZlYXR1cmVzID0gZnVuY3Rpb24oKSB7XG4gIHRocm93IG5ldyBFcnJvcignWW91IG11c3Qgb3ZlcndyaXRlIHRvRGlzcGxheUZlYXR1cmVzJyk7XG59O1xuXG4iLCJpbXBvcnQgTW9kZUludGVyZmFjZSBmcm9tICcuL21vZGVfaW50ZXJmYWNlLmpzJztcblxuY29uc3QgZXZlbnRNYXBwZXIgPSB7XG4gIGRyYWc6ICdvbkRyYWcnLFxuICBjbGljazogJ29uQ2xpY2snLFxuICBtb3VzZW1vdmU6ICdvbk1vdXNlTW92ZScsXG4gIG1vdXNlZG93bjogJ29uTW91c2VEb3duJyxcbiAgbW91c2V1cDogJ29uTW91c2VVcCcsXG4gIG1vdXNlb3V0OiAnb25Nb3VzZU91dCcsXG4gIGtleXVwOiAnb25LZXlVcCcsXG4gIGtleWRvd246ICdvbktleURvd24nLFxuICB0b3VjaHN0YXJ0OiAnb25Ub3VjaFN0YXJ0JyxcbiAgdG91Y2htb3ZlOiAnb25Ub3VjaE1vdmUnLFxuICB0b3VjaGVuZDogJ29uVG91Y2hFbmQnLFxuICB0YXA6ICdvblRhcCdcbn07XG5cbmNvbnN0IGV2ZW50S2V5cyA9IE9iamVjdC5rZXlzKGV2ZW50TWFwcGVyKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obW9kZU9iamVjdCkge1xuICBjb25zdCBtb2RlT2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzKG1vZGVPYmplY3QpO1xuXG4gIHJldHVybiBmdW5jdGlvbihjdHgsIHN0YXJ0T3B0cyA9IHt9KSB7XG4gICAgbGV0IHN0YXRlID0ge307XG5cbiAgICBjb25zdCBtb2RlID0gbW9kZU9iamVjdEtleXMucmVkdWNlKChtLCBrKSA9PiB7XG4gICAgICBtW2tdID0gbW9kZU9iamVjdFtrXTtcbiAgICAgIHJldHVybiBtO1xuICAgIH0sIG5ldyBNb2RlSW50ZXJmYWNlKGN0eCkpO1xuXG4gICAgZnVuY3Rpb24gd3JhcHBlcihlaCkge1xuICAgICAgcmV0dXJuIGUgPT4gbW9kZVtlaF0oc3RhdGUsIGUpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzdGFydCgpIHtcbiAgICAgICAgc3RhdGUgPSBtb2RlLm9uU2V0dXAoc3RhcnRPcHRzKTsgLy8gdGhpcyBzaG91bGQgc2V0IHVpIGJ1dHRvbnNcblxuICAgICAgICAvLyBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciBhbGwgZXZlbnQgb3B0aW9uc1xuICAgICAgICAvLyBhZGQgc2V0cyB0aGUgc2VsZWN0b3IgdG8gZmFsc2UgZm9yIGFsbFxuICAgICAgICAvLyBoYW5kbGVycyB0aGF0IGFyZSBub3QgcHJlc2VudCBpbiB0aGUgbW9kZVxuICAgICAgICAvLyB0byByZWR1Y2Ugb24gcmVuZGVyIGNhbGxzIGZvciBmdW5jdGlvbnMgdGhhdFxuICAgICAgICAvLyBoYXZlIG5vIGxvZ2ljXG4gICAgICAgIGV2ZW50S2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICBjb25zdCBtb2RlSGFuZGxlciA9IGV2ZW50TWFwcGVyW2tleV07XG4gICAgICAgICAgbGV0IHNlbGVjdG9yID0gKCkgPT4gZmFsc2U7XG4gICAgICAgICAgaWYgKG1vZGVPYmplY3RbbW9kZUhhbmRsZXJdKSB7XG4gICAgICAgICAgICBzZWxlY3RvciA9ICgpID0+IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMub24oa2V5LCBzZWxlY3Rvciwgd3JhcHBlcihtb2RlSGFuZGxlcikpO1xuICAgICAgICB9KTtcblxuICAgICAgfSxcbiAgICAgIHN0b3AoKSB7XG4gICAgICAgIG1vZGUub25TdG9wKHN0YXRlKTtcbiAgICAgIH0sXG4gICAgICB0cmFzaCgpIHtcbiAgICAgICAgbW9kZS5vblRyYXNoKHN0YXRlKTtcbiAgICAgIH0sXG4gICAgICBjb21iaW5lRmVhdHVyZXMoKSB7XG4gICAgICAgIG1vZGUub25Db21iaW5lRmVhdHVyZXMoc3RhdGUpO1xuICAgICAgfSxcbiAgICAgIHVuY29tYmluZUZlYXR1cmVzKCkge1xuICAgICAgICBtb2RlLm9uVW5jb21iaW5lRmVhdHVyZXMoc3RhdGUpO1xuICAgICAgfSxcbiAgICAgIHJlbmRlcihnZW9qc29uLCBwdXNoKSB7XG4gICAgICAgIG1vZGUudG9EaXNwbGF5RmVhdHVyZXMoc3RhdGUsIGdlb2pzb24sIHB1c2gpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59XG4iLCIvKipcbiAqIERlcml2ZSBhIGRlbnNlIGFycmF5IChubyBgdW5kZWZpbmVkYHMpIGZyb20gYSBzaW5nbGUgdmFsdWUgb3IgYXJyYXkuXG4gKlxuICogQHBhcmFtIHthbnl9IHhcbiAqIEByZXR1cm4ge0FycmF5PGFueT59XG4gKi9cbmZ1bmN0aW9uIHRvRGVuc2VBcnJheSh4KSB7XG4gIHJldHVybiBbXS5jb25jYXQoeCkuZmlsdGVyKHkgPT4geSAhPT0gdW5kZWZpbmVkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9EZW5zZUFycmF5O1xuIiwiaW1wb3J0ICogYXMgQ29uc3RhbnRzIGZyb20gJy4vY29uc3RhbnRzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW52YWxpZC10aGlzXG4gIGNvbnN0IHN0b3JlID0gdGhpcztcbiAgY29uc3QgbWFwRXhpc3RzID0gc3RvcmUuY3R4Lm1hcCAmJiBzdG9yZS5jdHgubWFwLmdldFNvdXJjZShDb25zdGFudHMuc291cmNlcy5IT1QpICE9PSB1bmRlZmluZWQ7XG4gIGlmICghbWFwRXhpc3RzKSByZXR1cm4gY2xlYW51cCgpO1xuXG4gIGNvbnN0IG1vZGUgPSBzdG9yZS5jdHguZXZlbnRzLmN1cnJlbnRNb2RlTmFtZSgpO1xuXG4gIHN0b3JlLmN0eC51aS5xdWV1ZU1hcENsYXNzZXMoeyBtb2RlIH0pO1xuXG4gIGxldCBuZXdIb3RJZHMgPSBbXTtcbiAgbGV0IG5ld0NvbGRJZHMgPSBbXTtcblxuICBpZiAoc3RvcmUuaXNEaXJ0eSkge1xuICAgIG5ld0NvbGRJZHMgPSBzdG9yZS5nZXRBbGxJZHMoKTtcbiAgfSBlbHNlIHtcbiAgICBuZXdIb3RJZHMgPSBzdG9yZS5nZXRDaGFuZ2VkSWRzKCkuZmlsdGVyKGlkID0+IHN0b3JlLmdldChpZCkgIT09IHVuZGVmaW5lZCk7XG4gICAgbmV3Q29sZElkcyA9IHN0b3JlLnNvdXJjZXMuaG90LmZpbHRlcihnZW9qc29uID0+IGdlb2pzb24ucHJvcGVydGllcy5pZCAmJiBuZXdIb3RJZHMuaW5kZXhPZihnZW9qc29uLnByb3BlcnRpZXMuaWQpID09PSAtMSAmJiBzdG9yZS5nZXQoZ2VvanNvbi5wcm9wZXJ0aWVzLmlkKSAhPT0gdW5kZWZpbmVkKS5tYXAoZ2VvanNvbiA9PiBnZW9qc29uLnByb3BlcnRpZXMuaWQpO1xuICB9XG5cbiAgc3RvcmUuc291cmNlcy5ob3QgPSBbXTtcbiAgY29uc3QgbGFzdENvbGRDb3VudCA9IHN0b3JlLnNvdXJjZXMuY29sZC5sZW5ndGg7XG4gIHN0b3JlLnNvdXJjZXMuY29sZCA9IHN0b3JlLmlzRGlydHkgPyBbXSA6IHN0b3JlLnNvdXJjZXMuY29sZC5maWx0ZXIoKGdlb2pzb24pID0+IHtcbiAgICBjb25zdCBpZCA9IGdlb2pzb24ucHJvcGVydGllcy5pZCB8fCBnZW9qc29uLnByb3BlcnRpZXMucGFyZW50O1xuICAgIHJldHVybiBuZXdIb3RJZHMuaW5kZXhPZihpZCkgPT09IC0xO1xuICB9KTtcblxuICBjb25zdCBjb2xkQ2hhbmdlZCA9IGxhc3RDb2xkQ291bnQgIT09IHN0b3JlLnNvdXJjZXMuY29sZC5sZW5ndGggfHwgbmV3Q29sZElkcy5sZW5ndGggPiAwO1xuICBuZXdIb3RJZHMuZm9yRWFjaChpZCA9PiByZW5kZXJGZWF0dXJlKGlkLCAnaG90JykpO1xuICBuZXdDb2xkSWRzLmZvckVhY2goaWQgPT4gcmVuZGVyRmVhdHVyZShpZCwgJ2NvbGQnKSk7XG5cbiAgZnVuY3Rpb24gcmVuZGVyRmVhdHVyZShpZCwgc291cmNlKSB7XG4gICAgY29uc3QgZmVhdHVyZSA9IHN0b3JlLmdldChpZCk7XG4gICAgY29uc3QgZmVhdHVyZUludGVybmFsID0gZmVhdHVyZS5pbnRlcm5hbChtb2RlKTtcbiAgICBzdG9yZS5jdHguZXZlbnRzLmN1cnJlbnRNb2RlUmVuZGVyKGZlYXR1cmVJbnRlcm5hbCwgKGdlb2pzb24pID0+IHtcbiAgICAgIGdlb2pzb24ucHJvcGVydGllcy5tb2RlID0gbW9kZTtcbiAgICAgIHN0b3JlLnNvdXJjZXNbc291cmNlXS5wdXNoKGdlb2pzb24pO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKGNvbGRDaGFuZ2VkKSB7XG4gICAgc3RvcmUuY3R4Lm1hcC5nZXRTb3VyY2UoQ29uc3RhbnRzLnNvdXJjZXMuQ09MRCkuc2V0RGF0YSh7XG4gICAgICB0eXBlOiBDb25zdGFudHMuZ2VvanNvblR5cGVzLkZFQVRVUkVfQ09MTEVDVElPTixcbiAgICAgIGZlYXR1cmVzOiBzdG9yZS5zb3VyY2VzLmNvbGRcbiAgICB9KTtcbiAgfVxuXG4gIHN0b3JlLmN0eC5tYXAuZ2V0U291cmNlKENvbnN0YW50cy5zb3VyY2VzLkhPVCkuc2V0RGF0YSh7XG4gICAgdHlwZTogQ29uc3RhbnRzLmdlb2pzb25UeXBlcy5GRUFUVVJFX0NPTExFQ1RJT04sXG4gICAgZmVhdHVyZXM6IHN0b3JlLnNvdXJjZXMuaG90XG4gIH0pO1xuXG4gIGNsZWFudXAoKTtcblxuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIHN0b3JlLmlzRGlydHkgPSBmYWxzZTtcbiAgICBzdG9yZS5jbGVhckNoYW5nZWRJZHMoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHRvRGVuc2VBcnJheSBmcm9tICcuL2xpYi90b19kZW5zZV9hcnJheS5qcyc7XG5pbXBvcnQgU3RyaW5nU2V0IGZyb20gJy4vbGliL3N0cmluZ19zZXQuanMnO1xuaW1wb3J0IHJlbmRlciBmcm9tICcuL3JlbmRlci5qcyc7XG5pbXBvcnQgKiBhcyBDb25zdGFudHMgZnJvbSAnLi9jb25zdGFudHMuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTdG9yZShjdHgpIHtcbiAgdGhpcy5fZmVhdHVyZXMgPSB7fTtcbiAgdGhpcy5fZmVhdHVyZUlkcyA9IG5ldyBTdHJpbmdTZXQoKTtcbiAgdGhpcy5fc2VsZWN0ZWRGZWF0dXJlSWRzID0gbmV3IFN0cmluZ1NldCgpO1xuICB0aGlzLl9zZWxlY3RlZENvb3JkaW5hdGVzID0gW107XG4gIHRoaXMuX2NoYW5nZWRGZWF0dXJlSWRzID0gbmV3IFN0cmluZ1NldCgpO1xuICB0aGlzLl9lbWl0U2VsZWN0aW9uQ2hhbmdlID0gZmFsc2U7XG4gIHRoaXMuX21hcEluaXRpYWxDb25maWcgPSB7fTtcbiAgdGhpcy5jdHggPSBjdHg7XG4gIHRoaXMuc291cmNlcyA9IHtcbiAgICBob3Q6IFtdLFxuICAgIGNvbGQ6IFtdXG4gIH07XG5cbiAgLy8gRGVkdXBsaWNhdGUgcmVxdWVzdHMgdG8gcmVuZGVyIGFuZCB0aWUgdGhlbSB0byBhbmltYXRpb24gZnJhbWVzLlxuICBsZXQgcmVuZGVyUmVxdWVzdDtcbiAgdGhpcy5yZW5kZXIgPSAoKSA9PiB7XG4gICAgaWYgKCFyZW5kZXJSZXF1ZXN0KSB7XG4gICAgICByZW5kZXJSZXF1ZXN0ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgcmVuZGVyUmVxdWVzdCA9IG51bGw7XG4gICAgICAgIHJlbmRlci5jYWxsKHRoaXMpO1xuXG4gICAgICAgIC8vIEZpcmUgZGVkdXBsaWNhdGVkIHNlbGVjdGlvbiBjaGFuZ2UgZXZlbnRcbiAgICAgICAgaWYgKHRoaXMuX2VtaXRTZWxlY3Rpb25DaGFuZ2UpIHtcbiAgICAgICAgICB0aGlzLmN0eC5ldmVudHMuZmlyZShDb25zdGFudHMuZXZlbnRzLlNFTEVDVElPTl9DSEFOR0UsIHtcbiAgICAgICAgICAgIGZlYXR1cmVzOiB0aGlzLmdldFNlbGVjdGVkKCkubWFwKGZlYXR1cmUgPT4gZmVhdHVyZS50b0dlb0pTT04oKSksXG4gICAgICAgICAgICBwb2ludHM6IHRoaXMuZ2V0U2VsZWN0ZWRDb29yZGluYXRlcygpLm1hcChjb29yZGluYXRlID0+ICh7XG4gICAgICAgICAgICAgIHR5cGU6IENvbnN0YW50cy5nZW9qc29uVHlwZXMuRkVBVFVSRSxcbiAgICAgICAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgICAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogQ29uc3RhbnRzLmdlb2pzb25UeXBlcy5QT0lOVCxcbiAgICAgICAgICAgICAgICBjb29yZGluYXRlczogY29vcmRpbmF0ZS5jb29yZGluYXRlc1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHRoaXMuX2VtaXRTZWxlY3Rpb25DaGFuZ2UgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpcmUgcmVuZGVyIGV2ZW50XG4gICAgICAgIHRoaXMuY3R4LmV2ZW50cy5maXJlKENvbnN0YW50cy5ldmVudHMuUkVOREVSLCB7fSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5pc0RpcnR5ID0gZmFsc2U7XG59XG5cbi8qKlxuICogRGVsYXlzIGFsbCByZW5kZXJpbmcgdW50aWwgdGhlIHJldHVybmVkIGZ1bmN0aW9uIGlzIGludm9rZWRcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSByZW5kZXJCYXRjaFxuICovXG5TdG9yZS5wcm90b3R5cGUuY3JlYXRlUmVuZGVyQmF0Y2ggPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgaG9sZFJlbmRlciA9IHRoaXMucmVuZGVyO1xuICBsZXQgbnVtUmVuZGVycyA9IDA7XG4gIHRoaXMucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgbnVtUmVuZGVycysrO1xuICB9O1xuXG4gIHJldHVybiAoKSA9PiB7XG4gICAgdGhpcy5yZW5kZXIgPSBob2xkUmVuZGVyO1xuICAgIGlmIChudW1SZW5kZXJzID4gMCkge1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gIH07XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHN0b3JlJ3Mgc3RhdGUgdG8gZGlydHkuXG4gKiBAcmV0dXJuIHtTdG9yZX0gdGhpc1xuICovXG5TdG9yZS5wcm90b3R5cGUuc2V0RGlydHkgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pc0RpcnR5ID0gdHJ1ZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgYSBmZWF0dXJlJ3Mgc3RhdGUgdG8gY2hhbmdlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmZWF0dXJlSWRcbiAqIEByZXR1cm4ge1N0b3JlfSB0aGlzXG4gKi9cblN0b3JlLnByb3RvdHlwZS5mZWF0dXJlQ3JlYXRlZCA9IGZ1bmN0aW9uKGZlYXR1cmVJZCwgb3B0aW9ucyA9IHt9KSB7XG4gIHRoaXMuX2NoYW5nZWRGZWF0dXJlSWRzLmFkZChmZWF0dXJlSWQpO1xuXG4gIGNvbnN0IHNpbGVudCA9IG9wdGlvbnMuc2lsZW50ICE9IG51bGwgPyBvcHRpb25zLnNpbGVudCA6IHRoaXMuY3R4Lm9wdGlvbnMuc3VwcHJlc3NBUElFdmVudHM7XG4gIGlmIChzaWxlbnQgIT09IHRydWUpIHtcbiAgICBjb25zdCBmZWF0dXJlID0gdGhpcy5nZXQoZmVhdHVyZUlkKTtcbiAgICB0aGlzLmN0eC5ldmVudHMuZmlyZShDb25zdGFudHMuZXZlbnRzLkNSRUFURSwge1xuICAgICAgZmVhdHVyZXM6IFtmZWF0dXJlLnRvR2VvSlNPTigpXVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgYSBmZWF0dXJlJ3Mgc3RhdGUgdG8gY2hhbmdlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmZWF0dXJlSWRcbiAqIEByZXR1cm4ge1N0b3JlfSB0aGlzXG4gKi9cblN0b3JlLnByb3RvdHlwZS5mZWF0dXJlQ2hhbmdlZCA9IGZ1bmN0aW9uKGZlYXR1cmVJZCwgb3B0aW9ucyA9IHt9KSB7XG4gIHRoaXMuX2NoYW5nZWRGZWF0dXJlSWRzLmFkZChmZWF0dXJlSWQpO1xuXG4gIGNvbnN0IHNpbGVudCA9IG9wdGlvbnMuc2lsZW50ICE9IG51bGwgPyBvcHRpb25zLnNpbGVudCA6IHRoaXMuY3R4Lm9wdGlvbnMuc3VwcHJlc3NBUElFdmVudHM7XG4gIGlmIChzaWxlbnQgIT09IHRydWUpIHtcbiAgICB0aGlzLmN0eC5ldmVudHMuZmlyZShDb25zdGFudHMuZXZlbnRzLlVQREFURSwge1xuICAgICAgYWN0aW9uOiBvcHRpb25zLmFjdGlvbiA/IG9wdGlvbnMuYWN0aW9uIDogQ29uc3RhbnRzLnVwZGF0ZUFjdGlvbnMuQ0hBTkdFX0NPT1JESU5BVEVTLFxuICAgICAgZmVhdHVyZXM6IFt0aGlzLmdldChmZWF0dXJlSWQpLnRvR2VvSlNPTigpXVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIGlkcyBvZiBhbGwgZmVhdHVyZXMgY3VycmVudGx5IGluIGNoYW5nZWQgc3RhdGUuXG4gKiBAcmV0dXJuIHtTdG9yZX0gdGhpc1xuICovXG5TdG9yZS5wcm90b3R5cGUuZ2V0Q2hhbmdlZElkcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fY2hhbmdlZEZlYXR1cmVJZHMudmFsdWVzKCk7XG59O1xuXG4vKipcbiAqIFNldHMgYWxsIGZlYXR1cmVzIHRvIHVuY2hhbmdlZCBzdGF0ZS5cbiAqIEByZXR1cm4ge1N0b3JlfSB0aGlzXG4gKi9cblN0b3JlLnByb3RvdHlwZS5jbGVhckNoYW5nZWRJZHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2hhbmdlZEZlYXR1cmVJZHMuY2xlYXIoKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIGlkcyBvZiBhbGwgZmVhdHVyZXMgaW4gdGhlIHN0b3JlLlxuICogQHJldHVybiB7U3RvcmV9IHRoaXNcbiAqL1xuU3RvcmUucHJvdG90eXBlLmdldEFsbElkcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fZmVhdHVyZUlkcy52YWx1ZXMoKTtcbn07XG5cbi8qKlxuICogQWRkcyBhIGZlYXR1cmUgdG8gdGhlIHN0b3JlLlxuICogQHBhcmFtIHtPYmplY3R9IGZlYXR1cmVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5zaWxlbnRdIC0gSWYgYHRydWVgLCB0aGlzIGludm9jYXRpb24gd2lsbCBub3QgZmlyZSBhbiBldmVudC5cbiAqXG4gKiBAcmV0dXJuIHtTdG9yZX0gdGhpc1xuICovXG5TdG9yZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24oZmVhdHVyZSwgb3B0aW9ucyA9IHt9KSB7XG4gIHRoaXMuX2ZlYXR1cmVzW2ZlYXR1cmUuaWRdID0gZmVhdHVyZTtcbiAgdGhpcy5fZmVhdHVyZUlkcy5hZGQoZmVhdHVyZS5pZCk7XG4gIHRoaXMuZmVhdHVyZUNyZWF0ZWQoZmVhdHVyZS5pZCwge3NpbGVudDogb3B0aW9ucy5zaWxlbnR9KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIERlbGV0ZXMgYSBmZWF0dXJlIG9yIGFycmF5IG9mIGZlYXR1cmVzIGZyb20gdGhlIHN0b3JlLlxuICogQ2xlYW5zIHVwIGFmdGVyIHRoZSBkZWxldGlvbiBieSBkZXNlbGVjdGluZyB0aGUgZmVhdHVyZXMuXG4gKiBJZiBjaGFuZ2VzIHdlcmUgbWFkZSwgc2V0cyB0aGUgc3RhdGUgdG8gdGhlIGRpcnR5XG4gKiBhbmQgZmlyZXMgYW4gZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZyB8IEFycmF5PHN0cmluZz59IGZlYXR1cmVJZHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5zaWxlbnRdIC0gSWYgYHRydWVgLCB0aGlzIGludm9jYXRpb24gd2lsbCBub3QgZmlyZSBhbiBldmVudC5cbiAqIEByZXR1cm4ge1N0b3JlfSB0aGlzXG4gKi9cblN0b3JlLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbihmZWF0dXJlSWRzLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3QgZGVsZXRlZEZlYXR1cmVzVG9FbWl0ID0gW107XG4gIHRvRGVuc2VBcnJheShmZWF0dXJlSWRzKS5mb3JFYWNoKChpZCkgPT4ge1xuICAgIGlmICghdGhpcy5fZmVhdHVyZUlkcy5oYXMoaWQpKSByZXR1cm47XG4gICAgdGhpcy5fZmVhdHVyZUlkcy5kZWxldGUoaWQpO1xuICAgIHRoaXMuX3NlbGVjdGVkRmVhdHVyZUlkcy5kZWxldGUoaWQpO1xuICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHtcbiAgICAgIGlmIChkZWxldGVkRmVhdHVyZXNUb0VtaXQuaW5kZXhPZih0aGlzLl9mZWF0dXJlc1tpZF0pID09PSAtMSkge1xuICAgICAgICBkZWxldGVkRmVhdHVyZXNUb0VtaXQucHVzaCh0aGlzLl9mZWF0dXJlc1tpZF0udG9HZW9KU09OKCkpO1xuICAgICAgfVxuICAgIH1cbiAgICBkZWxldGUgdGhpcy5fZmVhdHVyZXNbaWRdO1xuICAgIHRoaXMuaXNEaXJ0eSA9IHRydWU7XG4gIH0pO1xuXG4gIGlmIChkZWxldGVkRmVhdHVyZXNUb0VtaXQubGVuZ3RoKSB7XG4gICAgdGhpcy5jdHguZXZlbnRzLmZpcmUoQ29uc3RhbnRzLmV2ZW50cy5ERUxFVEUsIHtmZWF0dXJlczogZGVsZXRlZEZlYXR1cmVzVG9FbWl0fSk7XG4gIH1cblxuICByZWZyZXNoU2VsZWN0ZWRDb29yZGluYXRlcyh0aGlzLCBvcHRpb25zKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBmZWF0dXJlIGluIHRoZSBzdG9yZSBtYXRjaGluZyB0aGUgc3BlY2lmaWVkIHZhbHVlLlxuICogQHJldHVybiB7T2JqZWN0IHwgdW5kZWZpbmVkfSBmZWF0dXJlXG4gKi9cblN0b3JlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihpZCkge1xuICByZXR1cm4gdGhpcy5fZmVhdHVyZXNbaWRdO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFsbCBmZWF0dXJlcyBpbiB0aGUgc3RvcmUuXG4gKiBAcmV0dXJuIHtBcnJheTxPYmplY3Q+fVxuICovXG5TdG9yZS5wcm90b3R5cGUuZ2V0QWxsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl9mZWF0dXJlcykubWFwKGlkID0+IHRoaXMuX2ZlYXR1cmVzW2lkXSk7XG59O1xuXG4vKipcbiAqIEFkZHMgZmVhdHVyZXMgdG8gdGhlIGN1cnJlbnQgc2VsZWN0aW9uLlxuICogQHBhcmFtIHtzdHJpbmcgfCBBcnJheTxzdHJpbmc+fSBmZWF0dXJlSWRzXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuc2lsZW50XSAtIElmIGB0cnVlYCwgdGhpcyBpbnZvY2F0aW9uIHdpbGwgbm90IGZpcmUgYW4gZXZlbnQuXG4gKiBAcmV0dXJuIHtTdG9yZX0gdGhpc1xuICovXG5TdG9yZS5wcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24oZmVhdHVyZUlkcywgb3B0aW9ucyA9IHt9KSB7XG4gIHRvRGVuc2VBcnJheShmZWF0dXJlSWRzKS5mb3JFYWNoKChpZCkgPT4ge1xuICAgIGlmICh0aGlzLl9zZWxlY3RlZEZlYXR1cmVJZHMuaGFzKGlkKSkgcmV0dXJuO1xuICAgIHRoaXMuX3NlbGVjdGVkRmVhdHVyZUlkcy5hZGQoaWQpO1xuICAgIHRoaXMuX2NoYW5nZWRGZWF0dXJlSWRzLmFkZChpZCk7XG4gICAgaWYgKCFvcHRpb25zLnNpbGVudCkge1xuICAgICAgdGhpcy5fZW1pdFNlbGVjdGlvbkNoYW5nZSA9IHRydWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIERlbGV0ZXMgZmVhdHVyZXMgZnJvbSB0aGUgY3VycmVudCBzZWxlY3Rpb24uXG4gKiBAcGFyYW0ge3N0cmluZyB8IEFycmF5PHN0cmluZz59IGZlYXR1cmVJZHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5zaWxlbnRdIC0gSWYgYHRydWVgLCB0aGlzIGludm9jYXRpb24gd2lsbCBub3QgZmlyZSBhbiBldmVudC5cbiAqIEByZXR1cm4ge1N0b3JlfSB0aGlzXG4gKi9cblN0b3JlLnByb3RvdHlwZS5kZXNlbGVjdCA9IGZ1bmN0aW9uKGZlYXR1cmVJZHMsIG9wdGlvbnMgPSB7fSkge1xuICB0b0RlbnNlQXJyYXkoZmVhdHVyZUlkcykuZm9yRWFjaCgoaWQpID0+IHtcbiAgICBpZiAoIXRoaXMuX3NlbGVjdGVkRmVhdHVyZUlkcy5oYXMoaWQpKSByZXR1cm47XG4gICAgdGhpcy5fc2VsZWN0ZWRGZWF0dXJlSWRzLmRlbGV0ZShpZCk7XG4gICAgdGhpcy5fY2hhbmdlZEZlYXR1cmVJZHMuYWRkKGlkKTtcbiAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB7XG4gICAgICB0aGlzLl9lbWl0U2VsZWN0aW9uQ2hhbmdlID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICByZWZyZXNoU2VsZWN0ZWRDb29yZGluYXRlcyh0aGlzLCBvcHRpb25zKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENsZWFycyB0aGUgY3VycmVudCBzZWxlY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuc2lsZW50XSAtIElmIGB0cnVlYCwgdGhpcyBpbnZvY2F0aW9uIHdpbGwgbm90IGZpcmUgYW4gZXZlbnQuXG4gKiBAcmV0dXJuIHtTdG9yZX0gdGhpc1xuICovXG5TdG9yZS5wcm90b3R5cGUuY2xlYXJTZWxlY3RlZCA9IGZ1bmN0aW9uKG9wdGlvbnMgPSB7fSkge1xuICB0aGlzLmRlc2VsZWN0KHRoaXMuX3NlbGVjdGVkRmVhdHVyZUlkcy52YWx1ZXMoKSwgeyBzaWxlbnQ6IG9wdGlvbnMuc2lsZW50IH0pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgc3RvcmUncyBzZWxlY3Rpb24sIGNsZWFyaW5nIGFueSBwcmlvciB2YWx1ZXMuXG4gKiBJZiBubyBmZWF0dXJlIGlkcyBhcmUgcGFzc2VkLCB0aGUgc3RvcmUgaXMganVzdCBjbGVhcmVkLlxuICogQHBhcmFtIHtzdHJpbmcgfCBBcnJheTxzdHJpbmc+IHwgdW5kZWZpbmVkfSBmZWF0dXJlSWRzXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuc2lsZW50XSAtIElmIGB0cnVlYCwgdGhpcyBpbnZvY2F0aW9uIHdpbGwgbm90IGZpcmUgYW4gZXZlbnQuXG4gKiBAcmV0dXJuIHtTdG9yZX0gdGhpc1xuICovXG5TdG9yZS5wcm90b3R5cGUuc2V0U2VsZWN0ZWQgPSBmdW5jdGlvbihmZWF0dXJlSWRzLCBvcHRpb25zID0ge30pIHtcbiAgZmVhdHVyZUlkcyA9IHRvRGVuc2VBcnJheShmZWF0dXJlSWRzKTtcblxuICAvLyBEZXNlbGVjdCBhbnkgZmVhdHVyZXMgbm90IGluIHRoZSBuZXcgc2VsZWN0aW9uXG4gIHRoaXMuZGVzZWxlY3QodGhpcy5fc2VsZWN0ZWRGZWF0dXJlSWRzLnZhbHVlcygpLmZpbHRlcihpZCA9PiBmZWF0dXJlSWRzLmluZGV4T2YoaWQpID09PSAtMSksIHsgc2lsZW50OiBvcHRpb25zLnNpbGVudCB9KTtcblxuICAvLyBTZWxlY3QgYW55IGZlYXR1cmVzIGluIHRoZSBuZXcgc2VsZWN0aW9uIHRoYXQgd2VyZSBub3QgYWxyZWFkeSBzZWxlY3RlZFxuICB0aGlzLnNlbGVjdChmZWF0dXJlSWRzLmZpbHRlcihpZCA9PiAhdGhpcy5fc2VsZWN0ZWRGZWF0dXJlSWRzLmhhcyhpZCkpLCB7IHNpbGVudDogb3B0aW9ucy5zaWxlbnQgfSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHN0b3JlJ3MgY29vcmRpbmF0ZXMgc2VsZWN0aW9uLCBjbGVhcmluZyBhbnkgcHJpb3IgdmFsdWVzLlxuICogQHBhcmFtIHtBcnJheTxBcnJheTxzdHJpbmc+Pn0gY29vcmRpbmF0ZXNcbiAqIEByZXR1cm4ge1N0b3JlfSB0aGlzXG4gKi9cblN0b3JlLnByb3RvdHlwZS5zZXRTZWxlY3RlZENvb3JkaW5hdGVzID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHtcbiAgdGhpcy5fc2VsZWN0ZWRDb29yZGluYXRlcyA9IGNvb3JkaW5hdGVzO1xuICB0aGlzLl9lbWl0U2VsZWN0aW9uQ2hhbmdlID0gdHJ1ZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENsZWFycyB0aGUgY3VycmVudCBjb29yZGluYXRlcyBzZWxlY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtTdG9yZX0gdGhpc1xuICovXG5TdG9yZS5wcm90b3R5cGUuY2xlYXJTZWxlY3RlZENvb3JkaW5hdGVzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3NlbGVjdGVkQ29vcmRpbmF0ZXMgPSBbXTtcbiAgdGhpcy5fZW1pdFNlbGVjdGlvbkNoYW5nZSA9IHRydWU7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpZHMgb2YgZmVhdHVyZXMgaW4gdGhlIGN1cnJlbnQgc2VsZWN0aW9uLlxuICogQHJldHVybiB7QXJyYXk8c3RyaW5nPn0gU2VsZWN0ZWQgZmVhdHVyZSBpZHMuXG4gKi9cblN0b3JlLnByb3RvdHlwZS5nZXRTZWxlY3RlZElkcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fc2VsZWN0ZWRGZWF0dXJlSWRzLnZhbHVlcygpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGZlYXR1cmVzIGluIHRoZSBjdXJyZW50IHNlbGVjdGlvbi5cbiAqIEByZXR1cm4ge0FycmF5PE9iamVjdD59IFNlbGVjdGVkIGZlYXR1cmVzLlxuICovXG5TdG9yZS5wcm90b3R5cGUuZ2V0U2VsZWN0ZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZ2V0U2VsZWN0ZWRJZHMoKS5tYXAoaWQgPT4gdGhpcy5nZXQoaWQpKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBzZWxlY3RlZCBjb29yZGluYXRlcyBpbiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGZlYXR1cmUuXG4gKiBAcmV0dXJuIHtBcnJheTxPYmplY3Q+fSBTZWxlY3RlZCBjb29yZGluYXRlcy5cbiAqL1xuU3RvcmUucHJvdG90eXBlLmdldFNlbGVjdGVkQ29vcmRpbmF0ZXMgPSBmdW5jdGlvbigpIHtcbiAgY29uc3Qgc2VsZWN0ZWQgPSB0aGlzLl9zZWxlY3RlZENvb3JkaW5hdGVzLm1hcCgoY29vcmRpbmF0ZSkgPT4ge1xuICAgIGNvbnN0IGZlYXR1cmUgPSB0aGlzLmdldChjb29yZGluYXRlLmZlYXR1cmVfaWQpO1xuICAgIHJldHVybiB7XG4gICAgICBjb29yZGluYXRlczogZmVhdHVyZS5nZXRDb29yZGluYXRlKGNvb3JkaW5hdGUuY29vcmRfcGF0aClcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIHNlbGVjdGVkO1xufTtcblxuLyoqXG4gKiBJbmRpY2F0ZXMgd2hldGhlciBhIGZlYXR1cmUgaXMgc2VsZWN0ZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZmVhdHVyZUlkXG4gKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIGZlYXR1cmUgaXMgc2VsZWN0ZWQsIGBmYWxzZWAgaWYgbm90LlxuICovXG5TdG9yZS5wcm90b3R5cGUuaXNTZWxlY3RlZCA9IGZ1bmN0aW9uKGZlYXR1cmVJZCkge1xuICByZXR1cm4gdGhpcy5fc2VsZWN0ZWRGZWF0dXJlSWRzLmhhcyhmZWF0dXJlSWQpO1xufTtcblxuLyoqXG4gKiBTZXRzIGEgcHJvcGVydHkgb24gdGhlIGdpdmVuIGZlYXR1cmVcbiAqIEBwYXJhbSB7c3RyaW5nfSBmZWF0dXJlSWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBwcm9wZXJ0eVxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IHZhbHVlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuc2lsZW50XSAtIElmIGB0cnVlYCwgdGhpcyBpbnZvY2F0aW9uIHdpbGwgbm90IGZpcmUgYW4gZXZlbnQuXG4qL1xuU3RvcmUucHJvdG90eXBlLnNldEZlYXR1cmVQcm9wZXJ0eSA9IGZ1bmN0aW9uKGZlYXR1cmVJZCwgcHJvcGVydHksIHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgdGhpcy5nZXQoZmVhdHVyZUlkKS5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xuXG4gIHRoaXMuZmVhdHVyZUNoYW5nZWQoZmVhdHVyZUlkLCB7XG4gICAgc2lsZW50OiBvcHRpb25zLnNpbGVudCxcbiAgICBhY3Rpb246IENvbnN0YW50cy51cGRhdGVBY3Rpb25zLkNIQU5HRV9QUk9QRVJUSUVTXG4gIH0pO1xufTtcblxuZnVuY3Rpb24gcmVmcmVzaFNlbGVjdGVkQ29vcmRpbmF0ZXMoc3RvcmUsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBuZXdTZWxlY3RlZENvb3JkaW5hdGVzID0gc3RvcmUuX3NlbGVjdGVkQ29vcmRpbmF0ZXMuZmlsdGVyKHBvaW50ID0+IHN0b3JlLl9zZWxlY3RlZEZlYXR1cmVJZHMuaGFzKHBvaW50LmZlYXR1cmVfaWQpKTtcbiAgaWYgKHN0b3JlLl9zZWxlY3RlZENvb3JkaW5hdGVzLmxlbmd0aCAhPT0gbmV3U2VsZWN0ZWRDb29yZGluYXRlcy5sZW5ndGggJiYgIW9wdGlvbnMuc2lsZW50KSB7XG4gICAgc3RvcmUuX2VtaXRTZWxlY3Rpb25DaGFuZ2UgPSB0cnVlO1xuICB9XG4gIHN0b3JlLl9zZWxlY3RlZENvb3JkaW5hdGVzID0gbmV3U2VsZWN0ZWRDb29yZGluYXRlcztcbn1cblxuLyoqXG4gKiBTdG9yZXMgdGhlIGluaXRpYWwgY29uZmlnIGZvciBhIG1hcCwgc28gdGhhdCB3ZSBjYW4gc2V0IGl0IGFnYWluIGFmdGVyIHdlJ3JlIGRvbmUuXG4qL1xuU3RvcmUucHJvdG90eXBlLnN0b3JlTWFwQ29uZmlnID0gZnVuY3Rpb24oKSB7XG4gIENvbnN0YW50cy5pbnRlcmFjdGlvbnMuZm9yRWFjaCgoaW50ZXJhY3Rpb24pID0+IHtcbiAgICBjb25zdCBpbnRlcmFjdGlvblNldCA9IHRoaXMuY3R4Lm1hcFtpbnRlcmFjdGlvbl07XG4gICAgaWYgKGludGVyYWN0aW9uU2V0KSB7XG4gICAgICB0aGlzLl9tYXBJbml0aWFsQ29uZmlnW2ludGVyYWN0aW9uXSA9IHRoaXMuY3R4Lm1hcFtpbnRlcmFjdGlvbl0uaXNFbmFibGVkKCk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogUmVzdG9yZXMgdGhlIGluaXRpYWwgY29uZmlnIGZvciBhIG1hcCwgZW5zdXJpbmcgYWxsIGlzIHdlbGwuXG4qL1xuU3RvcmUucHJvdG90eXBlLnJlc3RvcmVNYXBDb25maWcgPSBmdW5jdGlvbigpIHtcbiAgT2JqZWN0LmtleXModGhpcy5fbWFwSW5pdGlhbENvbmZpZykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLl9tYXBJbml0aWFsQ29uZmlnW2tleV07XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLmN0eC5tYXBba2V5XS5lbmFibGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdHgubWFwW2tleV0uZGlzYWJsZSgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGluaXRpYWwgc3RhdGUgb2YgYW4gaW50ZXJhY3Rpb24gc2V0dGluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnRlcmFjdGlvblxuICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSBpbnRlcmFjdGlvbiBpcyBlbmFibGVkLCBgZmFsc2VgIGlmIG5vdC5cbiAqIERlZmF1bHRzIHRvIGB0cnVlYC4gKFRvZG86IGluY2x1ZGUgZGVmYXVsdHMuKVxuKi9cblN0b3JlLnByb3RvdHlwZS5nZXRJbml0aWFsQ29uZmlnVmFsdWUgPSBmdW5jdGlvbihpbnRlcmFjdGlvbikge1xuICBpZiAodGhpcy5fbWFwSW5pdGlhbENvbmZpZ1tpbnRlcmFjdGlvbl0gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB0aGlzLl9tYXBJbml0aWFsQ29uZmlnW2ludGVyYWN0aW9uXTtcbiAgfSBlbHNlIHtcbiAgICAvLyBUaGlzIG5lZWRzIHRvIGJlIHNldCB0byB3aGF0ZXZlciB0aGUgZGVmYXVsdCBpcyBmb3IgdGhhdCBpbnRlcmFjdGlvblxuICAgIC8vIEl0IHNlZW1zIHRvIGJlIHRydWUgZm9yIGFsbCBjYXNlcyBjdXJyZW50bHksIHNvIGxldCdzIHNlbmQgYmFjayBgdHJ1ZWAuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJpbXBvcnQgKiBhcyBDb25zdGFudHMgZnJvbSAnLi9jb25zdGFudHMuanMnO1xuXG5jb25zdCBjbGFzc1R5cGVzID0gWydtb2RlJywgJ2ZlYXR1cmUnLCAnbW91c2UnXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY3R4KSB7XG5cblxuICBjb25zdCBidXR0b25FbGVtZW50cyA9IHt9O1xuICBsZXQgYWN0aXZlQnV0dG9uID0gbnVsbDtcblxuICBsZXQgY3VycmVudE1hcENsYXNzZXMgPSB7XG4gICAgbW9kZTogbnVsbCwgLy8gZS5nLiBtb2RlLWRpcmVjdF9zZWxlY3RcbiAgICBmZWF0dXJlOiBudWxsLCAvLyBlLmcuIGZlYXR1cmUtdmVydGV4XG4gICAgbW91c2U6IG51bGwgLy8gZS5nLiBtb3VzZS1tb3ZlXG4gIH07XG5cbiAgbGV0IG5leHRNYXBDbGFzc2VzID0ge1xuICAgIG1vZGU6IG51bGwsXG4gICAgZmVhdHVyZTogbnVsbCxcbiAgICBtb3VzZTogbnVsbFxuICB9O1xuXG4gIGZ1bmN0aW9uIGNsZWFyTWFwQ2xhc3NlcygpIHtcbiAgICBxdWV1ZU1hcENsYXNzZXMoe21vZGU6bnVsbCwgZmVhdHVyZTpudWxsLCBtb3VzZTpudWxsfSk7XG4gICAgdXBkYXRlTWFwQ2xhc3NlcygpO1xuICB9XG5cbiAgZnVuY3Rpb24gcXVldWVNYXBDbGFzc2VzKG9wdGlvbnMpIHtcbiAgICBuZXh0TWFwQ2xhc3NlcyA9IE9iamVjdC5hc3NpZ24obmV4dE1hcENsYXNzZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlTWFwQ2xhc3NlcygpIHtcbiAgICBpZiAoIWN0eC5jb250YWluZXIpIHJldHVybjtcblxuICAgIGNvbnN0IGNsYXNzZXNUb1JlbW92ZSA9IFtdO1xuICAgIGNvbnN0IGNsYXNzZXNUb0FkZCA9IFtdO1xuXG4gICAgY2xhc3NUeXBlcy5mb3JFYWNoKCh0eXBlKSA9PiB7XG4gICAgICBpZiAobmV4dE1hcENsYXNzZXNbdHlwZV0gPT09IGN1cnJlbnRNYXBDbGFzc2VzW3R5cGVdKSByZXR1cm47XG5cbiAgICAgIGNsYXNzZXNUb1JlbW92ZS5wdXNoKGAke3R5cGV9LSR7Y3VycmVudE1hcENsYXNzZXNbdHlwZV19YCk7XG4gICAgICBpZiAobmV4dE1hcENsYXNzZXNbdHlwZV0gIT09IG51bGwpIHtcbiAgICAgICAgY2xhc3Nlc1RvQWRkLnB1c2goYCR7dHlwZX0tJHtuZXh0TWFwQ2xhc3Nlc1t0eXBlXX1gKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChjbGFzc2VzVG9SZW1vdmUubGVuZ3RoID4gMCkge1xuICAgICAgY3R4LmNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzZXNUb1JlbW92ZSk7XG4gICAgfVxuXG4gICAgaWYgKGNsYXNzZXNUb0FkZC5sZW5ndGggPiAwKSB7XG4gICAgICBjdHguY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3Nlc1RvQWRkKTtcbiAgICB9XG5cbiAgICBjdXJyZW50TWFwQ2xhc3NlcyA9IE9iamVjdC5hc3NpZ24oY3VycmVudE1hcENsYXNzZXMsIG5leHRNYXBDbGFzc2VzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbnRyb2xCdXR0b24oaWQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGJ1dHRvbi5jbGFzc05hbWUgPSBgJHtDb25zdGFudHMuY2xhc3Nlcy5DT05UUk9MX0JVVFRPTn0gJHtvcHRpb25zLmNsYXNzTmFtZX1gO1xuICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgb3B0aW9ucy50aXRsZSk7XG4gICAgb3B0aW9ucy5jb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcblxuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICBjb25zdCBjbGlja2VkQnV0dG9uID0gZS50YXJnZXQ7XG4gICAgICBpZiAoY2xpY2tlZEJ1dHRvbiA9PT0gYWN0aXZlQnV0dG9uKSB7XG4gICAgICAgIGRlYWN0aXZhdGVCdXR0b25zKCk7XG4gICAgICAgIG9wdGlvbnMub25EZWFjdGl2YXRlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0QWN0aXZlQnV0dG9uKGlkKTtcbiAgICAgIG9wdGlvbnMub25BY3RpdmF0ZSgpO1xuICAgIH0sIHRydWUpO1xuXG4gICAgcmV0dXJuIGJ1dHRvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlYWN0aXZhdGVCdXR0b25zKCkge1xuICAgIGlmICghYWN0aXZlQnV0dG9uKSByZXR1cm47XG4gICAgYWN0aXZlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoQ29uc3RhbnRzLmNsYXNzZXMuQUNUSVZFX0JVVFRPTik7XG4gICAgYWN0aXZlQnV0dG9uID0gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEFjdGl2ZUJ1dHRvbihpZCkge1xuICAgIGRlYWN0aXZhdGVCdXR0b25zKCk7XG5cbiAgICBjb25zdCBidXR0b24gPSBidXR0b25FbGVtZW50c1tpZF07XG4gICAgaWYgKCFidXR0b24pIHJldHVybjtcblxuICAgIGlmIChidXR0b24gJiYgaWQgIT09ICd0cmFzaCcpIHtcbiAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKENvbnN0YW50cy5jbGFzc2VzLkFDVElWRV9CVVRUT04pO1xuICAgICAgYWN0aXZlQnV0dG9uID0gYnV0dG9uO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEJ1dHRvbnMoKSB7XG4gICAgY29uc3QgY29udHJvbHMgPSBjdHgub3B0aW9ucy5jb250cm9scztcbiAgICBjb25zdCBjb250cm9sR3JvdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb250cm9sR3JvdXAuY2xhc3NOYW1lID0gYCR7Q29uc3RhbnRzLmNsYXNzZXMuQ09OVFJPTF9HUk9VUH0gJHtDb25zdGFudHMuY2xhc3Nlcy5DT05UUk9MX0JBU0V9YDtcblxuICAgIGlmICghY29udHJvbHMpIHJldHVybiBjb250cm9sR3JvdXA7XG5cbiAgICBpZiAoY29udHJvbHNbQ29uc3RhbnRzLnR5cGVzLkxJTkVdKSB7XG4gICAgICBidXR0b25FbGVtZW50c1tDb25zdGFudHMudHlwZXMuTElORV0gPSBjcmVhdGVDb250cm9sQnV0dG9uKENvbnN0YW50cy50eXBlcy5MSU5FLCB7XG4gICAgICAgIGNvbnRhaW5lcjogY29udHJvbEdyb3VwLFxuICAgICAgICBjbGFzc05hbWU6IENvbnN0YW50cy5jbGFzc2VzLkNPTlRST0xfQlVUVE9OX0xJTkUsXG4gICAgICAgIHRpdGxlOiBgTGluZVN0cmluZyB0b29sICR7Y3R4Lm9wdGlvbnMua2V5YmluZGluZ3MgPyAnKGwpJyA6ICcnfWAsXG4gICAgICAgIG9uQWN0aXZhdGU6ICgpID0+IGN0eC5ldmVudHMuY2hhbmdlTW9kZShDb25zdGFudHMubW9kZXMuRFJBV19MSU5FX1NUUklORyksXG4gICAgICAgIG9uRGVhY3RpdmF0ZTogKCkgPT4gY3R4LmV2ZW50cy50cmFzaCgpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoY29udHJvbHNbQ29uc3RhbnRzLnR5cGVzLlBPTFlHT05dKSB7XG4gICAgICBidXR0b25FbGVtZW50c1tDb25zdGFudHMudHlwZXMuUE9MWUdPTl0gPSBjcmVhdGVDb250cm9sQnV0dG9uKENvbnN0YW50cy50eXBlcy5QT0xZR09OLCB7XG4gICAgICAgIGNvbnRhaW5lcjogY29udHJvbEdyb3VwLFxuICAgICAgICBjbGFzc05hbWU6IENvbnN0YW50cy5jbGFzc2VzLkNPTlRST0xfQlVUVE9OX1BPTFlHT04sXG4gICAgICAgIHRpdGxlOiBgUG9seWdvbiB0b29sICR7Y3R4Lm9wdGlvbnMua2V5YmluZGluZ3MgPyAnKHApJyA6ICcnfWAsXG4gICAgICAgIG9uQWN0aXZhdGU6ICgpID0+IGN0eC5ldmVudHMuY2hhbmdlTW9kZShDb25zdGFudHMubW9kZXMuRFJBV19QT0xZR09OKSxcbiAgICAgICAgb25EZWFjdGl2YXRlOiAoKSA9PiBjdHguZXZlbnRzLnRyYXNoKClcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChjb250cm9sc1tDb25zdGFudHMudHlwZXMuUE9JTlRdKSB7XG4gICAgICBidXR0b25FbGVtZW50c1tDb25zdGFudHMudHlwZXMuUE9JTlRdID0gY3JlYXRlQ29udHJvbEJ1dHRvbihDb25zdGFudHMudHlwZXMuUE9JTlQsIHtcbiAgICAgICAgY29udGFpbmVyOiBjb250cm9sR3JvdXAsXG4gICAgICAgIGNsYXNzTmFtZTogQ29uc3RhbnRzLmNsYXNzZXMuQ09OVFJPTF9CVVRUT05fUE9JTlQsXG4gICAgICAgIHRpdGxlOiBgTWFya2VyIHRvb2wgJHtjdHgub3B0aW9ucy5rZXliaW5kaW5ncyA/ICcobSknIDogJyd9YCxcbiAgICAgICAgb25BY3RpdmF0ZTogKCkgPT4gY3R4LmV2ZW50cy5jaGFuZ2VNb2RlKENvbnN0YW50cy5tb2Rlcy5EUkFXX1BPSU5UKSxcbiAgICAgICAgb25EZWFjdGl2YXRlOiAoKSA9PiBjdHguZXZlbnRzLnRyYXNoKClcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChjb250cm9scy50cmFzaCkge1xuICAgICAgYnV0dG9uRWxlbWVudHMudHJhc2ggPSBjcmVhdGVDb250cm9sQnV0dG9uKCd0cmFzaCcsIHtcbiAgICAgICAgY29udGFpbmVyOiBjb250cm9sR3JvdXAsXG4gICAgICAgIGNsYXNzTmFtZTogQ29uc3RhbnRzLmNsYXNzZXMuQ09OVFJPTF9CVVRUT05fVFJBU0gsXG4gICAgICAgIHRpdGxlOiAnRGVsZXRlJyxcbiAgICAgICAgb25BY3RpdmF0ZTogKCkgPT4ge1xuICAgICAgICAgIGN0eC5ldmVudHMudHJhc2goKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRyb2xzLmNvbWJpbmVfZmVhdHVyZXMpIHtcbiAgICAgIGJ1dHRvbkVsZW1lbnRzLmNvbWJpbmVfZmVhdHVyZXMgPSBjcmVhdGVDb250cm9sQnV0dG9uKCdjb21iaW5lRmVhdHVyZXMnLCB7XG4gICAgICAgIGNvbnRhaW5lcjogY29udHJvbEdyb3VwLFxuICAgICAgICBjbGFzc05hbWU6IENvbnN0YW50cy5jbGFzc2VzLkNPTlRST0xfQlVUVE9OX0NPTUJJTkVfRkVBVFVSRVMsXG4gICAgICAgIHRpdGxlOiAnQ29tYmluZScsXG4gICAgICAgIG9uQWN0aXZhdGU6ICgpID0+IHtcbiAgICAgICAgICBjdHguZXZlbnRzLmNvbWJpbmVGZWF0dXJlcygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoY29udHJvbHMudW5jb21iaW5lX2ZlYXR1cmVzKSB7XG4gICAgICBidXR0b25FbGVtZW50cy51bmNvbWJpbmVfZmVhdHVyZXMgPSBjcmVhdGVDb250cm9sQnV0dG9uKCd1bmNvbWJpbmVGZWF0dXJlcycsIHtcbiAgICAgICAgY29udGFpbmVyOiBjb250cm9sR3JvdXAsXG4gICAgICAgIGNsYXNzTmFtZTogQ29uc3RhbnRzLmNsYXNzZXMuQ09OVFJPTF9CVVRUT05fVU5DT01CSU5FX0ZFQVRVUkVTLFxuICAgICAgICB0aXRsZTogJ1VuY29tYmluZScsXG4gICAgICAgIG9uQWN0aXZhdGU6ICgpID0+IHtcbiAgICAgICAgICBjdHguZXZlbnRzLnVuY29tYmluZUZlYXR1cmVzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjb250cm9sR3JvdXA7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVCdXR0b25zKCkge1xuICAgIE9iamVjdC5rZXlzKGJ1dHRvbkVsZW1lbnRzKS5mb3JFYWNoKChidXR0b25JZCkgPT4ge1xuICAgICAgY29uc3QgYnV0dG9uID0gYnV0dG9uRWxlbWVudHNbYnV0dG9uSWRdO1xuICAgICAgaWYgKGJ1dHRvbi5wYXJlbnROb2RlKSB7XG4gICAgICAgIGJ1dHRvbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGJ1dHRvbik7XG4gICAgICB9XG4gICAgICBkZWxldGUgYnV0dG9uRWxlbWVudHNbYnV0dG9uSWRdO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRBY3RpdmVCdXR0b24sXG4gICAgcXVldWVNYXBDbGFzc2VzLFxuICAgIHVwZGF0ZU1hcENsYXNzZXMsXG4gICAgY2xlYXJNYXBDbGFzc2VzLFxuICAgIGFkZEJ1dHRvbnMsXG4gICAgcmVtb3ZlQnV0dG9uc1xuICB9O1xufVxuIiwiaW1wb3J0IGV2ZW50cyBmcm9tICcuL2V2ZW50cy5qcyc7XG5pbXBvcnQgU3RvcmUgZnJvbSAnLi9zdG9yZS5qcyc7XG5pbXBvcnQgdWkgZnJvbSAnLi91aS5qcyc7XG5pbXBvcnQgKiBhcyBDb25zdGFudHMgZnJvbSAnLi9jb25zdGFudHMuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjdHgpIHtcblxuICBsZXQgY29udHJvbENvbnRhaW5lciA9IG51bGw7XG4gIGxldCBtYXBMb2FkZWRJbnRlcnZhbCA9IG51bGw7XG5cbiAgY29uc3Qgc2V0dXAgPSB7XG4gICAgb25SZW1vdmUoKSB7XG4gICAgICAvLyBTdG9wIGNvbm5lY3QgYXR0ZW1wdCBpbiB0aGUgZXZlbnQgdGhhdCBjb250cm9sIGlzIHJlbW92ZWQgYmVmb3JlIG1hcCBpcyBsb2FkZWRcbiAgICAgIGN0eC5tYXAub2ZmKCdsb2FkJywgc2V0dXAuY29ubmVjdCk7XG4gICAgICBjbGVhckludGVydmFsKG1hcExvYWRlZEludGVydmFsKTtcblxuICAgICAgc2V0dXAucmVtb3ZlTGF5ZXJzKCk7XG4gICAgICBjdHguc3RvcmUucmVzdG9yZU1hcENvbmZpZygpO1xuICAgICAgY3R4LnVpLnJlbW92ZUJ1dHRvbnMoKTtcbiAgICAgIGN0eC5ldmVudHMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgIGN0eC51aS5jbGVhck1hcENsYXNzZXMoKTtcbiAgICAgIGlmIChjdHguYm94Wm9vbUluaXRpYWwpIGN0eC5tYXAuYm94Wm9vbS5lbmFibGUoKTtcbiAgICAgIGN0eC5tYXAgPSBudWxsO1xuICAgICAgY3R4LmNvbnRhaW5lciA9IG51bGw7XG4gICAgICBjdHguc3RvcmUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udHJvbENvbnRhaW5lciAmJiBjb250cm9sQ29udGFpbmVyLnBhcmVudE5vZGUpIGNvbnRyb2xDb250YWluZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjb250cm9sQ29udGFpbmVyKTtcbiAgICAgIGNvbnRyb2xDb250YWluZXIgPSBudWxsO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGNvbm5lY3QoKSB7XG4gICAgICBjdHgubWFwLm9mZignbG9hZCcsIHNldHVwLmNvbm5lY3QpO1xuICAgICAgY2xlYXJJbnRlcnZhbChtYXBMb2FkZWRJbnRlcnZhbCk7XG4gICAgICBzZXR1cC5hZGRMYXllcnMoKTtcbiAgICAgIGN0eC5zdG9yZS5zdG9yZU1hcENvbmZpZygpO1xuICAgICAgY3R4LmV2ZW50cy5hZGRFdmVudExpc3RlbmVycygpO1xuICAgIH0sXG4gICAgb25BZGQobWFwKSB7XG4gICAgICBjdHgubWFwID0gbWFwO1xuICAgICAgY3R4LmV2ZW50cyA9IGV2ZW50cyhjdHgpO1xuICAgICAgY3R4LnVpID0gdWkoY3R4KTtcbiAgICAgIGN0eC5jb250YWluZXIgPSBtYXAuZ2V0Q29udGFpbmVyKCk7XG4gICAgICBjdHguc3RvcmUgPSBuZXcgU3RvcmUoY3R4KTtcblxuXG4gICAgICBjb250cm9sQ29udGFpbmVyID0gY3R4LnVpLmFkZEJ1dHRvbnMoKTtcblxuICAgICAgaWYgKGN0eC5vcHRpb25zLmJveFNlbGVjdCkge1xuICAgICAgICBjdHguYm94Wm9vbUluaXRpYWwgPSBtYXAuYm94Wm9vbS5pc0VuYWJsZWQoKTtcbiAgICAgICAgbWFwLmJveFpvb20uZGlzYWJsZSgpO1xuICAgICAgICBjb25zdCBkcmFnUGFuSXNFbmFibGVkID0gbWFwLmRyYWdQYW4uaXNFbmFibGVkKCk7XG4gICAgICAgIC8vIE5lZWQgdG8gdG9nZ2xlIGRyYWdQYW4gb24gYW5kIG9mZiBvciBlbHNlIGZpcnN0XG4gICAgICAgIC8vIGRyYWdQYW4gZGlzYWJsZSBhdHRlbXB0IGluIHNpbXBsZV9zZWxlY3QgZG9lc24ndCB3b3JrXG4gICAgICAgIG1hcC5kcmFnUGFuLmRpc2FibGUoKTtcbiAgICAgICAgbWFwLmRyYWdQYW4uZW5hYmxlKCk7XG4gICAgICAgIGlmICghZHJhZ1BhbklzRW5hYmxlZCkge1xuICAgICAgICAgIG1hcC5kcmFnUGFuLmRpc2FibGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWFwLmxvYWRlZCgpKSB7XG4gICAgICAgIHNldHVwLmNvbm5lY3QoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hcC5vbignbG9hZCcsIHNldHVwLmNvbm5lY3QpO1xuICAgICAgICBtYXBMb2FkZWRJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHsgaWYgKG1hcC5sb2FkZWQoKSkgc2V0dXAuY29ubmVjdCgpOyB9LCAxNik7XG4gICAgICB9XG5cbiAgICAgIGN0eC5ldmVudHMuc3RhcnQoKTtcbiAgICAgIHJldHVybiBjb250cm9sQ29udGFpbmVyO1xuICAgIH0sXG4gICAgYWRkTGF5ZXJzKCkge1xuICAgICAgLy8gZHJhd24gZmVhdHVyZXMgc3R5bGVcbiAgICAgIGN0eC5tYXAuYWRkU291cmNlKENvbnN0YW50cy5zb3VyY2VzLkNPTEQsIHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHR5cGU6IENvbnN0YW50cy5nZW9qc29uVHlwZXMuRkVBVFVSRV9DT0xMRUNUSU9OLFxuICAgICAgICAgIGZlYXR1cmVzOiBbXVxuICAgICAgICB9LFxuICAgICAgICB0eXBlOiAnZ2VvanNvbidcbiAgICAgIH0pO1xuXG4gICAgICAvLyBob3QgZmVhdHVyZXMgc3R5bGVcbiAgICAgIGN0eC5tYXAuYWRkU291cmNlKENvbnN0YW50cy5zb3VyY2VzLkhPVCwge1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgdHlwZTogQ29uc3RhbnRzLmdlb2pzb25UeXBlcy5GRUFUVVJFX0NPTExFQ1RJT04sXG4gICAgICAgICAgZmVhdHVyZXM6IFtdXG4gICAgICAgIH0sXG4gICAgICAgIHR5cGU6ICdnZW9qc29uJ1xuICAgICAgfSk7XG5cbiAgICAgIGN0eC5vcHRpb25zLnN0eWxlcy5mb3JFYWNoKChzdHlsZSkgPT4ge1xuICAgICAgICBjdHgubWFwLmFkZExheWVyKHN0eWxlKTtcbiAgICAgIH0pO1xuXG4gICAgICBjdHguc3RvcmUuc2V0RGlydHkodHJ1ZSk7XG4gICAgICBjdHguc3RvcmUucmVuZGVyKCk7XG4gICAgfSxcbiAgICAvLyBDaGVjayBmb3IgbGF5ZXJzIGFuZCBzb3VyY2VzIGJlZm9yZSBhdHRlbXB0aW5nIHRvIHJlbW92ZVxuICAgIC8vIElmIHVzZXIgYWRkcyBkcmF3IGNvbnRyb2wgYW5kIHJlbW92ZXMgaXQgYmVmb3JlIHRoZSBtYXAgaXMgbG9hZGVkLCBsYXllcnMgYW5kIHNvdXJjZXMgd2lsbCBiZSBtaXNzaW5nXG4gICAgcmVtb3ZlTGF5ZXJzKCkge1xuICAgICAgY3R4Lm9wdGlvbnMuc3R5bGVzLmZvckVhY2goKHN0eWxlKSA9PiB7XG4gICAgICAgIGlmIChjdHgubWFwLmdldExheWVyKHN0eWxlLmlkKSkge1xuICAgICAgICAgIGN0eC5tYXAucmVtb3ZlTGF5ZXIoc3R5bGUuaWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGN0eC5tYXAuZ2V0U291cmNlKENvbnN0YW50cy5zb3VyY2VzLkNPTEQpKSB7XG4gICAgICAgIGN0eC5tYXAucmVtb3ZlU291cmNlKENvbnN0YW50cy5zb3VyY2VzLkNPTEQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3R4Lm1hcC5nZXRTb3VyY2UoQ29uc3RhbnRzLnNvdXJjZXMuSE9UKSkge1xuICAgICAgICBjdHgubWFwLnJlbW92ZVNvdXJjZShDb25zdGFudHMuc291cmNlcy5IT1QpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjdHguc2V0dXAgPSBzZXR1cDtcblxuICByZXR1cm4gc2V0dXA7XG59XG4iLCJpbXBvcnQgc2V0dXBNb2RlSGFuZGxlciBmcm9tICcuL2xpYi9tb2RlX2hhbmRsZXIuanMnO1xuaW1wb3J0IGdldEZlYXR1cmVzQW5kU2V0Q3Vyc29yIGZyb20gJy4vbGliL2dldF9mZWF0dXJlc19hbmRfc2V0X2N1cnNvci5qcyc7XG5pbXBvcnQgZmVhdHVyZXNBdCBmcm9tICcuL2xpYi9mZWF0dXJlc19hdC5qcyc7XG5pbXBvcnQgaXNDbGljayBmcm9tICcuL2xpYi9pc19jbGljay5qcyc7XG5pbXBvcnQgaXNUYXAgZnJvbSAnLi9saWIvaXNfdGFwLmpzJztcbmltcG9ydCAqIGFzIENvbnN0YW50cyBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgb2JqZWN0VG9Nb2RlIGZyb20gJy4vbW9kZXMvb2JqZWN0X3RvX21vZGUuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjdHgpIHtcblxuICBjb25zdCBtb2RlcyA9IE9iamVjdC5rZXlzKGN0eC5vcHRpb25zLm1vZGVzKS5yZWR1Y2UoKG0sIGspID0+IHtcbiAgICBtW2tdID0gb2JqZWN0VG9Nb2RlKGN0eC5vcHRpb25zLm1vZGVzW2tdKTtcbiAgICByZXR1cm4gbTtcbiAgfSwge30pO1xuXG4gIGxldCBtb3VzZURvd25JbmZvID0ge307XG4gIGxldCB0b3VjaFN0YXJ0SW5mbyA9IHt9O1xuICBjb25zdCBldmVudHMgPSB7fTtcbiAgbGV0IGN1cnJlbnRNb2RlTmFtZSA9IG51bGw7XG4gIGxldCBjdXJyZW50TW9kZSA9IG51bGw7XG5cbiAgZXZlbnRzLmRyYWcgPSBmdW5jdGlvbihldmVudCwgaXNEcmFnKSB7XG4gICAgaWYgKGlzRHJhZyh7XG4gICAgICBwb2ludDogZXZlbnQucG9pbnQsXG4gICAgICB0aW1lOiBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgIH0pKSB7XG4gICAgICBjdHgudWkucXVldWVNYXBDbGFzc2VzKHsgbW91c2U6IENvbnN0YW50cy5jdXJzb3JzLkRSQUcgfSk7XG4gICAgICBjdXJyZW50TW9kZS5kcmFnKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH07XG5cbiAgZXZlbnRzLm1vdXNlZHJhZyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgZXZlbnRzLmRyYWcoZXZlbnQsIGVuZEluZm8gPT4gIWlzQ2xpY2sobW91c2VEb3duSW5mbywgZW5kSW5mbykpO1xuICB9O1xuXG4gIGV2ZW50cy50b3VjaGRyYWcgPSBmdW5jdGlvbihldmVudCkge1xuICAgIGV2ZW50cy5kcmFnKGV2ZW50LCBlbmRJbmZvID0+ICFpc1RhcCh0b3VjaFN0YXJ0SW5mbywgZW5kSW5mbykpO1xuICB9O1xuXG4gIGV2ZW50cy5tb3VzZW1vdmUgPSBmdW5jdGlvbihldmVudCkge1xuICAgIGNvbnN0IGJ1dHRvbiA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQuYnV0dG9ucyAhPT0gdW5kZWZpbmVkID8gZXZlbnQub3JpZ2luYWxFdmVudC5idXR0b25zIDogZXZlbnQub3JpZ2luYWxFdmVudC53aGljaDtcbiAgICBpZiAoYnV0dG9uID09PSAxKSB7XG4gICAgICByZXR1cm4gZXZlbnRzLm1vdXNlZHJhZyhldmVudCk7XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldCA9IGdldEZlYXR1cmVzQW5kU2V0Q3Vyc29yKGV2ZW50LCBjdHgpO1xuICAgIGV2ZW50LmZlYXR1cmVUYXJnZXQgPSB0YXJnZXQ7XG4gICAgY3VycmVudE1vZGUubW91c2Vtb3ZlKGV2ZW50KTtcbiAgfTtcblxuICBldmVudHMubW91c2Vkb3duID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBtb3VzZURvd25JbmZvID0ge1xuICAgICAgdGltZTogbmV3IERhdGUoKS5nZXRUaW1lKCksXG4gICAgICBwb2ludDogZXZlbnQucG9pbnRcbiAgICB9O1xuICAgIGNvbnN0IHRhcmdldCA9IGdldEZlYXR1cmVzQW5kU2V0Q3Vyc29yKGV2ZW50LCBjdHgpO1xuICAgIGV2ZW50LmZlYXR1cmVUYXJnZXQgPSB0YXJnZXQ7XG4gICAgY3VycmVudE1vZGUubW91c2Vkb3duKGV2ZW50KTtcbiAgfTtcblxuICBldmVudHMubW91c2V1cCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZ2V0RmVhdHVyZXNBbmRTZXRDdXJzb3IoZXZlbnQsIGN0eCk7XG4gICAgZXZlbnQuZmVhdHVyZVRhcmdldCA9IHRhcmdldDtcblxuICAgIGlmIChpc0NsaWNrKG1vdXNlRG93bkluZm8sIHtcbiAgICAgIHBvaW50OiBldmVudC5wb2ludCxcbiAgICAgIHRpbWU6IG5ldyBEYXRlKCkuZ2V0VGltZSgpXG4gICAgfSkpIHtcbiAgICAgIGN1cnJlbnRNb2RlLmNsaWNrKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudE1vZGUubW91c2V1cChldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIGV2ZW50cy5tb3VzZW91dCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgY3VycmVudE1vZGUubW91c2VvdXQoZXZlbnQpO1xuICB9O1xuXG4gIGV2ZW50cy50b3VjaHN0YXJ0ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBpZiAoIWN0eC5vcHRpb25zLnRvdWNoRW5hYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRvdWNoU3RhcnRJbmZvID0ge1xuICAgICAgdGltZTogbmV3IERhdGUoKS5nZXRUaW1lKCksXG4gICAgICBwb2ludDogZXZlbnQucG9pbnRcbiAgICB9O1xuICAgIGNvbnN0IHRhcmdldCA9IGZlYXR1cmVzQXQudG91Y2goZXZlbnQsIG51bGwsIGN0eClbMF07XG4gICAgZXZlbnQuZmVhdHVyZVRhcmdldCA9IHRhcmdldDtcbiAgICBjdXJyZW50TW9kZS50b3VjaHN0YXJ0KGV2ZW50KTtcbiAgfTtcblxuICBldmVudHMudG91Y2htb3ZlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBpZiAoIWN0eC5vcHRpb25zLnRvdWNoRW5hYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGN1cnJlbnRNb2RlLnRvdWNobW92ZShldmVudCk7XG4gICAgcmV0dXJuIGV2ZW50cy50b3VjaGRyYWcoZXZlbnQpO1xuICB9O1xuXG4gIGV2ZW50cy50b3VjaGVuZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgLy8gUHJldmVudCBlbXVsYXRlZCBtb3VzZSBldmVudHMgYmVjYXVzZSB3ZSB3aWxsIGZ1bGx5IGhhbmRsZSB0aGUgdG91Y2ggaGVyZS5cbiAgICAvLyBUaGlzIGRvZXMgbm90IHN0b3AgdGhlIHRvdWNoIGV2ZW50cyBmcm9tIHByb3BvZ2F0aW5nIHRvIG1hcGJveCB0aG91Z2guXG4gICAgZXZlbnQub3JpZ2luYWxFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICghY3R4Lm9wdGlvbnMudG91Y2hFbmFibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdGFyZ2V0ID0gZmVhdHVyZXNBdC50b3VjaChldmVudCwgbnVsbCwgY3R4KVswXTtcbiAgICBldmVudC5mZWF0dXJlVGFyZ2V0ID0gdGFyZ2V0O1xuICAgIGlmIChpc1RhcCh0b3VjaFN0YXJ0SW5mbywge1xuICAgICAgdGltZTogbmV3IERhdGUoKS5nZXRUaW1lKCksXG4gICAgICBwb2ludDogZXZlbnQucG9pbnRcbiAgICB9KSkge1xuICAgICAgY3VycmVudE1vZGUudGFwKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudE1vZGUudG91Y2hlbmQoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICAvLyA4IC0gQmFja3NwYWNlXG4gIC8vIDQ2IC0gRGVsZXRlXG4gIGNvbnN0IGlzS2V5TW9kZVZhbGlkID0gY29kZSA9PiAhKGNvZGUgPT09IDggfHwgY29kZSA9PT0gNDYgfHwgKGNvZGUgPj0gNDggJiYgY29kZSA8PSA1NykpO1xuXG4gIGV2ZW50cy5rZXlkb3duID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBjb25zdCBpc01hcEVsZW1lbnQgPSAoZXZlbnQuc3JjRWxlbWVudCB8fCBldmVudC50YXJnZXQpLmNsYXNzTGlzdC5jb250YWlucyhDb25zdGFudHMuY2xhc3Nlcy5DQU5WQVMpO1xuICAgIGlmICghaXNNYXBFbGVtZW50KSByZXR1cm47IC8vIHdlIG9ubHkgaGFuZGxlIGV2ZW50cyBvbiB0aGUgbWFwXG5cbiAgICBpZiAoKGV2ZW50LmtleUNvZGUgPT09IDggfHwgZXZlbnQua2V5Q29kZSA9PT0gNDYpICYmIGN0eC5vcHRpb25zLmNvbnRyb2xzLnRyYXNoKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY3VycmVudE1vZGUudHJhc2goKTtcbiAgICB9IGVsc2UgaWYgKGlzS2V5TW9kZVZhbGlkKGV2ZW50LmtleUNvZGUpKSB7XG4gICAgICBjdXJyZW50TW9kZS5rZXlkb3duKGV2ZW50KTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IDQ5ICYmIGN0eC5vcHRpb25zLmNvbnRyb2xzLnBvaW50KSB7XG4gICAgICBjaGFuZ2VNb2RlKENvbnN0YW50cy5tb2Rlcy5EUkFXX1BPSU5UKTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IDUwICYmIGN0eC5vcHRpb25zLmNvbnRyb2xzLmxpbmVfc3RyaW5nKSB7XG4gICAgICBjaGFuZ2VNb2RlKENvbnN0YW50cy5tb2Rlcy5EUkFXX0xJTkVfU1RSSU5HKTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IDUxICYmIGN0eC5vcHRpb25zLmNvbnRyb2xzLnBvbHlnb24pIHtcbiAgICAgIGNoYW5nZU1vZGUoQ29uc3RhbnRzLm1vZGVzLkRSQVdfUE9MWUdPTik7XG4gICAgfVxuICB9O1xuXG4gIGV2ZW50cy5rZXl1cCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKGlzS2V5TW9kZVZhbGlkKGV2ZW50LmtleUNvZGUpKSB7XG4gICAgICBjdXJyZW50TW9kZS5rZXl1cChldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIGV2ZW50cy56b29tZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgY3R4LnN0b3JlLmNoYW5nZVpvb20oKTtcbiAgfTtcblxuICBldmVudHMuZGF0YSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmRhdGFUeXBlID09PSAnc3R5bGUnKSB7XG4gICAgICBjb25zdCB7IHNldHVwLCBtYXAsIG9wdGlvbnMsIHN0b3JlIH0gPSBjdHg7XG4gICAgICBjb25zdCBoYXNMYXllcnMgPSBvcHRpb25zLnN0eWxlcy5zb21lKHN0eWxlID0+IG1hcC5nZXRMYXllcihzdHlsZS5pZCkpO1xuICAgICAgaWYgKCFoYXNMYXllcnMpIHtcbiAgICAgICAgc2V0dXAuYWRkTGF5ZXJzKCk7XG4gICAgICAgIHN0b3JlLnNldERpcnR5KCk7XG4gICAgICAgIHN0b3JlLnJlbmRlcigpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBjaGFuZ2VNb2RlKG1vZGVuYW1lLCBuZXh0TW9kZU9wdGlvbnMsIGV2ZW50T3B0aW9ucyA9IHt9KSB7XG4gICAgY3VycmVudE1vZGUuc3RvcCgpO1xuXG4gICAgY29uc3QgbW9kZWJ1aWxkZXIgPSBtb2Rlc1ttb2RlbmFtZV07XG4gICAgaWYgKG1vZGVidWlsZGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHttb2RlbmFtZX0gaXMgbm90IHZhbGlkYCk7XG4gICAgfVxuICAgIGN1cnJlbnRNb2RlTmFtZSA9IG1vZGVuYW1lO1xuICAgIGNvbnN0IG1vZGUgPSBtb2RlYnVpbGRlcihjdHgsIG5leHRNb2RlT3B0aW9ucyk7XG4gICAgY3VycmVudE1vZGUgPSBzZXR1cE1vZGVIYW5kbGVyKG1vZGUsIGN0eCk7XG5cbiAgICBpZiAoIWV2ZW50T3B0aW9ucy5zaWxlbnQpIHtcbiAgICAgIGN0eC5tYXAuZmlyZShDb25zdGFudHMuZXZlbnRzLk1PREVfQ0hBTkdFLCB7IG1vZGU6IG1vZGVuYW1lfSk7XG4gICAgfVxuXG4gICAgY3R4LnN0b3JlLnNldERpcnR5KCk7XG4gICAgY3R4LnN0b3JlLnJlbmRlcigpO1xuICB9XG5cbiAgY29uc3QgYWN0aW9uU3RhdGUgPSB7XG4gICAgdHJhc2g6IGZhbHNlLFxuICAgIGNvbWJpbmVGZWF0dXJlczogZmFsc2UsXG4gICAgdW5jb21iaW5lRmVhdHVyZXM6IGZhbHNlXG4gIH07XG5cbiAgZnVuY3Rpb24gYWN0aW9uYWJsZShhY3Rpb25zKSB7XG4gICAgbGV0IGNoYW5nZWQgPSBmYWxzZTtcbiAgICBPYmplY3Qua2V5cyhhY3Rpb25zKS5mb3JFYWNoKChhY3Rpb24pID0+IHtcbiAgICAgIGlmIChhY3Rpb25TdGF0ZVthY3Rpb25dID09PSB1bmRlZmluZWQpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhY3Rpb24gdHlwZScpO1xuICAgICAgaWYgKGFjdGlvblN0YXRlW2FjdGlvbl0gIT09IGFjdGlvbnNbYWN0aW9uXSkgY2hhbmdlZCA9IHRydWU7XG4gICAgICBhY3Rpb25TdGF0ZVthY3Rpb25dID0gYWN0aW9uc1thY3Rpb25dO1xuICAgIH0pO1xuICAgIGlmIChjaGFuZ2VkKSBjdHgubWFwLmZpcmUoQ29uc3RhbnRzLmV2ZW50cy5BQ1RJT05BQkxFLCB7IGFjdGlvbnM6IGFjdGlvblN0YXRlIH0pO1xuICB9XG5cbiAgY29uc3QgYXBpID0ge1xuICAgIHN0YXJ0KCkge1xuICAgICAgY3VycmVudE1vZGVOYW1lID0gY3R4Lm9wdGlvbnMuZGVmYXVsdE1vZGU7XG4gICAgICBjdXJyZW50TW9kZSA9IHNldHVwTW9kZUhhbmRsZXIobW9kZXNbY3VycmVudE1vZGVOYW1lXShjdHgpLCBjdHgpO1xuICAgIH0sXG4gICAgY2hhbmdlTW9kZSxcbiAgICBhY3Rpb25hYmxlLFxuICAgIGN1cnJlbnRNb2RlTmFtZSgpIHtcbiAgICAgIHJldHVybiBjdXJyZW50TW9kZU5hbWU7XG4gICAgfSxcbiAgICBjdXJyZW50TW9kZVJlbmRlcihnZW9qc29uLCBwdXNoKSB7XG4gICAgICByZXR1cm4gY3VycmVudE1vZGUucmVuZGVyKGdlb2pzb24sIHB1c2gpO1xuICAgIH0sXG4gICAgZmlyZShldmVudE5hbWUsIGV2ZW50RGF0YSkge1xuICAgICAgaWYgKCFjdHgubWFwKSByZXR1cm47XG4gICAgICBjdHgubWFwLmZpcmUoZXZlbnROYW1lLCBldmVudERhdGEpO1xuICAgIH0sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICBjdHgubWFwLm9uKCdtb3VzZW1vdmUnLCBldmVudHMubW91c2Vtb3ZlKTtcbiAgICAgIGN0eC5tYXAub24oJ21vdXNlZG93bicsIGV2ZW50cy5tb3VzZWRvd24pO1xuICAgICAgY3R4Lm1hcC5vbignbW91c2V1cCcsIGV2ZW50cy5tb3VzZXVwKTtcbiAgICAgIGN0eC5tYXAub24oJ2RhdGEnLCBldmVudHMuZGF0YSk7XG5cbiAgICAgIGN0eC5tYXAub24oJ3RvdWNobW92ZScsIGV2ZW50cy50b3VjaG1vdmUpO1xuICAgICAgY3R4Lm1hcC5vbigndG91Y2hzdGFydCcsIGV2ZW50cy50b3VjaHN0YXJ0KTtcbiAgICAgIGN0eC5tYXAub24oJ3RvdWNoZW5kJywgZXZlbnRzLnRvdWNoZW5kKTtcblxuICAgICAgY3R4LmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIGV2ZW50cy5tb3VzZW91dCk7XG5cbiAgICAgIGlmIChjdHgub3B0aW9ucy5rZXliaW5kaW5ncykge1xuICAgICAgICBjdHguY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBldmVudHMua2V5ZG93bik7XG4gICAgICAgIGN0eC5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBldmVudHMua2V5dXApO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICBjdHgubWFwLm9mZignbW91c2Vtb3ZlJywgZXZlbnRzLm1vdXNlbW92ZSk7XG4gICAgICBjdHgubWFwLm9mZignbW91c2Vkb3duJywgZXZlbnRzLm1vdXNlZG93bik7XG4gICAgICBjdHgubWFwLm9mZignbW91c2V1cCcsIGV2ZW50cy5tb3VzZXVwKTtcbiAgICAgIGN0eC5tYXAub2ZmKCdkYXRhJywgZXZlbnRzLmRhdGEpO1xuXG4gICAgICBjdHgubWFwLm9mZigndG91Y2htb3ZlJywgZXZlbnRzLnRvdWNobW92ZSk7XG4gICAgICBjdHgubWFwLm9mZigndG91Y2hzdGFydCcsIGV2ZW50cy50b3VjaHN0YXJ0KTtcbiAgICAgIGN0eC5tYXAub2ZmKCd0b3VjaGVuZCcsIGV2ZW50cy50b3VjaGVuZCk7XG5cbiAgICAgIGN0eC5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCBldmVudHMubW91c2VvdXQpO1xuXG4gICAgICBpZiAoY3R4Lm9wdGlvbnMua2V5YmluZGluZ3MpIHtcbiAgICAgICAgY3R4LmNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZXZlbnRzLmtleWRvd24pO1xuICAgICAgICBjdHguY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZXZlbnRzLmtleXVwKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRyYXNoKG9wdGlvbnMpIHtcbiAgICAgIGN1cnJlbnRNb2RlLnRyYXNoKG9wdGlvbnMpO1xuICAgIH0sXG4gICAgY29tYmluZUZlYXR1cmVzKCkge1xuICAgICAgY3VycmVudE1vZGUuY29tYmluZUZlYXR1cmVzKCk7XG4gICAgfSxcbiAgICB1bmNvbWJpbmVGZWF0dXJlcygpIHtcbiAgICAgIGN1cnJlbnRNb2RlLnVuY29tYmluZUZlYXR1cmVzKCk7XG4gICAgfSxcbiAgICBnZXRNb2RlKCkge1xuICAgICAgcmV0dXJuIGN1cnJlbnRNb2RlTmFtZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGFwaTtcbn1cbiIsIi8qIGVzbGludCBjb21tYS1kYW5nbGU6IFtcImVycm9yXCIsIFwiYWx3YXlzLW11bHRpbGluZVwiXSAqL1xuXG5jb25zdCBibHVlID0gJyMzYmIyZDAnO1xuY29uc3Qgb3JhbmdlID0gJyNmYmIwM2InO1xuY29uc3Qgd2hpdGUgPSAnI2ZmZic7XG5cbmV4cG9ydCBkZWZhdWx0IFtcbiAgLy8gUG9seWdvbnNcbiAgLy8gICBTb2xpZCBmaWxsXG4gIC8vICAgQWN0aXZlIHN0YXRlIGRlZmluZXMgY29sb3JcbiAge1xuICAgICdpZCc6ICdnbC1kcmF3LXBvbHlnb24tZmlsbCcsXG4gICAgJ3R5cGUnOiAnZmlsbCcsXG4gICAgJ2ZpbHRlcic6IFtcbiAgICAgICdhbGwnLFxuICAgICAgWyc9PScsICckdHlwZScsICdQb2x5Z29uJ10sXG4gICAgXSxcbiAgICAncGFpbnQnOiB7XG4gICAgICAnZmlsbC1jb2xvcic6IFtcbiAgICAgICAgJ2Nhc2UnLFxuICAgICAgICBbJz09JywgWydnZXQnLCAnYWN0aXZlJ10sICd0cnVlJ10sIG9yYW5nZSxcbiAgICAgICAgYmx1ZSxcbiAgICAgIF0sXG4gICAgICAnZmlsbC1vcGFjaXR5JzogMC4xLFxuICAgIH0sXG4gIH0sXG4gIC8vIExpbmVzXG4gIC8vIFBvbHlnb25cbiAgLy8gICBNYXRjaGVzIExpbmVzIEFORCBQb2x5Z29uc1xuICAvLyAgIEFjdGl2ZSBzdGF0ZSBkZWZpbmVzIGNvbG9yXG4gIHtcbiAgICAnaWQnOiAnZ2wtZHJhdy1saW5lcycsXG4gICAgJ3R5cGUnOiAnbGluZScsXG4gICAgJ2ZpbHRlcic6IFtcbiAgICAgICdhbnknLFxuICAgICAgWyc9PScsICckdHlwZScsICdMaW5lU3RyaW5nJ10sXG4gICAgICBbJz09JywgJyR0eXBlJywgJ1BvbHlnb24nXSxcbiAgICBdLFxuICAgICdsYXlvdXQnOiB7XG4gICAgICAnbGluZS1jYXAnOiAncm91bmQnLFxuICAgICAgJ2xpbmUtam9pbic6ICdyb3VuZCcsXG4gICAgfSxcbiAgICAncGFpbnQnOiB7XG4gICAgICAnbGluZS1jb2xvcic6IFtcbiAgICAgICAgJ2Nhc2UnLFxuICAgICAgICBbJz09JywgWydnZXQnLCAnYWN0aXZlJ10sICd0cnVlJ10sIG9yYW5nZSxcbiAgICAgICAgYmx1ZSxcbiAgICAgIF0sXG4gICAgICAnbGluZS1kYXNoYXJyYXknOiBbXG4gICAgICAgICdjYXNlJyxcbiAgICAgICAgWyc9PScsIFsnZ2V0JywgJ2FjdGl2ZSddLCAndHJ1ZSddLCBbMC4yLCAyXSxcbiAgICAgICAgWzIsIDBdLFxuICAgICAgXSxcbiAgICAgICdsaW5lLXdpZHRoJzogMixcbiAgICB9LFxuICB9LFxuICAvLyBQb2ludHNcbiAgLy8gICBDaXJjbGUgd2l0aCBhbiBvdXRsaW5lXG4gIC8vICAgQWN0aXZlIHN0YXRlIGRlZmluZXMgc2l6ZSBhbmQgY29sb3JcbiAge1xuICAgICdpZCc6ICdnbC1kcmF3LXBvaW50LW91dGVyJyxcbiAgICAndHlwZSc6ICdjaXJjbGUnLFxuICAgICdmaWx0ZXInOiBbXG4gICAgICAnYWxsJyxcbiAgICAgIFsnPT0nLCAnJHR5cGUnLCAnUG9pbnQnXSxcbiAgICAgIFsnPT0nLCAnbWV0YScsICdmZWF0dXJlJ10sXG4gICAgXSxcbiAgICAncGFpbnQnOiB7XG4gICAgICAnY2lyY2xlLXJhZGl1cyc6IFtcbiAgICAgICAgJ2Nhc2UnLFxuICAgICAgICBbJz09JywgWydnZXQnLCAnYWN0aXZlJ10sICd0cnVlJ10sIDcsXG4gICAgICAgIDUsXG4gICAgICBdLFxuICAgICAgJ2NpcmNsZS1jb2xvcic6IHdoaXRlLFxuICAgIH0sXG4gIH0sXG4gIHtcbiAgICAnaWQnOiAnZ2wtZHJhdy1wb2ludC1pbm5lcicsXG4gICAgJ3R5cGUnOiAnY2lyY2xlJyxcbiAgICAnZmlsdGVyJzogW1xuICAgICAgJ2FsbCcsXG4gICAgICBbJz09JywgJyR0eXBlJywgJ1BvaW50J10sXG4gICAgICBbJz09JywgJ21ldGEnLCAnZmVhdHVyZSddLFxuICAgIF0sXG4gICAgJ3BhaW50Jzoge1xuICAgICAgJ2NpcmNsZS1yYWRpdXMnOiBbXG4gICAgICAgICdjYXNlJyxcbiAgICAgICAgWyc9PScsIFsnZ2V0JywgJ2FjdGl2ZSddLCAndHJ1ZSddLCA1LFxuICAgICAgICAzLFxuICAgICAgXSxcbiAgICAgICdjaXJjbGUtY29sb3InOiBbXG4gICAgICAgICdjYXNlJyxcbiAgICAgICAgWyc9PScsIFsnZ2V0JywgJ2FjdGl2ZSddLCAndHJ1ZSddLCBvcmFuZ2UsXG4gICAgICAgIGJsdWUsXG4gICAgICBdLFxuICAgIH0sXG4gIH0sXG4gIC8vIFZlcnRleFxuICAvLyAgIFZpc2libGUgd2hlbiBlZGl0aW5nIHBvbHlnb25zIGFuZCBsaW5lc1xuICAvLyAgIFNpbWlsYXIgYmVoYXZpb3VyIHRvIFBvaW50c1xuICAvLyAgIEFjdGl2ZSBzdGF0ZSBkZWZpbmVzIHNpemVcbiAge1xuICAgICdpZCc6ICdnbC1kcmF3LXZlcnRleC1vdXRlcicsXG4gICAgJ3R5cGUnOiAnY2lyY2xlJyxcbiAgICAnZmlsdGVyJzogW1xuICAgICAgJ2FsbCcsXG4gICAgICBbJz09JywgJyR0eXBlJywgJ1BvaW50J10sXG4gICAgICBbJz09JywgJ21ldGEnLCAndmVydGV4J10sXG4gICAgICBbJyE9JywgJ21vZGUnLCAnc2ltcGxlX3NlbGVjdCddLFxuICAgIF0sXG4gICAgJ3BhaW50Jzoge1xuICAgICAgJ2NpcmNsZS1yYWRpdXMnOiBbXG4gICAgICAgICdjYXNlJyxcbiAgICAgICAgWyc9PScsIFsnZ2V0JywgJ2FjdGl2ZSddLCAndHJ1ZSddLCA3LFxuICAgICAgICA1LFxuICAgICAgXSxcbiAgICAgICdjaXJjbGUtY29sb3InOiB3aGl0ZSxcbiAgICB9LFxuICB9LFxuICB7XG4gICAgJ2lkJzogJ2dsLWRyYXctdmVydGV4LWlubmVyJyxcbiAgICAndHlwZSc6ICdjaXJjbGUnLFxuICAgICdmaWx0ZXInOiBbXG4gICAgICAnYWxsJyxcbiAgICAgIFsnPT0nLCAnJHR5cGUnLCAnUG9pbnQnXSxcbiAgICAgIFsnPT0nLCAnbWV0YScsICd2ZXJ0ZXgnXSxcbiAgICAgIFsnIT0nLCAnbW9kZScsICdzaW1wbGVfc2VsZWN0J10sXG4gICAgXSxcbiAgICAncGFpbnQnOiB7XG4gICAgICAnY2lyY2xlLXJhZGl1cyc6IFtcbiAgICAgICAgJ2Nhc2UnLFxuICAgICAgICBbJz09JywgWydnZXQnLCAnYWN0aXZlJ10sICd0cnVlJ10sIDUsXG4gICAgICAgIDMsXG4gICAgICBdLFxuICAgICAgJ2NpcmNsZS1jb2xvcic6IG9yYW5nZSxcbiAgICB9LFxuICB9LFxuICAvLyBNaWRwb2ludFxuICAvLyAgIFZpc2libGUgd2hlbiBlZGl0aW5nIHBvbHlnb25zIGFuZCBsaW5lc1xuICAvLyAgIFRhcHBpbmcgb3IgZHJhZ2dpbmcgdGhlbSBhZGRzIGEgbmV3IHZlcnRleCB0byB0aGUgZmVhdHVyZVxuICB7XG4gICAgJ2lkJzogJ2dsLWRyYXctbWlkcG9pbnQnLFxuICAgICd0eXBlJzogJ2NpcmNsZScsXG4gICAgJ2ZpbHRlcic6IFtcbiAgICAgICdhbGwnLFxuICAgICAgWyc9PScsICdtZXRhJywgJ21pZHBvaW50J10sXG4gICAgXSxcbiAgICAncGFpbnQnOiB7XG4gICAgICAnY2lyY2xlLXJhZGl1cyc6IDMsXG4gICAgICAnY2lyY2xlLWNvbG9yJzogb3JhbmdlLFxuICAgIH0sXG4gIH0sXG5dO1xuIiwiaW1wb3J0ICogYXMgQ29uc3RhbnRzIGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09mTWV0YVR5cGUodHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgIGNvbnN0IGZlYXR1cmVUYXJnZXQgPSBlLmZlYXR1cmVUYXJnZXQ7XG4gICAgaWYgKCFmZWF0dXJlVGFyZ2V0KSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCFmZWF0dXJlVGFyZ2V0LnByb3BlcnRpZXMpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gZmVhdHVyZVRhcmdldC5wcm9wZXJ0aWVzLm1ldGEgPT09IHR5cGU7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NoaWZ0TW91c2Vkb3duKGUpIHtcbiAgaWYgKCFlLm9yaWdpbmFsRXZlbnQpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFlLm9yaWdpbmFsRXZlbnQuc2hpZnRLZXkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIGUub3JpZ2luYWxFdmVudC5idXR0b24gPT09IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0FjdGl2ZUZlYXR1cmUoZSkge1xuICBpZiAoIWUuZmVhdHVyZVRhcmdldCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoIWUuZmVhdHVyZVRhcmdldC5wcm9wZXJ0aWVzKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBlLmZlYXR1cmVUYXJnZXQucHJvcGVydGllcy5hY3RpdmUgPT09IENvbnN0YW50cy5hY3RpdmVTdGF0ZXMuQUNUSVZFICYmXG4gICAgZS5mZWF0dXJlVGFyZ2V0LnByb3BlcnRpZXMubWV0YSA9PT0gQ29uc3RhbnRzLm1ldGEuRkVBVFVSRTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSW5hY3RpdmVGZWF0dXJlKGUpIHtcbiAgaWYgKCFlLmZlYXR1cmVUYXJnZXQpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFlLmZlYXR1cmVUYXJnZXQucHJvcGVydGllcykgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gZS5mZWF0dXJlVGFyZ2V0LnByb3BlcnRpZXMuYWN0aXZlID09PSBDb25zdGFudHMuYWN0aXZlU3RhdGVzLklOQUNUSVZFICYmXG4gICAgZS5mZWF0dXJlVGFyZ2V0LnByb3BlcnRpZXMubWV0YSA9PT0gQ29uc3RhbnRzLm1ldGEuRkVBVFVSRTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vVGFyZ2V0KGUpIHtcbiAgcmV0dXJuIGUuZmVhdHVyZVRhcmdldCA9PT0gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGZWF0dXJlKGUpIHtcbiAgaWYgKCFlLmZlYXR1cmVUYXJnZXQpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFlLmZlYXR1cmVUYXJnZXQucHJvcGVydGllcykgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gZS5mZWF0dXJlVGFyZ2V0LnByb3BlcnRpZXMubWV0YSA9PT0gQ29uc3RhbnRzLm1ldGEuRkVBVFVSRTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmVydGV4KGUpIHtcbiAgY29uc3QgZmVhdHVyZVRhcmdldCA9IGUuZmVhdHVyZVRhcmdldDtcbiAgaWYgKCFmZWF0dXJlVGFyZ2V0KSByZXR1cm4gZmFsc2U7XG4gIGlmICghZmVhdHVyZVRhcmdldC5wcm9wZXJ0aWVzKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBmZWF0dXJlVGFyZ2V0LnByb3BlcnRpZXMubWV0YSA9PT0gQ29uc3RhbnRzLm1ldGEuVkVSVEVYO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTaGlmdERvd24oZSkge1xuICBpZiAoIWUub3JpZ2luYWxFdmVudCkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gZS5vcmlnaW5hbEV2ZW50LnNoaWZ0S2V5ID09PSB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFc2NhcGVLZXkoZSkge1xuICByZXR1cm4gZS5rZXlDb2RlID09PSAyNztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW50ZXJLZXkoZSkge1xuICByZXR1cm4gZS5rZXlDb2RlID09PSAxMztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVHJ1ZSgpIHtcbiAgcmV0dXJuIHRydWU7XG59XG4iLCIvKipcbiAqIEEgc3RhbmRhbG9uZSBwb2ludCBnZW9tZXRyeSB3aXRoIHVzZWZ1bCBhY2Nlc3NvciwgY29tcGFyaXNvbiwgYW5kXG4gKiBtb2RpZmljYXRpb24gbWV0aG9kcy5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IHRoZSB4LWNvb3JkaW5hdGUuIFRoaXMgY291bGQgYmUgbG9uZ2l0dWRlIG9yIHNjcmVlbiBwaXhlbHMsIG9yIGFueSBvdGhlciBzb3J0IG9mIHVuaXQuXG4gKiBAcGFyYW0ge251bWJlcn0geSB0aGUgeS1jb29yZGluYXRlLiBUaGlzIGNvdWxkIGJlIGxhdGl0dWRlIG9yIHNjcmVlbiBwaXhlbHMsIG9yIGFueSBvdGhlciBzb3J0IG9mIHVuaXQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHBvaW50ID0gbmV3IFBvaW50KC03NywgMzgpO1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQb2ludCh4LCB5KSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xufVxuXG5Qb2ludC5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogQ2xvbmUgdGhpcyBwb2ludCwgcmV0dXJuaW5nIGEgbmV3IHBvaW50IHRoYXQgY2FuIGJlIG1vZGlmaWVkXG4gICAgICogd2l0aG91dCBhZmZlY3RpbmcgdGhlIG9sZCBvbmUuXG4gICAgICogQHJldHVybiB7UG9pbnR9IHRoZSBjbG9uZVxuICAgICAqL1xuICAgIGNsb25lKCkgeyByZXR1cm4gbmV3IFBvaW50KHRoaXMueCwgdGhpcy55KTsgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGlzIHBvaW50J3MgeCAmIHkgY29vcmRpbmF0ZXMgdG8gYW5vdGhlciBwb2ludCxcbiAgICAgKiB5aWVsZGluZyBhIG5ldyBwb2ludC5cbiAgICAgKiBAcGFyYW0ge1BvaW50fSBwIHRoZSBvdGhlciBwb2ludFxuICAgICAqIEByZXR1cm4ge1BvaW50fSBvdXRwdXQgcG9pbnRcbiAgICAgKi9cbiAgICBhZGQocCkgeyByZXR1cm4gdGhpcy5jbG9uZSgpLl9hZGQocCk7IH0sXG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdCB0aGlzIHBvaW50J3MgeCAmIHkgY29vcmRpbmF0ZXMgdG8gZnJvbSBwb2ludCxcbiAgICAgKiB5aWVsZGluZyBhIG5ldyBwb2ludC5cbiAgICAgKiBAcGFyYW0ge1BvaW50fSBwIHRoZSBvdGhlciBwb2ludFxuICAgICAqIEByZXR1cm4ge1BvaW50fSBvdXRwdXQgcG9pbnRcbiAgICAgKi9cbiAgICBzdWIocCkgeyByZXR1cm4gdGhpcy5jbG9uZSgpLl9zdWIocCk7IH0sXG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0aGlzIHBvaW50J3MgeCAmIHkgY29vcmRpbmF0ZXMgYnkgcG9pbnQsXG4gICAgICogeWllbGRpbmcgYSBuZXcgcG9pbnQuXG4gICAgICogQHBhcmFtIHtQb2ludH0gcCB0aGUgb3RoZXIgcG9pbnRcbiAgICAgKiBAcmV0dXJuIHtQb2ludH0gb3V0cHV0IHBvaW50XG4gICAgICovXG4gICAgbXVsdEJ5UG9pbnQocCkgeyByZXR1cm4gdGhpcy5jbG9uZSgpLl9tdWx0QnlQb2ludChwKTsgfSxcblxuICAgIC8qKlxuICAgICAqIERpdmlkZSB0aGlzIHBvaW50J3MgeCAmIHkgY29vcmRpbmF0ZXMgYnkgcG9pbnQsXG4gICAgICogeWllbGRpbmcgYSBuZXcgcG9pbnQuXG4gICAgICogQHBhcmFtIHtQb2ludH0gcCB0aGUgb3RoZXIgcG9pbnRcbiAgICAgKiBAcmV0dXJuIHtQb2ludH0gb3V0cHV0IHBvaW50XG4gICAgICovXG4gICAgZGl2QnlQb2ludChwKSB7IHJldHVybiB0aGlzLmNsb25lKCkuX2RpdkJ5UG9pbnQocCk7IH0sXG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0aGlzIHBvaW50J3MgeCAmIHkgY29vcmRpbmF0ZXMgYnkgYSBmYWN0b3IsXG4gICAgICogeWllbGRpbmcgYSBuZXcgcG9pbnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGsgZmFjdG9yXG4gICAgICogQHJldHVybiB7UG9pbnR9IG91dHB1dCBwb2ludFxuICAgICAqL1xuICAgIG11bHQoaykgeyByZXR1cm4gdGhpcy5jbG9uZSgpLl9tdWx0KGspOyB9LFxuXG4gICAgLyoqXG4gICAgICogRGl2aWRlIHRoaXMgcG9pbnQncyB4ICYgeSBjb29yZGluYXRlcyBieSBhIGZhY3RvcixcbiAgICAgKiB5aWVsZGluZyBhIG5ldyBwb2ludC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gayBmYWN0b3JcbiAgICAgKiBAcmV0dXJuIHtQb2ludH0gb3V0cHV0IHBvaW50XG4gICAgICovXG4gICAgZGl2KGspIHsgcmV0dXJuIHRoaXMuY2xvbmUoKS5fZGl2KGspOyB9LFxuXG4gICAgLyoqXG4gICAgICogUm90YXRlIHRoaXMgcG9pbnQgYXJvdW5kIHRoZSAwLCAwIG9yaWdpbiBieSBhbiBhbmdsZSBhLFxuICAgICAqIGdpdmVuIGluIHJhZGlhbnNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYSBhbmdsZSB0byByb3RhdGUgYXJvdW5kLCBpbiByYWRpYW5zXG4gICAgICogQHJldHVybiB7UG9pbnR9IG91dHB1dCBwb2ludFxuICAgICAqL1xuICAgIHJvdGF0ZShhKSB7IHJldHVybiB0aGlzLmNsb25lKCkuX3JvdGF0ZShhKTsgfSxcblxuICAgIC8qKlxuICAgICAqIFJvdGF0ZSB0aGlzIHBvaW50IGFyb3VuZCBwIHBvaW50IGJ5IGFuIGFuZ2xlIGEsXG4gICAgICogZ2l2ZW4gaW4gcmFkaWFuc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhIGFuZ2xlIHRvIHJvdGF0ZSBhcm91bmQsIGluIHJhZGlhbnNcbiAgICAgKiBAcGFyYW0ge1BvaW50fSBwIFBvaW50IHRvIHJvdGF0ZSBhcm91bmRcbiAgICAgKiBAcmV0dXJuIHtQb2ludH0gb3V0cHV0IHBvaW50XG4gICAgICovXG4gICAgcm90YXRlQXJvdW5kKGEsIHApIHsgcmV0dXJuIHRoaXMuY2xvbmUoKS5fcm90YXRlQXJvdW5kKGEsIHApOyB9LFxuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbHkgdGhpcyBwb2ludCBieSBhIDR4MSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0ge1tudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdfSBtIHRyYW5zZm9ybWF0aW9uIG1hdHJpeFxuICAgICAqIEByZXR1cm4ge1BvaW50fSBvdXRwdXQgcG9pbnRcbiAgICAgKi9cbiAgICBtYXRNdWx0KG0pIHsgcmV0dXJuIHRoaXMuY2xvbmUoKS5fbWF0TXVsdChtKTsgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSB0aGlzIHBvaW50IGJ1dCBhcyBhIHVuaXQgdmVjdG9yIGZyb20gMCwgMCwgbWVhbmluZ1xuICAgICAqIHRoYXQgdGhlIGRpc3RhbmNlIGZyb20gdGhlIHJlc3VsdGluZyBwb2ludCB0byB0aGUgMCwgMFxuICAgICAqIGNvb3JkaW5hdGUgd2lsbCBiZSBlcXVhbCB0byAxIGFuZCB0aGUgYW5nbGUgZnJvbSB0aGUgcmVzdWx0aW5nXG4gICAgICogcG9pbnQgdG8gdGhlIDAsIDAgY29vcmRpbmF0ZSB3aWxsIGJlIHRoZSBzYW1lIGFzIGJlZm9yZS5cbiAgICAgKiBAcmV0dXJuIHtQb2ludH0gdW5pdCB2ZWN0b3IgcG9pbnRcbiAgICAgKi9cbiAgICB1bml0KCkgeyByZXR1cm4gdGhpcy5jbG9uZSgpLl91bml0KCk7IH0sXG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIGEgcGVycGVuZGljdWxhciBwb2ludCwgd2hlcmUgdGhlIG5ldyB5IGNvb3JkaW5hdGVcbiAgICAgKiBpcyB0aGUgb2xkIHggY29vcmRpbmF0ZSBhbmQgdGhlIG5ldyB4IGNvb3JkaW5hdGUgaXMgdGhlIG9sZCB5XG4gICAgICogY29vcmRpbmF0ZSBtdWx0aXBsaWVkIGJ5IC0xXG4gICAgICogQHJldHVybiB7UG9pbnR9IHBlcnBlbmRpY3VsYXIgcG9pbnRcbiAgICAgKi9cbiAgICBwZXJwKCkgeyByZXR1cm4gdGhpcy5jbG9uZSgpLl9wZXJwKCk7IH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSB2ZXJzaW9uIG9mIHRoaXMgcG9pbnQgd2l0aCB0aGUgeCAmIHkgY29vcmRpbmF0ZXNcbiAgICAgKiByb3VuZGVkIHRvIGludGVnZXJzLlxuICAgICAqIEByZXR1cm4ge1BvaW50fSByb3VuZGVkIHBvaW50XG4gICAgICovXG4gICAgcm91bmQoKSB7IHJldHVybiB0aGlzLmNsb25lKCkuX3JvdW5kKCk7IH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIG1hZ25pdHVkZSBvZiB0aGlzIHBvaW50OiB0aGlzIGlzIHRoZSBFdWNsaWRlYW5cbiAgICAgKiBkaXN0YW5jZSBmcm9tIHRoZSAwLCAwIGNvb3JkaW5hdGUgdG8gdGhpcyBwb2ludCdzIHggYW5kIHlcbiAgICAgKiBjb29yZGluYXRlcy5cbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IG1hZ25pdHVkZVxuICAgICAqL1xuICAgIG1hZygpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBKdWRnZSB3aGV0aGVyIHRoaXMgcG9pbnQgaXMgZXF1YWwgdG8gYW5vdGhlciBwb2ludCwgcmV0dXJuaW5nXG4gICAgICogdHJ1ZSBvciBmYWxzZS5cbiAgICAgKiBAcGFyYW0ge1BvaW50fSBvdGhlciB0aGUgb3RoZXIgcG9pbnRcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHRoZSBwb2ludHMgYXJlIGVxdWFsXG4gICAgICovXG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnggPT09IG90aGVyLnggJiZcbiAgICAgICAgICAgICAgIHRoaXMueSA9PT0gb3RoZXIueTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIHRoZSBkaXN0YW5jZSBmcm9tIHRoaXMgcG9pbnQgdG8gYW5vdGhlciBwb2ludFxuICAgICAqIEBwYXJhbSB7UG9pbnR9IHAgdGhlIG90aGVyIHBvaW50XG4gICAgICogQHJldHVybiB7bnVtYmVyfSBkaXN0YW5jZVxuICAgICAqL1xuICAgIGRpc3QocCkge1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMuZGlzdFNxcihwKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSB0aGUgZGlzdGFuY2UgZnJvbSB0aGlzIHBvaW50IHRvIGFub3RoZXIgcG9pbnQsXG4gICAgICogd2l0aG91dCB0aGUgc3F1YXJlIHJvb3Qgc3RlcC4gVXNlZnVsIGlmIHlvdSdyZSBjb21wYXJpbmdcbiAgICAgKiByZWxhdGl2ZSBkaXN0YW5jZXMuXG4gICAgICogQHBhcmFtIHtQb2ludH0gcCB0aGUgb3RoZXIgcG9pbnRcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IGRpc3RhbmNlXG4gICAgICovXG4gICAgZGlzdFNxcihwKSB7XG4gICAgICAgIGNvbnN0IGR4ID0gcC54IC0gdGhpcy54LFxuICAgICAgICAgICAgZHkgPSBwLnkgLSB0aGlzLnk7XG4gICAgICAgIHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBhbmdsZSBmcm9tIHRoZSAwLCAwIGNvb3JkaW5hdGUgdG8gdGhpcyBwb2ludCwgaW4gcmFkaWFuc1xuICAgICAqIGNvb3JkaW5hdGVzLlxuICAgICAqIEByZXR1cm4ge251bWJlcn0gYW5nbGVcbiAgICAgKi9cbiAgICBhbmdsZSgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguYXRhbjIodGhpcy55LCB0aGlzLngpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGFuZ2xlIGZyb20gdGhpcyBwb2ludCB0byBhbm90aGVyIHBvaW50LCBpbiByYWRpYW5zXG4gICAgICogQHBhcmFtIHtQb2ludH0gYiB0aGUgb3RoZXIgcG9pbnRcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IGFuZ2xlXG4gICAgICovXG4gICAgYW5nbGVUbyhiKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmF0YW4yKHRoaXMueSAtIGIueSwgdGhpcy54IC0gYi54KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBhbmdsZSBiZXR3ZWVuIHRoaXMgcG9pbnQgYW5kIGFub3RoZXIgcG9pbnQsIGluIHJhZGlhbnNcbiAgICAgKiBAcGFyYW0ge1BvaW50fSBiIHRoZSBvdGhlciBwb2ludFxuICAgICAqIEByZXR1cm4ge251bWJlcn0gYW5nbGVcbiAgICAgKi9cbiAgICBhbmdsZVdpdGgoYikge1xuICAgICAgICByZXR1cm4gdGhpcy5hbmdsZVdpdGhTZXAoYi54LCBiLnkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBGaW5kIHRoZSBhbmdsZSBvZiB0aGUgdHdvIHZlY3RvcnMsIHNvbHZpbmcgdGhlIGZvcm11bGEgZm9yXG4gICAgICogdGhlIGNyb3NzIHByb2R1Y3QgYSB4IGIgPSB8YXx8YnxzaW4ozrgpIGZvciDOuC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0geCB0aGUgeC1jb29yZGluYXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHkgdGhlIHktY29vcmRpbmF0ZVxuICAgICAqIEByZXR1cm4ge251bWJlcn0gdGhlIGFuZ2xlIGluIHJhZGlhbnNcbiAgICAgKi9cbiAgICBhbmdsZVdpdGhTZXAoeCwgeSkge1xuICAgICAgICByZXR1cm4gTWF0aC5hdGFuMihcbiAgICAgICAgICAgIHRoaXMueCAqIHkgLSB0aGlzLnkgKiB4LFxuICAgICAgICAgICAgdGhpcy54ICogeCArIHRoaXMueSAqIHkpO1xuICAgIH0sXG5cbiAgICAvKiogQHBhcmFtIHtbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXX0gbSAqL1xuICAgIF9tYXRNdWx0KG0pIHtcbiAgICAgICAgY29uc3QgeCA9IG1bMF0gKiB0aGlzLnggKyBtWzFdICogdGhpcy55LFxuICAgICAgICAgICAgeSA9IG1bMl0gKiB0aGlzLnggKyBtWzNdICogdGhpcy55O1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqIEBwYXJhbSB7UG9pbnR9IHAgKi9cbiAgICBfYWRkKHApIHtcbiAgICAgICAgdGhpcy54ICs9IHAueDtcbiAgICAgICAgdGhpcy55ICs9IHAueTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKiBAcGFyYW0ge1BvaW50fSBwICovXG4gICAgX3N1YihwKSB7XG4gICAgICAgIHRoaXMueCAtPSBwLng7XG4gICAgICAgIHRoaXMueSAtPSBwLnk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKiogQHBhcmFtIHtudW1iZXJ9IGsgKi9cbiAgICBfbXVsdChrKSB7XG4gICAgICAgIHRoaXMueCAqPSBrO1xuICAgICAgICB0aGlzLnkgKj0gaztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKiBAcGFyYW0ge251bWJlcn0gayAqL1xuICAgIF9kaXYoaykge1xuICAgICAgICB0aGlzLnggLz0gaztcbiAgICAgICAgdGhpcy55IC89IGs7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKiogQHBhcmFtIHtQb2ludH0gcCAqL1xuICAgIF9tdWx0QnlQb2ludChwKSB7XG4gICAgICAgIHRoaXMueCAqPSBwLng7XG4gICAgICAgIHRoaXMueSAqPSBwLnk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKiogQHBhcmFtIHtQb2ludH0gcCAqL1xuICAgIF9kaXZCeVBvaW50KHApIHtcbiAgICAgICAgdGhpcy54IC89IHAueDtcbiAgICAgICAgdGhpcy55IC89IHAueTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIF91bml0KCkge1xuICAgICAgICB0aGlzLl9kaXYodGhpcy5tYWcoKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBfcGVycCgpIHtcbiAgICAgICAgY29uc3QgeSA9IHRoaXMueTtcbiAgICAgICAgdGhpcy55ID0gdGhpcy54O1xuICAgICAgICB0aGlzLnggPSAteTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKiBAcGFyYW0ge251bWJlcn0gYW5nbGUgKi9cbiAgICBfcm90YXRlKGFuZ2xlKSB7XG4gICAgICAgIGNvbnN0IGNvcyA9IE1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgICAgIHNpbiA9IE1hdGguc2luKGFuZ2xlKSxcbiAgICAgICAgICAgIHggPSBjb3MgKiB0aGlzLnggLSBzaW4gKiB0aGlzLnksXG4gICAgICAgICAgICB5ID0gc2luICogdGhpcy54ICsgY29zICogdGhpcy55O1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlXG4gICAgICogQHBhcmFtIHtQb2ludH0gcFxuICAgICAqL1xuICAgIF9yb3RhdGVBcm91bmQoYW5nbGUsIHApIHtcbiAgICAgICAgY29uc3QgY29zID0gTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICAgICAgc2luID0gTWF0aC5zaW4oYW5nbGUpLFxuICAgICAgICAgICAgeCA9IHAueCArIGNvcyAqICh0aGlzLnggLSBwLngpIC0gc2luICogKHRoaXMueSAtIHAueSksXG4gICAgICAgICAgICB5ID0gcC55ICsgc2luICogKHRoaXMueCAtIHAueCkgKyBjb3MgKiAodGhpcy55IC0gcC55KTtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIF9yb3VuZCgpIHtcbiAgICAgICAgdGhpcy54ID0gTWF0aC5yb3VuZCh0aGlzLngpO1xuICAgICAgICB0aGlzLnkgPSBNYXRoLnJvdW5kKHRoaXMueSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBjb25zdHJ1Y3RvcjogUG9pbnRcbn07XG5cbi8qKlxuICogQ29uc3RydWN0IGEgcG9pbnQgZnJvbSBhbiBhcnJheSBpZiBuZWNlc3NhcnksIG90aGVyd2lzZSBpZiB0aGUgaW5wdXRcbiAqIGlzIGFscmVhZHkgYSBQb2ludCwgcmV0dXJuIGl0IHVuY2hhbmdlZC5cbiAqIEBwYXJhbSB7UG9pbnQgfCBbbnVtYmVyLCBudW1iZXJdIHwge3g6IG51bWJlciwgeTogbnVtYmVyfX0gcCBpbnB1dCB2YWx1ZVxuICogQHJldHVybiB7UG9pbnR9IGNvbnN0cnVjdGVkIHBvaW50LlxuICogQGV4YW1wbGVcbiAqIC8vIHRoaXNcbiAqIHZhciBwb2ludCA9IFBvaW50LmNvbnZlcnQoWzAsIDFdKTtcbiAqIC8vIGlzIGVxdWl2YWxlbnQgdG9cbiAqIHZhciBwb2ludCA9IG5ldyBQb2ludCgwLCAxKTtcbiAqL1xuUG9pbnQuY29udmVydCA9IGZ1bmN0aW9uIChwKSB7XG4gICAgaWYgKHAgaW5zdGFuY2VvZiBQb2ludCkge1xuICAgICAgICByZXR1cm4gLyoqIEB0eXBlIHtQb2ludH0gKi8gKHApO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShwKSkge1xuICAgICAgICByZXR1cm4gbmV3IFBvaW50KCtwWzBdLCArcFsxXSk7XG4gICAgfVxuICAgIGlmIChwLnggIT09IHVuZGVmaW5lZCAmJiBwLnkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbmV3IFBvaW50KCtwLngsICtwLnkpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIFt4LCB5XSBvciB7eCwgeX0gcG9pbnQgZm9ybWF0Jyk7XG59O1xuIiwiaW1wb3J0IFBvaW50IGZyb20gJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknO1xuXG4vKipcbiAqIFJldHVybnMgYSBQb2ludCByZXByZXNlbnRpbmcgYSBtb3VzZSBldmVudCdzIHBvc2l0aW9uXG4gKiByZWxhdGl2ZSB0byBhIGNvbnRhaW5pbmcgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge01vdXNlRXZlbnR9IG1vdXNlRXZlbnRcbiAqIEBwYXJhbSB7Tm9kZX0gY29udGFpbmVyXG4gKiBAcmV0dXJucyB7UG9pbnR9XG4gKi9cbmZ1bmN0aW9uIG1vdXNlRXZlbnRQb2ludChtb3VzZUV2ZW50LCBjb250YWluZXIpIHtcbiAgY29uc3QgcmVjdCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIG5ldyBQb2ludChcbiAgICBtb3VzZUV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQgLSAoY29udGFpbmVyLmNsaWVudExlZnQgfHwgMCksXG4gICAgbW91c2VFdmVudC5jbGllbnRZIC0gcmVjdC50b3AgLSAoY29udGFpbmVyLmNsaWVudFRvcCB8fCAwKVxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtb3VzZUV2ZW50UG9pbnQ7XG4iLCJpbXBvcnQgKiBhcyBDb25zdGFudHMgZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcblxuLyoqXG4gKiBSZXR1cm5zIEdlb0pTT04gZm9yIGEgUG9pbnQgcmVwcmVzZW50aW5nIHRoZVxuICogdmVydGV4IG9mIGFub3RoZXIgZmVhdHVyZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyZW50SWRcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gY29vcmRpbmF0ZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gRG90LXNlcGFyYXRlZCBudW1iZXJzIGluZGljYXRpbmcgZXhhY3RseVxuICogICB3aGVyZSB0aGUgcG9pbnQgZXhpc3RzIHdpdGhpbiBpdHMgcGFyZW50IGZlYXR1cmUncyBjb29yZGluYXRlcy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc2VsZWN0ZWRcbiAqIEByZXR1cm4ge0dlb0pTT059IFBvaW50XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocGFyZW50SWQsIGNvb3JkaW5hdGVzLCBwYXRoLCBzZWxlY3RlZCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IENvbnN0YW50cy5nZW9qc29uVHlwZXMuRkVBVFVSRSxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICBtZXRhOiBDb25zdGFudHMubWV0YS5WRVJURVgsXG4gICAgICBwYXJlbnQ6IHBhcmVudElkLFxuICAgICAgY29vcmRfcGF0aDogcGF0aCxcbiAgICAgIGFjdGl2ZTogKHNlbGVjdGVkKSA/IENvbnN0YW50cy5hY3RpdmVTdGF0ZXMuQUNUSVZFIDogQ29uc3RhbnRzLmFjdGl2ZVN0YXRlcy5JTkFDVElWRVxuICAgIH0sXG4gICAgZ2VvbWV0cnk6IHtcbiAgICAgIHR5cGU6IENvbnN0YW50cy5nZW9qc29uVHlwZXMuUE9JTlQsXG4gICAgICBjb29yZGluYXRlc1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCAqIGFzIENvbnN0YW50cyBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwYXJlbnQsIHN0YXJ0VmVydGV4LCBlbmRWZXJ0ZXgpIHtcbiAgY29uc3Qgc3RhcnRDb29yZCA9IHN0YXJ0VmVydGV4Lmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICBjb25zdCBlbmRDb29yZCA9IGVuZFZlcnRleC5nZW9tZXRyeS5jb29yZGluYXRlcztcblxuICAvLyBJZiBhIGNvb3JkaW5hdGUgZXhjZWVkcyB0aGUgcHJvamVjdGlvbiwgd2UgY2FuJ3QgY2FsY3VsYXRlIGEgbWlkcG9pbnQsXG4gIC8vIHNvIHJ1biBhd2F5XG4gIGlmIChzdGFydENvb3JkWzFdID4gQ29uc3RhbnRzLkxBVF9SRU5ERVJFRF9NQVggfHxcbiAgICBzdGFydENvb3JkWzFdIDwgQ29uc3RhbnRzLkxBVF9SRU5ERVJFRF9NSU4gfHxcbiAgICBlbmRDb29yZFsxXSA+IENvbnN0YW50cy5MQVRfUkVOREVSRURfTUFYIHx8XG4gICAgZW5kQ29vcmRbMV0gPCBDb25zdGFudHMuTEFUX1JFTkRFUkVEX01JTikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgbWlkID0ge1xuICAgIGxuZzogKHN0YXJ0Q29vcmRbMF0gKyBlbmRDb29yZFswXSkgLyAyLFxuICAgIGxhdDogKHN0YXJ0Q29vcmRbMV0gKyBlbmRDb29yZFsxXSkgLyAyXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBDb25zdGFudHMuZ2VvanNvblR5cGVzLkZFQVRVUkUsXG4gICAgcHJvcGVydGllczoge1xuICAgICAgbWV0YTogQ29uc3RhbnRzLm1ldGEuTUlEUE9JTlQsXG4gICAgICBwYXJlbnQsXG4gICAgICBsbmc6IG1pZC5sbmcsXG4gICAgICBsYXQ6IG1pZC5sYXQsXG4gICAgICBjb29yZF9wYXRoOiBlbmRWZXJ0ZXgucHJvcGVydGllcy5jb29yZF9wYXRoXG4gICAgfSxcbiAgICBnZW9tZXRyeToge1xuICAgICAgdHlwZTogQ29uc3RhbnRzLmdlb2pzb25UeXBlcy5QT0lOVCxcbiAgICAgIGNvb3JkaW5hdGVzOiBbbWlkLmxuZywgbWlkLmxhdF1cbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgY3JlYXRlVmVydGV4IGZyb20gJy4vY3JlYXRlX3ZlcnRleC5qcyc7XG5pbXBvcnQgY3JlYXRlTWlkcG9pbnQgZnJvbSAnLi9jcmVhdGVfbWlkcG9pbnQuanMnO1xuaW1wb3J0ICogYXMgQ29uc3RhbnRzIGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVN1cHBsZW1lbnRhcnlQb2ludHMoZ2VvanNvbiwgb3B0aW9ucyA9IHt9LCBiYXNlUGF0aCA9IG51bGwpIHtcbiAgY29uc3QgeyB0eXBlLCBjb29yZGluYXRlcyB9ID0gZ2VvanNvbi5nZW9tZXRyeTtcbiAgY29uc3QgZmVhdHVyZUlkID0gZ2VvanNvbi5wcm9wZXJ0aWVzICYmIGdlb2pzb24ucHJvcGVydGllcy5pZDtcblxuICBsZXQgc3VwcGxlbWVudGFyeVBvaW50cyA9IFtdO1xuXG4gIGlmICh0eXBlID09PSBDb25zdGFudHMuZ2VvanNvblR5cGVzLlBPSU5UKSB7XG4gICAgLy8gRm9yIHBvaW50cywganVzdCBjcmVhdGUgYSB2ZXJ0ZXhcbiAgICBzdXBwbGVtZW50YXJ5UG9pbnRzLnB1c2goY3JlYXRlVmVydGV4KGZlYXR1cmVJZCwgY29vcmRpbmF0ZXMsIGJhc2VQYXRoLCBpc1NlbGVjdGVkUGF0aChiYXNlUGF0aCkpKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBDb25zdGFudHMuZ2VvanNvblR5cGVzLlBPTFlHT04pIHtcbiAgICAvLyBDeWNsZSB0aHJvdWdoIGEgUG9seWdvbidzIHJpbmdzIGFuZFxuICAgIC8vIHByb2Nlc3MgZWFjaCBsaW5lXG4gICAgY29vcmRpbmF0ZXMuZm9yRWFjaCgobGluZSwgbGluZUluZGV4KSA9PiB7XG4gICAgICBwcm9jZXNzTGluZShsaW5lLCAoYmFzZVBhdGggIT09IG51bGwpID8gYCR7YmFzZVBhdGh9LiR7bGluZUluZGV4fWAgOiBTdHJpbmcobGluZUluZGV4KSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gQ29uc3RhbnRzLmdlb2pzb25UeXBlcy5MSU5FX1NUUklORykge1xuICAgIHByb2Nlc3NMaW5lKGNvb3JkaW5hdGVzLCBiYXNlUGF0aCk7XG4gIH0gZWxzZSBpZiAodHlwZS5pbmRleE9mKENvbnN0YW50cy5nZW9qc29uVHlwZXMuTVVMVElfUFJFRklYKSA9PT0gMCkge1xuICAgIHByb2Nlc3NNdWx0aUdlb21ldHJ5KCk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9jZXNzTGluZShsaW5lLCBsaW5lQmFzZVBhdGgpIHtcbiAgICBsZXQgZmlyc3RQb2ludFN0cmluZyA9ICcnO1xuICAgIGxldCBsYXN0VmVydGV4ID0gbnVsbDtcbiAgICBsaW5lLmZvckVhY2goKHBvaW50LCBwb2ludEluZGV4KSA9PiB7XG4gICAgICBjb25zdCBwb2ludFBhdGggPSAobGluZUJhc2VQYXRoICE9PSB1bmRlZmluZWQgJiYgbGluZUJhc2VQYXRoICE9PSBudWxsKSA/IGAke2xpbmVCYXNlUGF0aH0uJHtwb2ludEluZGV4fWAgOiBTdHJpbmcocG9pbnRJbmRleCk7XG4gICAgICBjb25zdCB2ZXJ0ZXggPSBjcmVhdGVWZXJ0ZXgoZmVhdHVyZUlkLCBwb2ludCwgcG9pbnRQYXRoLCBpc1NlbGVjdGVkUGF0aChwb2ludFBhdGgpKTtcblxuICAgICAgLy8gSWYgd2UncmUgY3JlYXRpbmcgbWlkcG9pbnRzLCBjaGVjayBpZiB0aGVyZSB3YXMgYVxuICAgICAgLy8gdmVydGV4IGJlZm9yZSB0aGlzIG9uZS4gSWYgc28sIGFkZCBhIG1pZHBvaW50XG4gICAgICAvLyBiZXR3ZWVuIHRoYXQgdmVydGV4IGFuZCB0aGlzIG9uZS5cbiAgICAgIGlmIChvcHRpb25zLm1pZHBvaW50cyAmJiBsYXN0VmVydGV4KSB7XG4gICAgICAgIGNvbnN0IG1pZHBvaW50ID0gY3JlYXRlTWlkcG9pbnQoZmVhdHVyZUlkLCBsYXN0VmVydGV4LCB2ZXJ0ZXgpO1xuICAgICAgICBpZiAobWlkcG9pbnQpIHtcbiAgICAgICAgICBzdXBwbGVtZW50YXJ5UG9pbnRzLnB1c2gobWlkcG9pbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsYXN0VmVydGV4ID0gdmVydGV4O1xuXG4gICAgICAvLyBBIFBvbHlnb24gbGluZSdzIGxhc3QgcG9pbnQgaXMgdGhlIHNhbWUgYXMgdGhlIGZpcnN0IHBvaW50LiBJZiB3ZSdyZSBvbiB0aGUgbGFzdFxuICAgICAgLy8gcG9pbnQsIHdlIHdhbnQgdG8gZHJhdyBhIG1pZHBvaW50IGJlZm9yZSBpdCBidXQgbm90IGFub3RoZXIgdmVydGV4IG9uIGl0XG4gICAgICAvLyAoc2luY2Ugd2UgYWxyZWFkeSBhIHZlcnRleCB0aGVyZSwgZnJvbSB0aGUgZmlyc3QgcG9pbnQpLlxuICAgICAgY29uc3Qgc3RyaW5naWZpZWRQb2ludCA9IEpTT04uc3RyaW5naWZ5KHBvaW50KTtcbiAgICAgIGlmIChmaXJzdFBvaW50U3RyaW5nICE9PSBzdHJpbmdpZmllZFBvaW50KSB7XG4gICAgICAgIHN1cHBsZW1lbnRhcnlQb2ludHMucHVzaCh2ZXJ0ZXgpO1xuICAgICAgfVxuICAgICAgaWYgKHBvaW50SW5kZXggPT09IDApIHtcbiAgICAgICAgZmlyc3RQb2ludFN0cmluZyA9IHN0cmluZ2lmaWVkUG9pbnQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc1NlbGVjdGVkUGF0aChwYXRoKSB7XG4gICAgaWYgKCFvcHRpb25zLnNlbGVjdGVkUGF0aHMpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gb3B0aW9ucy5zZWxlY3RlZFBhdGhzLmluZGV4T2YocGF0aCkgIT09IC0xO1xuICB9XG5cbiAgLy8gU3BsaXQgYSBtdWx0aS1nZW9tZXRyeSBpbnRvIGNvbnN0aXR1ZW50XG4gIC8vIGdlb21ldHJpZXMsIGFuZCBhY2N1bXVsYXRlIHRoZSBzdXBwbGVtZW50YXJ5IHBvaW50c1xuICAvLyBmb3IgZWFjaCBvZiB0aG9zZSBjb25zdGl0dWVudHNcbiAgZnVuY3Rpb24gcHJvY2Vzc011bHRpR2VvbWV0cnkoKSB7XG4gICAgY29uc3Qgc3ViVHlwZSA9IHR5cGUucmVwbGFjZShDb25zdGFudHMuZ2VvanNvblR5cGVzLk1VTFRJX1BSRUZJWCwgJycpO1xuICAgIGNvb3JkaW5hdGVzLmZvckVhY2goKHN1YkNvb3JkaW5hdGVzLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3Qgc3ViRmVhdHVyZSA9IHtcbiAgICAgICAgdHlwZTogQ29uc3RhbnRzLmdlb2pzb25UeXBlcy5GRUFUVVJFLFxuICAgICAgICBwcm9wZXJ0aWVzOiBnZW9qc29uLnByb3BlcnRpZXMsXG4gICAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgICAgdHlwZTogc3ViVHlwZSxcbiAgICAgICAgICBjb29yZGluYXRlczogc3ViQ29vcmRpbmF0ZXNcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHN1cHBsZW1lbnRhcnlQb2ludHMgPSBzdXBwbGVtZW50YXJ5UG9pbnRzLmNvbmNhdChjcmVhdGVTdXBwbGVtZW50YXJ5UG9pbnRzKHN1YkZlYXR1cmUsIG9wdGlvbnMsIGluZGV4KSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc3VwcGxlbWVudGFyeVBvaW50cztcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3VwcGxlbWVudGFyeVBvaW50cztcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgZW5hYmxlKGN0eCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgLy8gRmlyc3QgY2hlY2sgd2UndmUgZ290IGEgbWFwIGFuZCBzb21lIGNvbnRleHQuXG4gICAgICBpZiAoIWN0eC5tYXAgfHwgIWN0eC5tYXAuZG91YmxlQ2xpY2tab29tIHx8ICFjdHguX2N0eCB8fCAhY3R4Ll9jdHguc3RvcmUgfHwgIWN0eC5fY3R4LnN0b3JlLmdldEluaXRpYWxDb25maWdWYWx1ZSkgcmV0dXJuO1xuICAgICAgLy8gTm93IGNoZWNrIGluaXRpYWwgc3RhdGUgd2Fzbid0IGZhbHNlICh3ZSBsZWF2ZSBpdCBkaXNhYmxlZCBpZiBzbylcbiAgICAgIGlmICghY3R4Ll9jdHguc3RvcmUuZ2V0SW5pdGlhbENvbmZpZ1ZhbHVlKCdkb3VibGVDbGlja1pvb20nKSkgcmV0dXJuO1xuICAgICAgY3R4Lm1hcC5kb3VibGVDbGlja1pvb20uZW5hYmxlKCk7XG4gICAgfSwgMCk7XG4gIH0sXG4gIGRpc2FibGUoY3R4KSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoIWN0eC5tYXAgfHwgIWN0eC5tYXAuZG91YmxlQ2xpY2tab29tKSByZXR1cm47XG4gICAgICAvLyBBbHdheXMgZGlzYWJsZSBoZXJlLCBhcyBpdCdzIG5lY2Vzc2FyeSBpbiBzb21lIGNhc2VzLlxuICAgICAgY3R4Lm1hcC5kb3VibGVDbGlja1pvb20uZGlzYWJsZSgpO1xuICAgIH0sIDApO1xuICB9XG59O1xuIiwiaW1wb3J0ICogYXMgQ29uc3RhbnRzIGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5cbmNvbnN0IHtcbiAgTEFUX01JTixcbiAgTEFUX01BWCxcbiAgTEFUX1JFTkRFUkVEX01JTixcbiAgTEFUX1JFTkRFUkVEX01BWCxcbiAgTE5HX01JTixcbiAgTE5HX01BWCxcbn0gPSBDb25zdGFudHM7XG5mdW5jdGlvbiBleHRlbnQoZmVhdHVyZSkge1xuICBjb25zdCBkZXB0aCA9IHtcbiAgICBQb2ludDogMCxcbiAgICBMaW5lU3RyaW5nOiAxLFxuICAgIFBvbHlnb246IDIsXG4gICAgTXVsdGlQb2ludDogMSxcbiAgICBNdWx0aUxpbmVTdHJpbmc6IDIsXG4gICAgTXVsdGlQb2x5Z29uOiAzLFxuICB9W2ZlYXR1cmUuZ2VvbWV0cnkudHlwZV07XG5cbiAgY29uc3QgY29vcmRzID0gW2ZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXNdLmZsYXQoZGVwdGgpO1xuICBjb25zdCBsbmdzID0gY29vcmRzLm1hcChjb29yZCA9PiBjb29yZFswXSk7XG4gIGNvbnN0IGxhdHMgPSBjb29yZHMubWFwKGNvb3JkID0+IGNvb3JkWzFdKTtcbiAgY29uc3QgbWluID0gdmFscyA9PiBNYXRoLm1pbi5hcHBseShudWxsLCB2YWxzKTtcbiAgY29uc3QgbWF4ID0gdmFscyA9PiBNYXRoLm1heC5hcHBseShudWxsLCB2YWxzKTtcbiAgcmV0dXJuIFttaW4obG5ncyksIG1pbihsYXRzKSwgbWF4KGxuZ3MpLCBtYXgobGF0cyldO1xufVxuXG4vLyBFbnN1cmUgdGhhdCB3ZSBkbyBub3QgZHJhZyBub3J0aC1zb3V0aCBmYXIgZW5vdWdoIGZvclxuLy8gLSBhbnkgcGFydCBvZiBhbnkgZmVhdHVyZSB0byBleGNlZWQgdGhlIHBvbGVzXG4vLyAtIGFueSBmZWF0dXJlIHRvIGJlIGNvbXBsZXRlbHkgbG9zdCBpbiB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgcHJvamVjdGlvbidzXG4vLyAgIGVkZ2UgYW5kIHRoZSBwb2xlcywgc3VjaCB0aGF0IGl0IGNvdWxkbid0IGJlIHJlLXNlbGVjdGVkIGFuZCBtb3ZlZCBiYWNrXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihnZW9qc29uRmVhdHVyZXMsIGRlbHRhKSB7XG4gIC8vIFwiaW5uZXIgZWRnZVwiID0gYSBmZWF0dXJlJ3MgbGF0aXR1ZGUgY2xvc2VzdCB0byB0aGUgZXF1YXRvclxuICBsZXQgbm9ydGhJbm5lckVkZ2UgPSBMQVRfTUlOO1xuICBsZXQgc291dGhJbm5lckVkZ2UgPSBMQVRfTUFYO1xuICAvLyBcIm91dGVyIGVkZ2VcIiA9IGEgZmVhdHVyZSdzIGxhdGl0dWRlIGZ1cnRoZXN0IGZyb20gdGhlIGVxdWF0b3JcbiAgbGV0IG5vcnRoT3V0ZXJFZGdlID0gTEFUX01JTjtcbiAgbGV0IHNvdXRoT3V0ZXJFZGdlID0gTEFUX01BWDtcblxuICBsZXQgd2VzdEVkZ2UgPSBMTkdfTUFYO1xuICBsZXQgZWFzdEVkZ2UgPSBMTkdfTUlOO1xuXG4gIGdlb2pzb25GZWF0dXJlcy5mb3JFYWNoKChmZWF0dXJlKSA9PiB7XG4gICAgY29uc3QgYm91bmRzID0gZXh0ZW50KGZlYXR1cmUpO1xuICAgIGNvbnN0IGZlYXR1cmVTb3V0aEVkZ2UgPSBib3VuZHNbMV07XG4gICAgY29uc3QgZmVhdHVyZU5vcnRoRWRnZSA9IGJvdW5kc1szXTtcbiAgICBjb25zdCBmZWF0dXJlV2VzdEVkZ2UgPSBib3VuZHNbMF07XG4gICAgY29uc3QgZmVhdHVyZUVhc3RFZGdlID0gYm91bmRzWzJdO1xuICAgIGlmIChmZWF0dXJlU291dGhFZGdlID4gbm9ydGhJbm5lckVkZ2UpIG5vcnRoSW5uZXJFZGdlID0gZmVhdHVyZVNvdXRoRWRnZTtcbiAgICBpZiAoZmVhdHVyZU5vcnRoRWRnZSA8IHNvdXRoSW5uZXJFZGdlKSBzb3V0aElubmVyRWRnZSA9IGZlYXR1cmVOb3J0aEVkZ2U7XG4gICAgaWYgKGZlYXR1cmVOb3J0aEVkZ2UgPiBub3J0aE91dGVyRWRnZSkgbm9ydGhPdXRlckVkZ2UgPSBmZWF0dXJlTm9ydGhFZGdlO1xuICAgIGlmIChmZWF0dXJlU291dGhFZGdlIDwgc291dGhPdXRlckVkZ2UpIHNvdXRoT3V0ZXJFZGdlID0gZmVhdHVyZVNvdXRoRWRnZTtcbiAgICBpZiAoZmVhdHVyZVdlc3RFZGdlIDwgd2VzdEVkZ2UpIHdlc3RFZGdlID0gZmVhdHVyZVdlc3RFZGdlO1xuICAgIGlmIChmZWF0dXJlRWFzdEVkZ2UgPiBlYXN0RWRnZSkgZWFzdEVkZ2UgPSBmZWF0dXJlRWFzdEVkZ2U7XG4gIH0pO1xuXG5cbiAgLy8gVGhlc2UgY2hhbmdlcyBhcmUgbm90IG11dHVhbGx5IGV4Y2x1c2l2ZTogd2UgbWlnaHQgaGl0IHRoZSBpbm5lclxuICAvLyBlZGdlIGJ1dCBhbHNvIGhhdmUgaGl0IHRoZSBvdXRlciBlZGdlIGFuZCB0aGVyZWZvcmUgbmVlZFxuICAvLyBhbm90aGVyIHJlYWRqdXN0bWVudFxuICBjb25zdCBjb25zdHJhaW5lZERlbHRhID0gZGVsdGE7XG4gIGlmIChub3J0aElubmVyRWRnZSArIGNvbnN0cmFpbmVkRGVsdGEubGF0ID4gTEFUX1JFTkRFUkVEX01BWCkge1xuICAgIGNvbnN0cmFpbmVkRGVsdGEubGF0ID0gTEFUX1JFTkRFUkVEX01BWCAtIG5vcnRoSW5uZXJFZGdlO1xuICB9XG4gIGlmIChub3J0aE91dGVyRWRnZSArIGNvbnN0cmFpbmVkRGVsdGEubGF0ID4gTEFUX01BWCkge1xuICAgIGNvbnN0cmFpbmVkRGVsdGEubGF0ID0gTEFUX01BWCAtIG5vcnRoT3V0ZXJFZGdlO1xuICB9XG4gIGlmIChzb3V0aElubmVyRWRnZSArIGNvbnN0cmFpbmVkRGVsdGEubGF0IDwgTEFUX1JFTkRFUkVEX01JTikge1xuICAgIGNvbnN0cmFpbmVkRGVsdGEubGF0ID0gTEFUX1JFTkRFUkVEX01JTiAtIHNvdXRoSW5uZXJFZGdlO1xuICB9XG4gIGlmIChzb3V0aE91dGVyRWRnZSArIGNvbnN0cmFpbmVkRGVsdGEubGF0IDwgTEFUX01JTikge1xuICAgIGNvbnN0cmFpbmVkRGVsdGEubGF0ID0gTEFUX01JTiAtIHNvdXRoT3V0ZXJFZGdlO1xuICB9XG4gIGlmICh3ZXN0RWRnZSArIGNvbnN0cmFpbmVkRGVsdGEubG5nIDw9IExOR19NSU4pIHtcbiAgICBjb25zdHJhaW5lZERlbHRhLmxuZyArPSBNYXRoLmNlaWwoTWF0aC5hYnMoY29uc3RyYWluZWREZWx0YS5sbmcpIC8gMzYwKSAqIDM2MDtcbiAgfVxuICBpZiAoZWFzdEVkZ2UgKyBjb25zdHJhaW5lZERlbHRhLmxuZyA+PSBMTkdfTUFYKSB7XG4gICAgY29uc3RyYWluZWREZWx0YS5sbmcgLT0gTWF0aC5jZWlsKE1hdGguYWJzKGNvbnN0cmFpbmVkRGVsdGEubG5nKSAvIDM2MCkgKiAzNjA7XG4gIH1cblxuICByZXR1cm4gY29uc3RyYWluZWREZWx0YTtcbn1cbiIsImltcG9ydCBjb25zdHJhaW5GZWF0dXJlTW92ZW1lbnQgZnJvbSAnLi9jb25zdHJhaW5fZmVhdHVyZV9tb3ZlbWVudC5qcyc7XG5pbXBvcnQgKiBhcyBDb25zdGFudHMgZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZmVhdHVyZXMsIGRlbHRhKSB7XG4gIGNvbnN0IGNvbnN0cmFpbmVkRGVsdGEgPSBjb25zdHJhaW5GZWF0dXJlTW92ZW1lbnQoZmVhdHVyZXMubWFwKGZlYXR1cmUgPT4gZmVhdHVyZS50b0dlb0pTT04oKSksIGRlbHRhKTtcblxuICBmZWF0dXJlcy5mb3JFYWNoKChmZWF0dXJlKSA9PiB7XG4gICAgY29uc3QgY3VycmVudENvb3JkaW5hdGVzID0gZmVhdHVyZS5nZXRDb29yZGluYXRlcygpO1xuXG4gICAgY29uc3QgbW92ZUNvb3JkaW5hdGUgPSAoY29vcmQpID0+IHtcbiAgICAgIGNvbnN0IHBvaW50ID0ge1xuICAgICAgICBsbmc6IGNvb3JkWzBdICsgY29uc3RyYWluZWREZWx0YS5sbmcsXG4gICAgICAgIGxhdDogY29vcmRbMV0gKyBjb25zdHJhaW5lZERlbHRhLmxhdFxuICAgICAgfTtcbiAgICAgIHJldHVybiBbcG9pbnQubG5nLCBwb2ludC5sYXRdO1xuICAgIH07XG4gICAgY29uc3QgbW92ZVJpbmcgPSByaW5nID0+IHJpbmcubWFwKGNvb3JkID0+IG1vdmVDb29yZGluYXRlKGNvb3JkKSk7XG4gICAgY29uc3QgbW92ZU11bHRpUG9seWdvbiA9IG11bHRpID0+IG11bHRpLm1hcChyaW5nID0+IG1vdmVSaW5nKHJpbmcpKTtcblxuICAgIGxldCBuZXh0Q29vcmRpbmF0ZXM7XG4gICAgaWYgKGZlYXR1cmUudHlwZSA9PT0gQ29uc3RhbnRzLmdlb2pzb25UeXBlcy5QT0lOVCkge1xuICAgICAgbmV4dENvb3JkaW5hdGVzID0gbW92ZUNvb3JkaW5hdGUoY3VycmVudENvb3JkaW5hdGVzKTtcbiAgICB9IGVsc2UgaWYgKGZlYXR1cmUudHlwZSA9PT0gQ29uc3RhbnRzLmdlb2pzb25UeXBlcy5MSU5FX1NUUklORyB8fCBmZWF0dXJlLnR5cGUgPT09IENvbnN0YW50cy5nZW9qc29uVHlwZXMuTVVMVElfUE9JTlQpIHtcbiAgICAgIG5leHRDb29yZGluYXRlcyA9IGN1cnJlbnRDb29yZGluYXRlcy5tYXAobW92ZUNvb3JkaW5hdGUpO1xuICAgIH0gZWxzZSBpZiAoZmVhdHVyZS50eXBlID09PSBDb25zdGFudHMuZ2VvanNvblR5cGVzLlBPTFlHT04gfHwgZmVhdHVyZS50eXBlID09PSBDb25zdGFudHMuZ2VvanNvblR5cGVzLk1VTFRJX0xJTkVfU1RSSU5HKSB7XG4gICAgICBuZXh0Q29vcmRpbmF0ZXMgPSBjdXJyZW50Q29vcmRpbmF0ZXMubWFwKG1vdmVSaW5nKTtcbiAgICB9IGVsc2UgaWYgKGZlYXR1cmUudHlwZSA9PT0gQ29uc3RhbnRzLmdlb2pzb25UeXBlcy5NVUxUSV9QT0xZR09OKSB7XG4gICAgICBuZXh0Q29vcmRpbmF0ZXMgPSBjdXJyZW50Q29vcmRpbmF0ZXMubWFwKG1vdmVNdWx0aVBvbHlnb24pO1xuICAgIH1cblxuICAgIGZlYXR1cmUuaW5jb21pbmdDb29yZHMobmV4dENvb3JkaW5hdGVzKTtcbiAgfSk7XG59XG4iLCJpbXBvcnQgKiBhcyBDb21tb25TZWxlY3RvcnMgZnJvbSAnLi4vbGliL2NvbW1vbl9zZWxlY3RvcnMuanMnO1xuaW1wb3J0IG1vdXNlRXZlbnRQb2ludCBmcm9tICcuLi9saWIvbW91c2VfZXZlbnRfcG9pbnQuanMnO1xuaW1wb3J0IGNyZWF0ZVN1cHBsZW1lbnRhcnlQb2ludHMgZnJvbSAnLi4vbGliL2NyZWF0ZV9zdXBwbGVtZW50YXJ5X3BvaW50cy5qcyc7XG5pbXBvcnQgU3RyaW5nU2V0IGZyb20gJy4uL2xpYi9zdHJpbmdfc2V0LmpzJztcbmltcG9ydCBkb3VibGVDbGlja1pvb20gZnJvbSAnLi4vbGliL2RvdWJsZV9jbGlja196b29tLmpzJztcbmltcG9ydCBtb3ZlRmVhdHVyZXMgZnJvbSAnLi4vbGliL21vdmVfZmVhdHVyZXMuanMnO1xuaW1wb3J0ICogYXMgQ29uc3RhbnRzIGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5cbmNvbnN0IFNpbXBsZVNlbGVjdCA9IHt9O1xuXG5TaW1wbGVTZWxlY3Qub25TZXR1cCA9IGZ1bmN0aW9uKG9wdHMpIHtcbiAgLy8gdHVybiB0aGUgb3B0cyBpbnRvIHN0YXRlLlxuICBjb25zdCBzdGF0ZSA9IHtcbiAgICBkcmFnTW92ZUxvY2F0aW9uOiBudWxsLFxuICAgIGJveFNlbGVjdFN0YXJ0TG9jYXRpb246IG51bGwsXG4gICAgYm94U2VsZWN0RWxlbWVudDogdW5kZWZpbmVkLFxuICAgIGJveFNlbGVjdGluZzogZmFsc2UsXG4gICAgY2FuQm94U2VsZWN0OiBmYWxzZSxcbiAgICBkcmFnTW92aW5nOiBmYWxzZSxcbiAgICBjYW5EcmFnTW92ZTogZmFsc2UsXG4gICAgaW5pdGlhbERyYWdQYW5TdGF0ZTogdGhpcy5tYXAuZHJhZ1Bhbi5pc0VuYWJsZWQoKSxcbiAgICBpbml0aWFsbHlTZWxlY3RlZEZlYXR1cmVJZHM6IG9wdHMuZmVhdHVyZUlkcyB8fCBbXVxuICB9O1xuXG4gIHRoaXMuc2V0U2VsZWN0ZWQoc3RhdGUuaW5pdGlhbGx5U2VsZWN0ZWRGZWF0dXJlSWRzLmZpbHRlcihpZCA9PiB0aGlzLmdldEZlYXR1cmUoaWQpICE9PSB1bmRlZmluZWQpKTtcbiAgdGhpcy5maXJlQWN0aW9uYWJsZSgpO1xuXG4gIHRoaXMuc2V0QWN0aW9uYWJsZVN0YXRlKHtcbiAgICBjb21iaW5lRmVhdHVyZXM6IHRydWUsXG4gICAgdW5jb21iaW5lRmVhdHVyZXM6IHRydWUsXG4gICAgdHJhc2g6IHRydWVcbiAgfSk7XG5cbiAgcmV0dXJuIHN0YXRlO1xufTtcblxuU2ltcGxlU2VsZWN0LmZpcmVVcGRhdGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5maXJlKENvbnN0YW50cy5ldmVudHMuVVBEQVRFLCB7XG4gICAgYWN0aW9uOiBDb25zdGFudHMudXBkYXRlQWN0aW9ucy5NT1ZFLFxuICAgIGZlYXR1cmVzOiB0aGlzLmdldFNlbGVjdGVkKCkubWFwKGYgPT4gZi50b0dlb0pTT04oKSlcbiAgfSk7XG59O1xuXG5TaW1wbGVTZWxlY3QuZmlyZUFjdGlvbmFibGUgPSBmdW5jdGlvbigpIHtcbiAgY29uc3Qgc2VsZWN0ZWRGZWF0dXJlcyA9IHRoaXMuZ2V0U2VsZWN0ZWQoKTtcblxuICBjb25zdCBtdWx0aUZlYXR1cmVzID0gc2VsZWN0ZWRGZWF0dXJlcy5maWx0ZXIoXG4gICAgZmVhdHVyZSA9PiB0aGlzLmlzSW5zdGFuY2VPZignTXVsdGlGZWF0dXJlJywgZmVhdHVyZSlcbiAgKTtcblxuICBsZXQgY29tYmluZUZlYXR1cmVzID0gZmFsc2U7XG5cbiAgaWYgKHNlbGVjdGVkRmVhdHVyZXMubGVuZ3RoID4gMSkge1xuICAgIGNvbWJpbmVGZWF0dXJlcyA9IHRydWU7XG4gICAgY29uc3QgZmVhdHVyZVR5cGUgPSBzZWxlY3RlZEZlYXR1cmVzWzBdLnR5cGUucmVwbGFjZSgnTXVsdGknLCAnJyk7XG4gICAgc2VsZWN0ZWRGZWF0dXJlcy5mb3JFYWNoKChmZWF0dXJlKSA9PiB7XG4gICAgICBpZiAoZmVhdHVyZS50eXBlLnJlcGxhY2UoJ011bHRpJywgJycpICE9PSBmZWF0dXJlVHlwZSkge1xuICAgICAgICBjb21iaW5lRmVhdHVyZXMgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHVuY29tYmluZUZlYXR1cmVzID0gbXVsdGlGZWF0dXJlcy5sZW5ndGggPiAwO1xuICBjb25zdCB0cmFzaCA9IHNlbGVjdGVkRmVhdHVyZXMubGVuZ3RoID4gMDtcblxuICB0aGlzLnNldEFjdGlvbmFibGVTdGF0ZSh7XG4gICAgY29tYmluZUZlYXR1cmVzLCB1bmNvbWJpbmVGZWF0dXJlcywgdHJhc2hcbiAgfSk7XG59O1xuXG5TaW1wbGVTZWxlY3QuZ2V0VW5pcXVlSWRzID0gZnVuY3Rpb24oYWxsRmVhdHVyZXMpIHtcbiAgaWYgKCFhbGxGZWF0dXJlcy5sZW5ndGgpIHJldHVybiBbXTtcbiAgY29uc3QgaWRzID0gYWxsRmVhdHVyZXMubWFwKHMgPT4gcy5wcm9wZXJ0aWVzLmlkKVxuICAgIC5maWx0ZXIoaWQgPT4gaWQgIT09IHVuZGVmaW5lZClcbiAgICAucmVkdWNlKChtZW1vLCBpZCkgPT4ge1xuICAgICAgbWVtby5hZGQoaWQpO1xuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfSwgbmV3IFN0cmluZ1NldCgpKTtcblxuICByZXR1cm4gaWRzLnZhbHVlcygpO1xufTtcblxuU2ltcGxlU2VsZWN0LnN0b3BFeHRlbmRlZEludGVyYWN0aW9ucyA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5ib3hTZWxlY3RFbGVtZW50KSB7XG4gICAgaWYgKHN0YXRlLmJveFNlbGVjdEVsZW1lbnQucGFyZW50Tm9kZSkgc3RhdGUuYm94U2VsZWN0RWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0YXRlLmJveFNlbGVjdEVsZW1lbnQpO1xuICAgIHN0YXRlLmJveFNlbGVjdEVsZW1lbnQgPSBudWxsO1xuICB9XG5cbiAgaWYgKChzdGF0ZS5jYW5EcmFnTW92ZSB8fCBzdGF0ZS5jYW5Cb3hTZWxlY3QpICYmIHN0YXRlLmluaXRpYWxEcmFnUGFuU3RhdGUgPT09IHRydWUpIHtcbiAgICB0aGlzLm1hcC5kcmFnUGFuLmVuYWJsZSgpO1xuICB9XG5cbiAgc3RhdGUuYm94U2VsZWN0aW5nID0gZmFsc2U7XG4gIHN0YXRlLmNhbkJveFNlbGVjdCA9IGZhbHNlO1xuICBzdGF0ZS5kcmFnTW92aW5nID0gZmFsc2U7XG4gIHN0YXRlLmNhbkRyYWdNb3ZlID0gZmFsc2U7XG59O1xuXG5TaW1wbGVTZWxlY3Qub25TdG9wID0gZnVuY3Rpb24oKSB7XG4gIGRvdWJsZUNsaWNrWm9vbS5lbmFibGUodGhpcyk7XG59O1xuXG5TaW1wbGVTZWxlY3Qub25Nb3VzZU1vdmUgPSBmdW5jdGlvbihzdGF0ZSwgZSkge1xuICBjb25zdCBpc0ZlYXR1cmUgPSBDb21tb25TZWxlY3RvcnMuaXNGZWF0dXJlKGUpO1xuICBpZiAoaXNGZWF0dXJlICYmIHN0YXRlLmRyYWdNb3ZpbmcpIHRoaXMuZmlyZVVwZGF0ZSgpO1xuXG4gIC8vIE9uIG1vdXNlbW92ZSB0aGF0IGlzIG5vdCBhIGRyYWcsIHN0b3AgZXh0ZW5kZWQgaW50ZXJhY3Rpb25zLlxuICAvLyBUaGlzIGlzIHVzZWZ1bCBpZiB5b3UgZHJhZyBvZmYgdGhlIGNhbnZhcywgcmVsZWFzZSB0aGUgYnV0dG9uLFxuICAvLyB0aGVuIG1vdmUgdGhlIG1vdXNlIGJhY2sgb3ZlciB0aGUgY2FudmFzIC0tLSB3ZSBkb24ndCBhbGxvdyB0aGVcbiAgLy8gaW50ZXJhY3Rpb24gdG8gY29udGludWUgdGhlbiwgYnV0IHdlIGRvIGxldCBpdCBjb250aW51ZSBpZiB5b3UgaGVsZFxuICAvLyB0aGUgbW91c2UgYnV0dG9uIHRoYXQgd2hvbGUgdGltZVxuICB0aGlzLnN0b3BFeHRlbmRlZEludGVyYWN0aW9ucyhzdGF0ZSk7XG5cbiAgLy8gU2tpcCByZW5kZXJcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5TaW1wbGVTZWxlY3Qub25Nb3VzZU91dCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIC8vIEFzIHNvb24gYXMgeW91IG1vdXNlIGxlYXZlcyB0aGUgY2FudmFzLCB1cGRhdGUgdGhlIGZlYXR1cmVcbiAgaWYgKHN0YXRlLmRyYWdNb3ZpbmcpIHJldHVybiB0aGlzLmZpcmVVcGRhdGUoKTtcblxuICAvLyBTa2lwIHJlbmRlclxuICByZXR1cm4gdHJ1ZTtcbn07XG5cblNpbXBsZVNlbGVjdC5vblRhcCA9IFNpbXBsZVNlbGVjdC5vbkNsaWNrID0gZnVuY3Rpb24oc3RhdGUsIGUpIHtcbiAgLy8gQ2xpY2sgKHdpdGggb3Igd2l0aG91dCBzaGlmdCkgb24gbm8gZmVhdHVyZVxuICBpZiAoQ29tbW9uU2VsZWN0b3JzLm5vVGFyZ2V0KGUpKSByZXR1cm4gdGhpcy5jbGlja0FueXdoZXJlKHN0YXRlLCBlKTsgLy8gYWxzbyB0YXBcbiAgaWYgKENvbW1vblNlbGVjdG9ycy5pc09mTWV0YVR5cGUoQ29uc3RhbnRzLm1ldGEuVkVSVEVYKShlKSkgcmV0dXJuIHRoaXMuY2xpY2tPblZlcnRleChzdGF0ZSwgZSk7IC8vdGFwXG4gIGlmIChDb21tb25TZWxlY3RvcnMuaXNGZWF0dXJlKGUpKSByZXR1cm4gdGhpcy5jbGlja09uRmVhdHVyZShzdGF0ZSwgZSk7XG59O1xuXG5TaW1wbGVTZWxlY3QuY2xpY2tBbnl3aGVyZSA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAvLyBDbGVhciB0aGUgcmUtcmVuZGVyIHNlbGVjdGlvblxuICBjb25zdCB3YXNTZWxlY3RlZCA9IHRoaXMuZ2V0U2VsZWN0ZWRJZHMoKTtcbiAgaWYgKHdhc1NlbGVjdGVkLmxlbmd0aCkge1xuICAgIHRoaXMuY2xlYXJTZWxlY3RlZEZlYXR1cmVzKCk7XG4gICAgd2FzU2VsZWN0ZWQuZm9yRWFjaChpZCA9PiB0aGlzLmRvUmVuZGVyKGlkKSk7XG4gIH1cbiAgZG91YmxlQ2xpY2tab29tLmVuYWJsZSh0aGlzKTtcbiAgdGhpcy5zdG9wRXh0ZW5kZWRJbnRlcmFjdGlvbnMoc3RhdGUpO1xufTtcblxuU2ltcGxlU2VsZWN0LmNsaWNrT25WZXJ0ZXggPSBmdW5jdGlvbihzdGF0ZSwgZSkge1xuICAvLyBFbnRlciBkaXJlY3Qgc2VsZWN0IG1vZGVcbiAgdGhpcy5jaGFuZ2VNb2RlKENvbnN0YW50cy5tb2Rlcy5ESVJFQ1RfU0VMRUNULCB7XG4gICAgZmVhdHVyZUlkOiBlLmZlYXR1cmVUYXJnZXQucHJvcGVydGllcy5wYXJlbnQsXG4gICAgY29vcmRQYXRoOiBlLmZlYXR1cmVUYXJnZXQucHJvcGVydGllcy5jb29yZF9wYXRoLFxuICAgIHN0YXJ0UG9zOiBlLmxuZ0xhdFxuICB9KTtcbiAgdGhpcy51cGRhdGVVSUNsYXNzZXMoeyBtb3VzZTogQ29uc3RhbnRzLmN1cnNvcnMuTU9WRSB9KTtcbn07XG5cblNpbXBsZVNlbGVjdC5zdGFydE9uQWN0aXZlRmVhdHVyZSA9IGZ1bmN0aW9uKHN0YXRlLCBlKSB7XG4gIC8vIFN0b3AgYW55IGFscmVhZHktdW5kZXJ3YXkgZXh0ZW5kZWQgaW50ZXJhY3Rpb25zXG4gIHRoaXMuc3RvcEV4dGVuZGVkSW50ZXJhY3Rpb25zKHN0YXRlKTtcblxuICAvLyBEaXNhYmxlIG1hcC5kcmFnUGFuIGltbWVkaWF0ZWx5IHNvIGl0IGNhbid0IHN0YXJ0XG4gIHRoaXMubWFwLmRyYWdQYW4uZGlzYWJsZSgpO1xuXG4gIC8vIFJlLXJlbmRlciBpdCBhbmQgZW5hYmxlIGRyYWcgbW92ZVxuICB0aGlzLmRvUmVuZGVyKGUuZmVhdHVyZVRhcmdldC5wcm9wZXJ0aWVzLmlkKTtcblxuICAvLyBTZXQgdXAgdGhlIHN0YXRlIGZvciBkcmFnIG1vdmluZ1xuICBzdGF0ZS5jYW5EcmFnTW92ZSA9IHRydWU7XG4gIHN0YXRlLmRyYWdNb3ZlTG9jYXRpb24gPSBlLmxuZ0xhdDtcbn07XG5cblNpbXBsZVNlbGVjdC5jbGlja09uRmVhdHVyZSA9IGZ1bmN0aW9uKHN0YXRlLCBlKSB7XG4gIC8vIFN0b3AgZXZlcnl0aGluZ1xuICBkb3VibGVDbGlja1pvb20uZGlzYWJsZSh0aGlzKTtcbiAgdGhpcy5zdG9wRXh0ZW5kZWRJbnRlcmFjdGlvbnMoc3RhdGUpO1xuXG4gIGNvbnN0IGlzU2hpZnRDbGljayA9IENvbW1vblNlbGVjdG9ycy5pc1NoaWZ0RG93bihlKTtcbiAgY29uc3Qgc2VsZWN0ZWRGZWF0dXJlSWRzID0gdGhpcy5nZXRTZWxlY3RlZElkcygpO1xuICBjb25zdCBmZWF0dXJlSWQgPSBlLmZlYXR1cmVUYXJnZXQucHJvcGVydGllcy5pZDtcbiAgY29uc3QgaXNGZWF0dXJlU2VsZWN0ZWQgPSB0aGlzLmlzU2VsZWN0ZWQoZmVhdHVyZUlkKTtcblxuICAvLyBDbGljayAod2l0aG91dCBzaGlmdCkgb24gYW55IHNlbGVjdGVkIGZlYXR1cmUgYnV0IGEgcG9pbnRcbiAgaWYgKCFpc1NoaWZ0Q2xpY2sgJiYgaXNGZWF0dXJlU2VsZWN0ZWQgJiYgdGhpcy5nZXRGZWF0dXJlKGZlYXR1cmVJZCkudHlwZSAhPT0gQ29uc3RhbnRzLmdlb2pzb25UeXBlcy5QT0lOVCkge1xuICAgIC8vIEVudGVyIGRpcmVjdCBzZWxlY3QgbW9kZVxuICAgIHJldHVybiB0aGlzLmNoYW5nZU1vZGUoQ29uc3RhbnRzLm1vZGVzLkRJUkVDVF9TRUxFQ1QsIHtcbiAgICAgIGZlYXR1cmVJZFxuICAgIH0pO1xuICB9XG5cbiAgLy8gU2hpZnQtY2xpY2sgb24gYSBzZWxlY3RlZCBmZWF0dXJlXG4gIGlmIChpc0ZlYXR1cmVTZWxlY3RlZCAmJiBpc1NoaWZ0Q2xpY2spIHtcbiAgICAvLyBEZXNlbGVjdCBpdFxuICAgIHRoaXMuZGVzZWxlY3QoZmVhdHVyZUlkKTtcbiAgICB0aGlzLnVwZGF0ZVVJQ2xhc3Nlcyh7IG1vdXNlOiBDb25zdGFudHMuY3Vyc29ycy5QT0lOVEVSIH0pO1xuICAgIGlmIChzZWxlY3RlZEZlYXR1cmVJZHMubGVuZ3RoID09PSAxKSB7XG4gICAgICBkb3VibGVDbGlja1pvb20uZW5hYmxlKHRoaXMpO1xuICAgIH1cbiAgLy8gU2hpZnQtY2xpY2sgb24gYW4gdW5zZWxlY3RlZCBmZWF0dXJlXG4gIH0gZWxzZSBpZiAoIWlzRmVhdHVyZVNlbGVjdGVkICYmIGlzU2hpZnRDbGljaykge1xuICAgIC8vIEFkZCBpdCB0byB0aGUgc2VsZWN0aW9uXG4gICAgdGhpcy5zZWxlY3QoZmVhdHVyZUlkKTtcbiAgICB0aGlzLnVwZGF0ZVVJQ2xhc3Nlcyh7IG1vdXNlOiBDb25zdGFudHMuY3Vyc29ycy5NT1ZFIH0pO1xuICAvLyBDbGljayAod2l0aG91dCBzaGlmdCkgb24gYW4gdW5zZWxlY3RlZCBmZWF0dXJlXG4gIH0gZWxzZSBpZiAoIWlzRmVhdHVyZVNlbGVjdGVkICYmICFpc1NoaWZ0Q2xpY2spIHtcbiAgICAvLyBNYWtlIGl0IHRoZSBvbmx5IHNlbGVjdGVkIGZlYXR1cmVcbiAgICBzZWxlY3RlZEZlYXR1cmVJZHMuZm9yRWFjaChpZCA9PiB0aGlzLmRvUmVuZGVyKGlkKSk7XG4gICAgdGhpcy5zZXRTZWxlY3RlZChmZWF0dXJlSWQpO1xuICAgIHRoaXMudXBkYXRlVUlDbGFzc2VzKHsgbW91c2U6IENvbnN0YW50cy5jdXJzb3JzLk1PVkUgfSk7XG4gIH1cblxuICAvLyBObyBtYXR0ZXIgd2hhdCwgcmUtcmVuZGVyIHRoZSBjbGlja2VkIGZlYXR1cmVcbiAgdGhpcy5kb1JlbmRlcihmZWF0dXJlSWQpO1xufTtcblxuU2ltcGxlU2VsZWN0Lm9uTW91c2VEb3duID0gZnVuY3Rpb24oc3RhdGUsIGUpIHtcbiAgc3RhdGUuaW5pdGlhbERyYWdQYW5TdGF0ZSA9IHRoaXMubWFwLmRyYWdQYW4uaXNFbmFibGVkKCk7XG4gIGlmIChDb21tb25TZWxlY3RvcnMuaXNBY3RpdmVGZWF0dXJlKGUpKSByZXR1cm4gdGhpcy5zdGFydE9uQWN0aXZlRmVhdHVyZShzdGF0ZSwgZSk7XG4gIGlmICh0aGlzLmRyYXdDb25maWcuYm94U2VsZWN0ICYmIENvbW1vblNlbGVjdG9ycy5pc1NoaWZ0TW91c2Vkb3duKGUpKSByZXR1cm4gdGhpcy5zdGFydEJveFNlbGVjdChzdGF0ZSwgZSk7XG59O1xuXG5TaW1wbGVTZWxlY3Quc3RhcnRCb3hTZWxlY3QgPSBmdW5jdGlvbihzdGF0ZSwgZSkge1xuICB0aGlzLnN0b3BFeHRlbmRlZEludGVyYWN0aW9ucyhzdGF0ZSk7XG4gIHRoaXMubWFwLmRyYWdQYW4uZGlzYWJsZSgpO1xuICAvLyBFbmFibGUgYm94IHNlbGVjdFxuICBzdGF0ZS5ib3hTZWxlY3RTdGFydExvY2F0aW9uID0gbW91c2VFdmVudFBvaW50KGUub3JpZ2luYWxFdmVudCwgdGhpcy5tYXAuZ2V0Q29udGFpbmVyKCkpO1xuICBzdGF0ZS5jYW5Cb3hTZWxlY3QgPSB0cnVlO1xufTtcblxuU2ltcGxlU2VsZWN0Lm9uVG91Y2hTdGFydCA9IGZ1bmN0aW9uKHN0YXRlLCBlKSB7XG4gIGlmIChDb21tb25TZWxlY3RvcnMuaXNBY3RpdmVGZWF0dXJlKGUpKSByZXR1cm4gdGhpcy5zdGFydE9uQWN0aXZlRmVhdHVyZShzdGF0ZSwgZSk7XG59O1xuXG5TaW1wbGVTZWxlY3Qub25EcmFnID0gZnVuY3Rpb24oc3RhdGUsIGUpIHtcbiAgaWYgKHN0YXRlLmNhbkRyYWdNb3ZlKSByZXR1cm4gdGhpcy5kcmFnTW92ZShzdGF0ZSwgZSk7XG4gIGlmICh0aGlzLmRyYXdDb25maWcuYm94U2VsZWN0ICYmIHN0YXRlLmNhbkJveFNlbGVjdCkgcmV0dXJuIHRoaXMud2hpbGVCb3hTZWxlY3Qoc3RhdGUsIGUpO1xufTtcblxuU2ltcGxlU2VsZWN0LndoaWxlQm94U2VsZWN0ID0gZnVuY3Rpb24oc3RhdGUsIGUpIHtcbiAgc3RhdGUuYm94U2VsZWN0aW5nID0gdHJ1ZTtcbiAgdGhpcy51cGRhdGVVSUNsYXNzZXMoeyBtb3VzZTogQ29uc3RhbnRzLmN1cnNvcnMuQUREIH0pO1xuXG4gIC8vIENyZWF0ZSB0aGUgYm94IG5vZGUgaWYgaXQgZG9lc24ndCBleGlzdFxuICBpZiAoIXN0YXRlLmJveFNlbGVjdEVsZW1lbnQpIHtcbiAgICBzdGF0ZS5ib3hTZWxlY3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgc3RhdGUuYm94U2VsZWN0RWxlbWVudC5jbGFzc0xpc3QuYWRkKENvbnN0YW50cy5jbGFzc2VzLkJPWF9TRUxFQ1QpO1xuICAgIHRoaXMubWFwLmdldENvbnRhaW5lcigpLmFwcGVuZENoaWxkKHN0YXRlLmJveFNlbGVjdEVsZW1lbnQpO1xuICB9XG5cbiAgLy8gQWRqdXN0IHRoZSBib3ggbm9kZSdzIHdpZHRoIGFuZCB4eSBwb3NpdGlvblxuICBjb25zdCBjdXJyZW50ID0gbW91c2VFdmVudFBvaW50KGUub3JpZ2luYWxFdmVudCwgdGhpcy5tYXAuZ2V0Q29udGFpbmVyKCkpO1xuICBjb25zdCBtaW5YID0gTWF0aC5taW4oc3RhdGUuYm94U2VsZWN0U3RhcnRMb2NhdGlvbi54LCBjdXJyZW50LngpO1xuICBjb25zdCBtYXhYID0gTWF0aC5tYXgoc3RhdGUuYm94U2VsZWN0U3RhcnRMb2NhdGlvbi54LCBjdXJyZW50LngpO1xuICBjb25zdCBtaW5ZID0gTWF0aC5taW4oc3RhdGUuYm94U2VsZWN0U3RhcnRMb2NhdGlvbi55LCBjdXJyZW50LnkpO1xuICBjb25zdCBtYXhZID0gTWF0aC5tYXgoc3RhdGUuYm94U2VsZWN0U3RhcnRMb2NhdGlvbi55LCBjdXJyZW50LnkpO1xuICBjb25zdCB0cmFuc2xhdGVWYWx1ZSA9IGB0cmFuc2xhdGUoJHttaW5YfXB4LCAke21pbll9cHgpYDtcbiAgc3RhdGUuYm94U2VsZWN0RWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2xhdGVWYWx1ZTtcbiAgc3RhdGUuYm94U2VsZWN0RWxlbWVudC5zdHlsZS5XZWJraXRUcmFuc2Zvcm0gPSB0cmFuc2xhdGVWYWx1ZTtcbiAgc3RhdGUuYm94U2VsZWN0RWxlbWVudC5zdHlsZS53aWR0aCA9IGAke21heFggLSBtaW5YfXB4YDtcbiAgc3RhdGUuYm94U2VsZWN0RWxlbWVudC5zdHlsZS5oZWlnaHQgPSBgJHttYXhZIC0gbWluWX1weGA7XG59O1xuXG5TaW1wbGVTZWxlY3QuZHJhZ01vdmUgPSBmdW5jdGlvbihzdGF0ZSwgZSkge1xuICAvLyBEcmFnZ2luZyB3aGVuIGRyYWcgbW92ZSBpcyBlbmFibGVkXG4gIHN0YXRlLmRyYWdNb3ZpbmcgPSB0cnVlO1xuICBlLm9yaWdpbmFsRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgY29uc3QgZGVsdGEgPSB7XG4gICAgbG5nOiBlLmxuZ0xhdC5sbmcgLSBzdGF0ZS5kcmFnTW92ZUxvY2F0aW9uLmxuZyxcbiAgICBsYXQ6IGUubG5nTGF0LmxhdCAtIHN0YXRlLmRyYWdNb3ZlTG9jYXRpb24ubGF0XG4gIH07XG5cbiAgbW92ZUZlYXR1cmVzKHRoaXMuZ2V0U2VsZWN0ZWQoKSwgZGVsdGEpO1xuXG4gIHN0YXRlLmRyYWdNb3ZlTG9jYXRpb24gPSBlLmxuZ0xhdDtcbn07XG5cblNpbXBsZVNlbGVjdC5vblRvdWNoRW5kID0gU2ltcGxlU2VsZWN0Lm9uTW91c2VVcCA9IGZ1bmN0aW9uKHN0YXRlLCBlKSB7XG4gIC8vIEVuZCBhbnkgZXh0ZW5kZWQgaW50ZXJhY3Rpb25zXG4gIGlmIChzdGF0ZS5kcmFnTW92aW5nKSB7XG4gICAgdGhpcy5maXJlVXBkYXRlKCk7XG4gIH0gZWxzZSBpZiAoc3RhdGUuYm94U2VsZWN0aW5nKSB7XG4gICAgY29uc3QgYmJveCA9IFtcbiAgICAgIHN0YXRlLmJveFNlbGVjdFN0YXJ0TG9jYXRpb24sXG4gICAgICBtb3VzZUV2ZW50UG9pbnQoZS5vcmlnaW5hbEV2ZW50LCB0aGlzLm1hcC5nZXRDb250YWluZXIoKSlcbiAgICBdO1xuICAgIGNvbnN0IGZlYXR1cmVzSW5Cb3ggPSB0aGlzLmZlYXR1cmVzQXQobnVsbCwgYmJveCwgJ2NsaWNrJyk7XG4gICAgY29uc3QgaWRzVG9TZWxlY3QgPSB0aGlzLmdldFVuaXF1ZUlkcyhmZWF0dXJlc0luQm94KVxuICAgICAgLmZpbHRlcihpZCA9PiAhdGhpcy5pc1NlbGVjdGVkKGlkKSk7XG5cbiAgICBpZiAoaWRzVG9TZWxlY3QubGVuZ3RoKSB7XG4gICAgICB0aGlzLnNlbGVjdChpZHNUb1NlbGVjdCk7XG4gICAgICBpZHNUb1NlbGVjdC5mb3JFYWNoKGlkID0+IHRoaXMuZG9SZW5kZXIoaWQpKTtcbiAgICAgIHRoaXMudXBkYXRlVUlDbGFzc2VzKHsgbW91c2U6IENvbnN0YW50cy5jdXJzb3JzLk1PVkUgfSk7XG4gICAgfVxuICB9XG4gIHRoaXMuc3RvcEV4dGVuZGVkSW50ZXJhY3Rpb25zKHN0YXRlKTtcbn07XG5cblNpbXBsZVNlbGVjdC50b0Rpc3BsYXlGZWF0dXJlcyA9IGZ1bmN0aW9uKHN0YXRlLCBnZW9qc29uLCBkaXNwbGF5KSB7XG4gIGdlb2pzb24ucHJvcGVydGllcy5hY3RpdmUgPSAodGhpcy5pc1NlbGVjdGVkKGdlb2pzb24ucHJvcGVydGllcy5pZCkpID9cbiAgICBDb25zdGFudHMuYWN0aXZlU3RhdGVzLkFDVElWRSA6IENvbnN0YW50cy5hY3RpdmVTdGF0ZXMuSU5BQ1RJVkU7XG4gIGRpc3BsYXkoZ2VvanNvbik7XG4gIHRoaXMuZmlyZUFjdGlvbmFibGUoKTtcbiAgaWYgKGdlb2pzb24ucHJvcGVydGllcy5hY3RpdmUgIT09IENvbnN0YW50cy5hY3RpdmVTdGF0ZXMuQUNUSVZFIHx8XG4gICAgZ2VvanNvbi5nZW9tZXRyeS50eXBlID09PSBDb25zdGFudHMuZ2VvanNvblR5cGVzLlBPSU5UKSByZXR1cm47XG4gIGNyZWF0ZVN1cHBsZW1lbnRhcnlQb2ludHMoZ2VvanNvbikuZm9yRWFjaChkaXNwbGF5KTtcbn07XG5cblNpbXBsZVNlbGVjdC5vblRyYXNoID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZGVsZXRlRmVhdHVyZSh0aGlzLmdldFNlbGVjdGVkSWRzKCkpO1xuICB0aGlzLmZpcmVBY3Rpb25hYmxlKCk7XG59O1xuXG5TaW1wbGVTZWxlY3Qub25Db21iaW5lRmVhdHVyZXMgPSBmdW5jdGlvbigpIHtcbiAgY29uc3Qgc2VsZWN0ZWRGZWF0dXJlcyA9IHRoaXMuZ2V0U2VsZWN0ZWQoKTtcblxuICBpZiAoc2VsZWN0ZWRGZWF0dXJlcy5sZW5ndGggPT09IDAgfHwgc2VsZWN0ZWRGZWF0dXJlcy5sZW5ndGggPCAyKSByZXR1cm47XG5cbiAgY29uc3QgY29vcmRpbmF0ZXMgPSBbXSwgZmVhdHVyZXNDb21iaW5lZCA9IFtdO1xuICBjb25zdCBmZWF0dXJlVHlwZSA9IHNlbGVjdGVkRmVhdHVyZXNbMF0udHlwZS5yZXBsYWNlKCdNdWx0aScsICcnKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdGVkRmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBmZWF0dXJlID0gc2VsZWN0ZWRGZWF0dXJlc1tpXTtcblxuICAgIGlmIChmZWF0dXJlLnR5cGUucmVwbGFjZSgnTXVsdGknLCAnJykgIT09IGZlYXR1cmVUeXBlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChmZWF0dXJlLnR5cGUuaW5jbHVkZXMoJ011bHRpJykpIHtcbiAgICAgIGZlYXR1cmUuZ2V0Q29vcmRpbmF0ZXMoKS5mb3JFYWNoKChzdWJjb29yZHMpID0+IHtcbiAgICAgICAgY29vcmRpbmF0ZXMucHVzaChzdWJjb29yZHMpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvb3JkaW5hdGVzLnB1c2goZmVhdHVyZS5nZXRDb29yZGluYXRlcygpKTtcbiAgICB9XG5cbiAgICBmZWF0dXJlc0NvbWJpbmVkLnB1c2goZmVhdHVyZS50b0dlb0pTT04oKSk7XG4gIH1cblxuICBpZiAoZmVhdHVyZXNDb21iaW5lZC5sZW5ndGggPiAxKSB7XG4gICAgY29uc3QgbXVsdGlGZWF0dXJlID0gdGhpcy5uZXdGZWF0dXJlKHtcbiAgICAgIHR5cGU6IENvbnN0YW50cy5nZW9qc29uVHlwZXMuRkVBVFVSRSxcbiAgICAgIHByb3BlcnRpZXM6IGZlYXR1cmVzQ29tYmluZWRbMF0ucHJvcGVydGllcyxcbiAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgIHR5cGU6IGBNdWx0aSR7ZmVhdHVyZVR5cGV9YCxcbiAgICAgICAgY29vcmRpbmF0ZXNcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuYWRkRmVhdHVyZShtdWx0aUZlYXR1cmUpO1xuICAgIHRoaXMuZGVsZXRlRmVhdHVyZSh0aGlzLmdldFNlbGVjdGVkSWRzKCksIHsgc2lsZW50OiB0cnVlIH0pO1xuICAgIHRoaXMuc2V0U2VsZWN0ZWQoW211bHRpRmVhdHVyZS5pZF0pO1xuXG4gICAgdGhpcy5maXJlKENvbnN0YW50cy5ldmVudHMuQ09NQklORV9GRUFUVVJFUywge1xuICAgICAgY3JlYXRlZEZlYXR1cmVzOiBbbXVsdGlGZWF0dXJlLnRvR2VvSlNPTigpXSxcbiAgICAgIGRlbGV0ZWRGZWF0dXJlczogZmVhdHVyZXNDb21iaW5lZFxuICAgIH0pO1xuICB9XG4gIHRoaXMuZmlyZUFjdGlvbmFibGUoKTtcbn07XG5cblNpbXBsZVNlbGVjdC5vblVuY29tYmluZUZlYXR1cmVzID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHNlbGVjdGVkRmVhdHVyZXMgPSB0aGlzLmdldFNlbGVjdGVkKCk7XG4gIGlmIChzZWxlY3RlZEZlYXR1cmVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gIGNvbnN0IGNyZWF0ZWRGZWF0dXJlcyA9IFtdO1xuICBjb25zdCBmZWF0dXJlc1VuY29tYmluZWQgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdGVkRmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBmZWF0dXJlID0gc2VsZWN0ZWRGZWF0dXJlc1tpXTtcblxuICAgIGlmICh0aGlzLmlzSW5zdGFuY2VPZignTXVsdGlGZWF0dXJlJywgZmVhdHVyZSkpIHtcbiAgICAgIGZlYXR1cmUuZ2V0RmVhdHVyZXMoKS5mb3JFYWNoKChzdWJGZWF0dXJlKSA9PiB7XG4gICAgICAgIHRoaXMuYWRkRmVhdHVyZShzdWJGZWF0dXJlKTtcbiAgICAgICAgc3ViRmVhdHVyZS5wcm9wZXJ0aWVzID0gZmVhdHVyZS5wcm9wZXJ0aWVzO1xuICAgICAgICBjcmVhdGVkRmVhdHVyZXMucHVzaChzdWJGZWF0dXJlLnRvR2VvSlNPTigpKTtcbiAgICAgICAgdGhpcy5zZWxlY3QoW3N1YkZlYXR1cmUuaWRdKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kZWxldGVGZWF0dXJlKGZlYXR1cmUuaWQsIHsgc2lsZW50OiB0cnVlIH0pO1xuICAgICAgZmVhdHVyZXNVbmNvbWJpbmVkLnB1c2goZmVhdHVyZS50b0dlb0pTT04oKSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNyZWF0ZWRGZWF0dXJlcy5sZW5ndGggPiAxKSB7XG4gICAgdGhpcy5maXJlKENvbnN0YW50cy5ldmVudHMuVU5DT01CSU5FX0ZFQVRVUkVTLCB7XG4gICAgICBjcmVhdGVkRmVhdHVyZXMsXG4gICAgICBkZWxldGVkRmVhdHVyZXM6IGZlYXR1cmVzVW5jb21iaW5lZFxuICAgIH0pO1xuICB9XG4gIHRoaXMuZmlyZUFjdGlvbmFibGUoKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNpbXBsZVNlbGVjdDtcbiIsImltcG9ydCB7IG5vVGFyZ2V0LCBpc09mTWV0YVR5cGUsIGlzQWN0aXZlRmVhdHVyZSwgaXNJbmFjdGl2ZUZlYXR1cmUsIGlzU2hpZnREb3duIH0gZnJvbSAnLi4vbGliL2NvbW1vbl9zZWxlY3RvcnMuanMnO1xuaW1wb3J0IGNyZWF0ZVN1cHBsZW1lbnRhcnlQb2ludHMgZnJvbSAnLi4vbGliL2NyZWF0ZV9zdXBwbGVtZW50YXJ5X3BvaW50cy5qcyc7XG5pbXBvcnQgY29uc3RyYWluRmVhdHVyZU1vdmVtZW50IGZyb20gJy4uL2xpYi9jb25zdHJhaW5fZmVhdHVyZV9tb3ZlbWVudC5qcyc7XG5pbXBvcnQgZG91YmxlQ2xpY2tab29tIGZyb20gJy4uL2xpYi9kb3VibGVfY2xpY2tfem9vbS5qcyc7XG5pbXBvcnQgKiBhcyBDb25zdGFudHMgZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCBtb3ZlRmVhdHVyZXMgZnJvbSAnLi4vbGliL21vdmVfZmVhdHVyZXMuanMnO1xuXG5jb25zdCBpc1ZlcnRleCA9IGlzT2ZNZXRhVHlwZShDb25zdGFudHMubWV0YS5WRVJURVgpO1xuY29uc3QgaXNNaWRwb2ludCA9IGlzT2ZNZXRhVHlwZShDb25zdGFudHMubWV0YS5NSURQT0lOVCk7XG5cbmNvbnN0IERpcmVjdFNlbGVjdCA9IHt9O1xuXG4vLyBJTlRFUk5BTCBGVUNOVElPTlNcblxuRGlyZWN0U2VsZWN0LmZpcmVVcGRhdGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5maXJlKENvbnN0YW50cy5ldmVudHMuVVBEQVRFLCB7XG4gICAgYWN0aW9uOiBDb25zdGFudHMudXBkYXRlQWN0aW9ucy5DSEFOR0VfQ09PUkRJTkFURVMsXG4gICAgZmVhdHVyZXM6IHRoaXMuZ2V0U2VsZWN0ZWQoKS5tYXAoZiA9PiBmLnRvR2VvSlNPTigpKVxuICB9KTtcbn07XG5cbkRpcmVjdFNlbGVjdC5maXJlQWN0aW9uYWJsZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIHRoaXMuc2V0QWN0aW9uYWJsZVN0YXRlKHtcbiAgICBjb21iaW5lRmVhdHVyZXM6IGZhbHNlLFxuICAgIHVuY29tYmluZUZlYXR1cmVzOiBmYWxzZSxcbiAgICB0cmFzaDogc3RhdGUuc2VsZWN0ZWRDb29yZFBhdGhzLmxlbmd0aCA+IDBcbiAgfSk7XG59O1xuXG5EaXJlY3RTZWxlY3Quc3RhcnREcmFnZ2luZyA9IGZ1bmN0aW9uKHN0YXRlLCBlKSB7XG4gIHN0YXRlLmluaXRpYWxEcmFnUGFuU3RhdGUgPSB0aGlzLm1hcC5kcmFnUGFuLmlzRW5hYmxlZCgpO1xuXG4gIHRoaXMubWFwLmRyYWdQYW4uZGlzYWJsZSgpO1xuICBzdGF0ZS5jYW5EcmFnTW92ZSA9IHRydWU7XG4gIHN0YXRlLmRyYWdNb3ZlTG9jYXRpb24gPSBlLmxuZ0xhdDtcbn07XG5cbkRpcmVjdFNlbGVjdC5zdG9wRHJhZ2dpbmcgPSBmdW5jdGlvbihzdGF0ZSkge1xuICBpZiAoc3RhdGUuY2FuRHJhZ01vdmUgJiYgc3RhdGUuaW5pdGlhbERyYWdQYW5TdGF0ZSA9PT0gdHJ1ZSkge1xuICAgIHRoaXMubWFwLmRyYWdQYW4uZW5hYmxlKCk7XG4gIH1cbiAgc3RhdGUuZHJhZ01vdmluZyA9IGZhbHNlO1xuICBzdGF0ZS5jYW5EcmFnTW92ZSA9IGZhbHNlO1xuICBzdGF0ZS5kcmFnTW92ZUxvY2F0aW9uID0gbnVsbDtcbn07XG5cbkRpcmVjdFNlbGVjdC5vblZlcnRleCA9IGZ1bmN0aW9uIChzdGF0ZSwgZSkge1xuICB0aGlzLnN0YXJ0RHJhZ2dpbmcoc3RhdGUsIGUpO1xuICBjb25zdCBhYm91dCA9IGUuZmVhdHVyZVRhcmdldC5wcm9wZXJ0aWVzO1xuICBjb25zdCBzZWxlY3RlZEluZGV4ID0gc3RhdGUuc2VsZWN0ZWRDb29yZFBhdGhzLmluZGV4T2YoYWJvdXQuY29vcmRfcGF0aCk7XG4gIGlmICghaXNTaGlmdERvd24oZSkgJiYgc2VsZWN0ZWRJbmRleCA9PT0gLTEpIHtcbiAgICBzdGF0ZS5zZWxlY3RlZENvb3JkUGF0aHMgPSBbYWJvdXQuY29vcmRfcGF0aF07XG4gIH0gZWxzZSBpZiAoaXNTaGlmdERvd24oZSkgJiYgc2VsZWN0ZWRJbmRleCA9PT0gLTEpIHtcbiAgICBzdGF0ZS5zZWxlY3RlZENvb3JkUGF0aHMucHVzaChhYm91dC5jb29yZF9wYXRoKTtcbiAgfVxuXG4gIGNvbnN0IHNlbGVjdGVkQ29vcmRpbmF0ZXMgPSB0aGlzLnBhdGhzVG9Db29yZGluYXRlcyhzdGF0ZS5mZWF0dXJlSWQsIHN0YXRlLnNlbGVjdGVkQ29vcmRQYXRocyk7XG4gIHRoaXMuc2V0U2VsZWN0ZWRDb29yZGluYXRlcyhzZWxlY3RlZENvb3JkaW5hdGVzKTtcbn07XG5cbkRpcmVjdFNlbGVjdC5vbk1pZHBvaW50ID0gZnVuY3Rpb24oc3RhdGUsIGUpIHtcbiAgdGhpcy5zdGFydERyYWdnaW5nKHN0YXRlLCBlKTtcbiAgY29uc3QgYWJvdXQgPSBlLmZlYXR1cmVUYXJnZXQucHJvcGVydGllcztcbiAgc3RhdGUuZmVhdHVyZS5hZGRDb29yZGluYXRlKGFib3V0LmNvb3JkX3BhdGgsIGFib3V0LmxuZywgYWJvdXQubGF0KTtcbiAgdGhpcy5maXJlVXBkYXRlKCk7XG4gIHN0YXRlLnNlbGVjdGVkQ29vcmRQYXRocyA9IFthYm91dC5jb29yZF9wYXRoXTtcbn07XG5cbkRpcmVjdFNlbGVjdC5wYXRoc1RvQ29vcmRpbmF0ZXMgPSBmdW5jdGlvbihmZWF0dXJlSWQsIHBhdGhzKSB7XG4gIHJldHVybiBwYXRocy5tYXAoY29vcmRfcGF0aCA9PiAoeyBmZWF0dXJlX2lkOiBmZWF0dXJlSWQsIGNvb3JkX3BhdGggfSkpO1xufTtcblxuRGlyZWN0U2VsZWN0Lm9uRmVhdHVyZSA9IGZ1bmN0aW9uKHN0YXRlLCBlKSB7XG4gIGlmIChzdGF0ZS5zZWxlY3RlZENvb3JkUGF0aHMubGVuZ3RoID09PSAwKSB0aGlzLnN0YXJ0RHJhZ2dpbmcoc3RhdGUsIGUpO1xuICBlbHNlIHRoaXMuc3RvcERyYWdnaW5nKHN0YXRlKTtcbn07XG5cbkRpcmVjdFNlbGVjdC5kcmFnRmVhdHVyZSA9IGZ1bmN0aW9uKHN0YXRlLCBlLCBkZWx0YSkge1xuICBtb3ZlRmVhdHVyZXModGhpcy5nZXRTZWxlY3RlZCgpLCBkZWx0YSk7XG4gIHN0YXRlLmRyYWdNb3ZlTG9jYXRpb24gPSBlLmxuZ0xhdDtcbn07XG5cbkRpcmVjdFNlbGVjdC5kcmFnVmVydGV4ID0gZnVuY3Rpb24oc3RhdGUsIGUsIGRlbHRhKSB7XG4gIGNvbnN0IHNlbGVjdGVkQ29vcmRzID0gc3RhdGUuc2VsZWN0ZWRDb29yZFBhdGhzLm1hcChjb29yZF9wYXRoID0+IHN0YXRlLmZlYXR1cmUuZ2V0Q29vcmRpbmF0ZShjb29yZF9wYXRoKSk7XG4gIGNvbnN0IHNlbGVjdGVkQ29vcmRQb2ludHMgPSBzZWxlY3RlZENvb3Jkcy5tYXAoY29vcmRzID0+ICh7XG4gICAgdHlwZTogQ29uc3RhbnRzLmdlb2pzb25UeXBlcy5GRUFUVVJFLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGdlb21ldHJ5OiB7XG4gICAgICB0eXBlOiBDb25zdGFudHMuZ2VvanNvblR5cGVzLlBPSU5ULFxuICAgICAgY29vcmRpbmF0ZXM6IGNvb3Jkc1xuICAgIH1cbiAgfSkpO1xuXG4gIGNvbnN0IGNvbnN0cmFpbmVkRGVsdGEgPSBjb25zdHJhaW5GZWF0dXJlTW92ZW1lbnQoc2VsZWN0ZWRDb29yZFBvaW50cywgZGVsdGEpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdGVkQ29vcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY29vcmQgPSBzZWxlY3RlZENvb3Jkc1tpXTtcbiAgICBzdGF0ZS5mZWF0dXJlLnVwZGF0ZUNvb3JkaW5hdGUoc3RhdGUuc2VsZWN0ZWRDb29yZFBhdGhzW2ldLCBjb29yZFswXSArIGNvbnN0cmFpbmVkRGVsdGEubG5nLCBjb29yZFsxXSArIGNvbnN0cmFpbmVkRGVsdGEubGF0KTtcbiAgfVxufTtcblxuRGlyZWN0U2VsZWN0LmNsaWNrTm9UYXJnZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2hhbmdlTW9kZShDb25zdGFudHMubW9kZXMuU0lNUExFX1NFTEVDVCk7XG59O1xuXG5EaXJlY3RTZWxlY3QuY2xpY2tJbmFjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jaGFuZ2VNb2RlKENvbnN0YW50cy5tb2Rlcy5TSU1QTEVfU0VMRUNUKTtcbn07XG5cbkRpcmVjdFNlbGVjdC5jbGlja0FjdGl2ZUZlYXR1cmUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgc3RhdGUuc2VsZWN0ZWRDb29yZFBhdGhzID0gW107XG4gIHRoaXMuY2xlYXJTZWxlY3RlZENvb3JkaW5hdGVzKCk7XG4gIHN0YXRlLmZlYXR1cmUuY2hhbmdlZCgpO1xufTtcblxuLy8gRVhURVJOQUwgRlVOQ1RJT05TXG5cbkRpcmVjdFNlbGVjdC5vblNldHVwID0gZnVuY3Rpb24ob3B0cykge1xuICBjb25zdCBmZWF0dXJlSWQgPSBvcHRzLmZlYXR1cmVJZDtcbiAgY29uc3QgZmVhdHVyZSA9IHRoaXMuZ2V0RmVhdHVyZShmZWF0dXJlSWQpO1xuXG4gIGlmICghZmVhdHVyZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3QgcHJvdmlkZSBhIGZlYXR1cmVJZCB0byBlbnRlciBkaXJlY3Rfc2VsZWN0IG1vZGUnKTtcbiAgfVxuXG4gIGlmIChmZWF0dXJlLnR5cGUgPT09IENvbnN0YW50cy5nZW9qc29uVHlwZXMuUE9JTlQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkaXJlY3Rfc2VsZWN0IG1vZGUgZG9lc25cXCd0IGhhbmRsZSBwb2ludCBmZWF0dXJlcycpO1xuICB9XG5cbiAgY29uc3Qgc3RhdGUgPSB7XG4gICAgZmVhdHVyZUlkLFxuICAgIGZlYXR1cmUsXG4gICAgZHJhZ01vdmVMb2NhdGlvbjogb3B0cy5zdGFydFBvcyB8fCBudWxsLFxuICAgIGRyYWdNb3Zpbmc6IGZhbHNlLFxuICAgIGNhbkRyYWdNb3ZlOiBmYWxzZSxcbiAgICBzZWxlY3RlZENvb3JkUGF0aHM6IG9wdHMuY29vcmRQYXRoID8gW29wdHMuY29vcmRQYXRoXSA6IFtdLFxuICB9O1xuXG4gIHRoaXMuc2V0U2VsZWN0ZWRDb29yZGluYXRlcyh0aGlzLnBhdGhzVG9Db29yZGluYXRlcyhmZWF0dXJlSWQsIHN0YXRlLnNlbGVjdGVkQ29vcmRQYXRocykpO1xuICB0aGlzLnNldFNlbGVjdGVkKGZlYXR1cmVJZCk7XG4gIGRvdWJsZUNsaWNrWm9vbS5kaXNhYmxlKHRoaXMpO1xuXG4gIHRoaXMuc2V0QWN0aW9uYWJsZVN0YXRlKHtcbiAgICB0cmFzaDogdHJ1ZVxuICB9KTtcblxuICByZXR1cm4gc3RhdGU7XG59O1xuXG5EaXJlY3RTZWxlY3Qub25TdG9wID0gZnVuY3Rpb24oKSB7XG4gIGRvdWJsZUNsaWNrWm9vbS5lbmFibGUodGhpcyk7XG4gIHRoaXMuY2xlYXJTZWxlY3RlZENvb3JkaW5hdGVzKCk7XG59O1xuXG5EaXJlY3RTZWxlY3QudG9EaXNwbGF5RmVhdHVyZXMgPSBmdW5jdGlvbihzdGF0ZSwgZ2VvanNvbiwgcHVzaCkge1xuICBpZiAoc3RhdGUuZmVhdHVyZUlkID09PSBnZW9qc29uLnByb3BlcnRpZXMuaWQpIHtcbiAgICBnZW9qc29uLnByb3BlcnRpZXMuYWN0aXZlID0gQ29uc3RhbnRzLmFjdGl2ZVN0YXRlcy5BQ1RJVkU7XG4gICAgcHVzaChnZW9qc29uKTtcbiAgICBjcmVhdGVTdXBwbGVtZW50YXJ5UG9pbnRzKGdlb2pzb24sIHtcbiAgICAgIG1hcDogdGhpcy5tYXAsXG4gICAgICBtaWRwb2ludHM6IHRydWUsXG4gICAgICBzZWxlY3RlZFBhdGhzOiBzdGF0ZS5zZWxlY3RlZENvb3JkUGF0aHNcbiAgICB9KS5mb3JFYWNoKHB1c2gpO1xuICB9IGVsc2Uge1xuICAgIGdlb2pzb24ucHJvcGVydGllcy5hY3RpdmUgPSBDb25zdGFudHMuYWN0aXZlU3RhdGVzLklOQUNUSVZFO1xuICAgIHB1c2goZ2VvanNvbik7XG4gIH1cbiAgdGhpcy5maXJlQWN0aW9uYWJsZShzdGF0ZSk7XG59O1xuXG5EaXJlY3RTZWxlY3Qub25UcmFzaCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIC8vIFVzZXMgbnVtYmVyLWF3YXJlIHNvcnRpbmcgdG8gbWFrZSBzdXJlICc5JyA8ICcxMCcuIENvbXBhcmlzb24gaXMgcmV2ZXJzZWQgYmVjYXVzZSB3ZSB3YW50IHRoZW1cbiAgLy8gaW4gcmV2ZXJzZSBvcmRlciBzbyB0aGF0IHdlIGNhbiByZW1vdmUgYnkgaW5kZXggc2FmZWx5LlxuICBzdGF0ZS5zZWxlY3RlZENvb3JkUGF0aHNcbiAgICAuc29ydCgoYSwgYikgPT4gYi5sb2NhbGVDb21wYXJlKGEsICdlbicsIHsgbnVtZXJpYzogdHJ1ZSB9KSlcbiAgICAuZm9yRWFjaChpZCA9PiBzdGF0ZS5mZWF0dXJlLnJlbW92ZUNvb3JkaW5hdGUoaWQpKTtcbiAgdGhpcy5maXJlVXBkYXRlKCk7XG4gIHN0YXRlLnNlbGVjdGVkQ29vcmRQYXRocyA9IFtdO1xuICB0aGlzLmNsZWFyU2VsZWN0ZWRDb29yZGluYXRlcygpO1xuICB0aGlzLmZpcmVBY3Rpb25hYmxlKHN0YXRlKTtcbiAgaWYgKHN0YXRlLmZlYXR1cmUuaXNWYWxpZCgpID09PSBmYWxzZSkge1xuICAgIHRoaXMuZGVsZXRlRmVhdHVyZShbc3RhdGUuZmVhdHVyZUlkXSk7XG4gICAgdGhpcy5jaGFuZ2VNb2RlKENvbnN0YW50cy5tb2Rlcy5TSU1QTEVfU0VMRUNULCB7fSk7XG4gIH1cbn07XG5cbkRpcmVjdFNlbGVjdC5vbk1vdXNlTW92ZSA9IGZ1bmN0aW9uKHN0YXRlLCBlKSB7XG4gIC8vIE9uIG1vdXNlbW92ZSB0aGF0IGlzIG5vdCBhIGRyYWcsIHN0b3AgdmVydGV4IG1vdmVtZW50LlxuICBjb25zdCBpc0ZlYXR1cmUgPSBpc0FjdGl2ZUZlYXR1cmUoZSk7XG4gIGNvbnN0IG9uVmVydGV4ID0gaXNWZXJ0ZXgoZSk7XG4gIGNvbnN0IGlzTWlkUG9pbnQgPSBpc01pZHBvaW50KGUpO1xuICBjb25zdCBub0Nvb3JkcyA9IHN0YXRlLnNlbGVjdGVkQ29vcmRQYXRocy5sZW5ndGggPT09IDA7XG4gIGlmIChpc0ZlYXR1cmUgJiYgbm9Db29yZHMpIHRoaXMudXBkYXRlVUlDbGFzc2VzKHsgbW91c2U6IENvbnN0YW50cy5jdXJzb3JzLk1PVkUgfSk7XG4gIGVsc2UgaWYgKG9uVmVydGV4ICYmICFub0Nvb3JkcykgdGhpcy51cGRhdGVVSUNsYXNzZXMoeyBtb3VzZTogQ29uc3RhbnRzLmN1cnNvcnMuTU9WRSB9KTtcbiAgZWxzZSB0aGlzLnVwZGF0ZVVJQ2xhc3Nlcyh7IG1vdXNlOiBDb25zdGFudHMuY3Vyc29ycy5OT05FIH0pO1xuXG4gIGNvbnN0IGlzRHJhZ2dhYmxlSXRlbSA9IG9uVmVydGV4IHx8IGlzRmVhdHVyZSB8fCBpc01pZFBvaW50O1xuICBpZiAoaXNEcmFnZ2FibGVJdGVtICYmIHN0YXRlLmRyYWdNb3ZpbmcpIHRoaXMuZmlyZVVwZGF0ZSgpO1xuXG4gIHRoaXMuc3RvcERyYWdnaW5nKHN0YXRlKTtcblxuICAvLyBTa2lwIHJlbmRlclxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkRpcmVjdFNlbGVjdC5vbk1vdXNlT3V0ID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgLy8gQXMgc29vbiBhcyB5b3UgbW91c2UgbGVhdmVzIHRoZSBjYW52YXMsIHVwZGF0ZSB0aGUgZmVhdHVyZVxuICBpZiAoc3RhdGUuZHJhZ01vdmluZykgdGhpcy5maXJlVXBkYXRlKCk7XG5cbiAgLy8gU2tpcCByZW5kZXJcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5EaXJlY3RTZWxlY3Qub25Ub3VjaFN0YXJ0ID0gRGlyZWN0U2VsZWN0Lm9uTW91c2VEb3duID0gZnVuY3Rpb24oc3RhdGUsIGUpIHtcbiAgaWYgKGlzVmVydGV4KGUpKSByZXR1cm4gdGhpcy5vblZlcnRleChzdGF0ZSwgZSk7XG4gIGlmIChpc0FjdGl2ZUZlYXR1cmUoZSkpIHJldHVybiB0aGlzLm9uRmVhdHVyZShzdGF0ZSwgZSk7XG4gIGlmIChpc01pZHBvaW50KGUpKSByZXR1cm4gdGhpcy5vbk1pZHBvaW50KHN0YXRlLCBlKTtcbn07XG5cbkRpcmVjdFNlbGVjdC5vbkRyYWcgPSBmdW5jdGlvbihzdGF0ZSwgZSkge1xuICBpZiAoc3RhdGUuY2FuRHJhZ01vdmUgIT09IHRydWUpIHJldHVybjtcbiAgc3RhdGUuZHJhZ01vdmluZyA9IHRydWU7XG4gIGUub3JpZ2luYWxFdmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICBjb25zdCBkZWx0YSA9IHtcbiAgICBsbmc6IGUubG5nTGF0LmxuZyAtIHN0YXRlLmRyYWdNb3ZlTG9jYXRpb24ubG5nLFxuICAgIGxhdDogZS5sbmdMYXQubGF0IC0gc3RhdGUuZHJhZ01vdmVMb2NhdGlvbi5sYXRcbiAgfTtcbiAgaWYgKHN0YXRlLnNlbGVjdGVkQ29vcmRQYXRocy5sZW5ndGggPiAwKSB0aGlzLmRyYWdWZXJ0ZXgoc3RhdGUsIGUsIGRlbHRhKTtcbiAgZWxzZSB0aGlzLmRyYWdGZWF0dXJlKHN0YXRlLCBlLCBkZWx0YSk7XG5cbiAgc3RhdGUuZHJhZ01vdmVMb2NhdGlvbiA9IGUubG5nTGF0O1xufTtcblxuRGlyZWN0U2VsZWN0Lm9uQ2xpY2sgPSBmdW5jdGlvbihzdGF0ZSwgZSkge1xuICBpZiAobm9UYXJnZXQoZSkpIHJldHVybiB0aGlzLmNsaWNrTm9UYXJnZXQoc3RhdGUsIGUpO1xuICBpZiAoaXNBY3RpdmVGZWF0dXJlKGUpKSByZXR1cm4gdGhpcy5jbGlja0FjdGl2ZUZlYXR1cmUoc3RhdGUsIGUpO1xuICBpZiAoaXNJbmFjdGl2ZUZlYXR1cmUoZSkpIHJldHVybiB0aGlzLmNsaWNrSW5hY3RpdmUoc3RhdGUsIGUpO1xuICB0aGlzLnN0b3BEcmFnZ2luZyhzdGF0ZSk7XG59O1xuXG5EaXJlY3RTZWxlY3Qub25UYXAgPSBmdW5jdGlvbihzdGF0ZSwgZSkge1xuICBpZiAobm9UYXJnZXQoZSkpIHJldHVybiB0aGlzLmNsaWNrTm9UYXJnZXQoc3RhdGUsIGUpO1xuICBpZiAoaXNBY3RpdmVGZWF0dXJlKGUpKSByZXR1cm4gdGhpcy5jbGlja0FjdGl2ZUZlYXR1cmUoc3RhdGUsIGUpO1xuICBpZiAoaXNJbmFjdGl2ZUZlYXR1cmUoZSkpIHJldHVybiB0aGlzLmNsaWNrSW5hY3RpdmUoc3RhdGUsIGUpO1xufTtcblxuRGlyZWN0U2VsZWN0Lm9uVG91Y2hFbmQgPSBEaXJlY3RTZWxlY3Qub25Nb3VzZVVwID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmRyYWdNb3ZpbmcpIHtcbiAgICB0aGlzLmZpcmVVcGRhdGUoKTtcbiAgfVxuICB0aGlzLnN0b3BEcmFnZ2luZyhzdGF0ZSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBEaXJlY3RTZWxlY3Q7XG5cbiIsImltcG9ydCAqIGFzIENvbW1vblNlbGVjdG9ycyBmcm9tICcuLi9saWIvY29tbW9uX3NlbGVjdG9ycy5qcyc7XG5pbXBvcnQgKiBhcyBDb25zdGFudHMgZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcblxuY29uc3QgRHJhd1BvaW50ID0ge307XG5cbkRyYXdQb2ludC5vblNldHVwID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHBvaW50ID0gdGhpcy5uZXdGZWF0dXJlKHtcbiAgICB0eXBlOiBDb25zdGFudHMuZ2VvanNvblR5cGVzLkZFQVRVUkUsXG4gICAgcHJvcGVydGllczoge30sXG4gICAgZ2VvbWV0cnk6IHtcbiAgICAgIHR5cGU6IENvbnN0YW50cy5nZW9qc29uVHlwZXMuUE9JTlQsXG4gICAgICBjb29yZGluYXRlczogW11cbiAgICB9XG4gIH0pO1xuXG4gIHRoaXMuYWRkRmVhdHVyZShwb2ludCk7XG5cbiAgdGhpcy5jbGVhclNlbGVjdGVkRmVhdHVyZXMoKTtcbiAgdGhpcy51cGRhdGVVSUNsYXNzZXMoeyBtb3VzZTogQ29uc3RhbnRzLmN1cnNvcnMuQUREIH0pO1xuICB0aGlzLmFjdGl2YXRlVUlCdXR0b24oQ29uc3RhbnRzLnR5cGVzLlBPSU5UKTtcblxuICB0aGlzLnNldEFjdGlvbmFibGVTdGF0ZSh7XG4gICAgdHJhc2g6IHRydWVcbiAgfSk7XG5cbiAgcmV0dXJuIHsgcG9pbnQgfTtcbn07XG5cbkRyYXdQb2ludC5zdG9wRHJhd2luZ0FuZFJlbW92ZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIHRoaXMuZGVsZXRlRmVhdHVyZShbc3RhdGUucG9pbnQuaWRdLCB7IHNpbGVudDogdHJ1ZSB9KTtcbiAgdGhpcy5jaGFuZ2VNb2RlKENvbnN0YW50cy5tb2Rlcy5TSU1QTEVfU0VMRUNUKTtcbn07XG5cbkRyYXdQb2ludC5vblRhcCA9IERyYXdQb2ludC5vbkNsaWNrID0gZnVuY3Rpb24oc3RhdGUsIGUpIHtcbiAgdGhpcy51cGRhdGVVSUNsYXNzZXMoeyBtb3VzZTogQ29uc3RhbnRzLmN1cnNvcnMuTU9WRSB9KTtcbiAgc3RhdGUucG9pbnQudXBkYXRlQ29vcmRpbmF0ZSgnJywgZS5sbmdMYXQubG5nLCBlLmxuZ0xhdC5sYXQpO1xuICB0aGlzLmZpcmUoQ29uc3RhbnRzLmV2ZW50cy5DUkVBVEUsIHtcbiAgICBmZWF0dXJlczogW3N0YXRlLnBvaW50LnRvR2VvSlNPTigpXVxuICB9KTtcbiAgdGhpcy5jaGFuZ2VNb2RlKENvbnN0YW50cy5tb2Rlcy5TSU1QTEVfU0VMRUNULCB7IGZlYXR1cmVJZHM6IFtzdGF0ZS5wb2ludC5pZF0gfSk7XG59O1xuXG5EcmF3UG9pbnQub25TdG9wID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgdGhpcy5hY3RpdmF0ZVVJQnV0dG9uKCk7XG4gIGlmICghc3RhdGUucG9pbnQuZ2V0Q29vcmRpbmF0ZSgpLmxlbmd0aCkge1xuICAgIHRoaXMuZGVsZXRlRmVhdHVyZShbc3RhdGUucG9pbnQuaWRdLCB7IHNpbGVudDogdHJ1ZSB9KTtcbiAgfVxufTtcblxuRHJhd1BvaW50LnRvRGlzcGxheUZlYXR1cmVzID0gZnVuY3Rpb24oc3RhdGUsIGdlb2pzb24sIGRpc3BsYXkpIHtcbiAgLy8gTmV2ZXIgcmVuZGVyIHRoZSBwb2ludCB3ZSdyZSBkcmF3aW5nXG4gIGNvbnN0IGlzQWN0aXZlUG9pbnQgPSBnZW9qc29uLnByb3BlcnRpZXMuaWQgPT09IHN0YXRlLnBvaW50LmlkO1xuICBnZW9qc29uLnByb3BlcnRpZXMuYWN0aXZlID0gKGlzQWN0aXZlUG9pbnQpID8gQ29uc3RhbnRzLmFjdGl2ZVN0YXRlcy5BQ1RJVkUgOiBDb25zdGFudHMuYWN0aXZlU3RhdGVzLklOQUNUSVZFO1xuICBpZiAoIWlzQWN0aXZlUG9pbnQpIHJldHVybiBkaXNwbGF5KGdlb2pzb24pO1xufTtcblxuRHJhd1BvaW50Lm9uVHJhc2ggPSBEcmF3UG9pbnQuc3RvcERyYXdpbmdBbmRSZW1vdmU7XG5cbkRyYXdQb2ludC5vbktleVVwID0gZnVuY3Rpb24oc3RhdGUsIGUpIHtcbiAgaWYgKENvbW1vblNlbGVjdG9ycy5pc0VzY2FwZUtleShlKSB8fCBDb21tb25TZWxlY3RvcnMuaXNFbnRlcktleShlKSkge1xuICAgIHJldHVybiB0aGlzLnN0b3BEcmF3aW5nQW5kUmVtb3ZlKHN0YXRlLCBlKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgRHJhd1BvaW50O1xuIiwiZnVuY3Rpb24gaXNFdmVudEF0Q29vcmRpbmF0ZXMoZXZlbnQsIGNvb3JkaW5hdGVzKSB7XG4gIGlmICghZXZlbnQubG5nTGF0KSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBldmVudC5sbmdMYXQubG5nID09PSBjb29yZGluYXRlc1swXSAmJiBldmVudC5sbmdMYXQubGF0ID09PSBjb29yZGluYXRlc1sxXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNFdmVudEF0Q29vcmRpbmF0ZXM7XG4iLCJpbXBvcnQgKiBhcyBDb21tb25TZWxlY3RvcnMgZnJvbSAnLi4vbGliL2NvbW1vbl9zZWxlY3RvcnMuanMnO1xuaW1wb3J0IGRvdWJsZUNsaWNrWm9vbSBmcm9tICcuLi9saWIvZG91YmxlX2NsaWNrX3pvb20uanMnO1xuaW1wb3J0ICogYXMgQ29uc3RhbnRzIGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgaXNFdmVudEF0Q29vcmRpbmF0ZXMgZnJvbSAnLi4vbGliL2lzX2V2ZW50X2F0X2Nvb3JkaW5hdGVzLmpzJztcbmltcG9ydCBjcmVhdGVWZXJ0ZXggZnJvbSAnLi4vbGliL2NyZWF0ZV92ZXJ0ZXguanMnO1xuXG5jb25zdCBEcmF3UG9seWdvbiA9IHt9O1xuXG5EcmF3UG9seWdvbi5vblNldHVwID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHBvbHlnb24gPSB0aGlzLm5ld0ZlYXR1cmUoe1xuICAgIHR5cGU6IENvbnN0YW50cy5nZW9qc29uVHlwZXMuRkVBVFVSRSxcbiAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICBnZW9tZXRyeToge1xuICAgICAgdHlwZTogQ29uc3RhbnRzLmdlb2pzb25UeXBlcy5QT0xZR09OLFxuICAgICAgY29vcmRpbmF0ZXM6IFtbXV1cbiAgICB9XG4gIH0pO1xuXG4gIHRoaXMuYWRkRmVhdHVyZShwb2x5Z29uKTtcblxuICB0aGlzLmNsZWFyU2VsZWN0ZWRGZWF0dXJlcygpO1xuICBkb3VibGVDbGlja1pvb20uZGlzYWJsZSh0aGlzKTtcbiAgdGhpcy51cGRhdGVVSUNsYXNzZXMoeyBtb3VzZTogQ29uc3RhbnRzLmN1cnNvcnMuQUREIH0pO1xuICB0aGlzLmFjdGl2YXRlVUlCdXR0b24oQ29uc3RhbnRzLnR5cGVzLlBPTFlHT04pO1xuICB0aGlzLnNldEFjdGlvbmFibGVTdGF0ZSh7XG4gICAgdHJhc2g6IHRydWVcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBwb2x5Z29uLFxuICAgIGN1cnJlbnRWZXJ0ZXhQb3NpdGlvbjogMFxuICB9O1xufTtcblxuRHJhd1BvbHlnb24uY2xpY2tBbnl3aGVyZSA9IGZ1bmN0aW9uKHN0YXRlLCBlKSB7XG4gIGlmIChzdGF0ZS5jdXJyZW50VmVydGV4UG9zaXRpb24gPiAwICYmIGlzRXZlbnRBdENvb3JkaW5hdGVzKGUsIHN0YXRlLnBvbHlnb24uY29vcmRpbmF0ZXNbMF1bc3RhdGUuY3VycmVudFZlcnRleFBvc2l0aW9uIC0gMV0pKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hhbmdlTW9kZShDb25zdGFudHMubW9kZXMuU0lNUExFX1NFTEVDVCwgeyBmZWF0dXJlSWRzOiBbc3RhdGUucG9seWdvbi5pZF0gfSk7XG4gIH1cbiAgdGhpcy51cGRhdGVVSUNsYXNzZXMoeyBtb3VzZTogQ29uc3RhbnRzLmN1cnNvcnMuQUREIH0pO1xuICBzdGF0ZS5wb2x5Z29uLnVwZGF0ZUNvb3JkaW5hdGUoYDAuJHtzdGF0ZS5jdXJyZW50VmVydGV4UG9zaXRpb259YCwgZS5sbmdMYXQubG5nLCBlLmxuZ0xhdC5sYXQpO1xuICBzdGF0ZS5jdXJyZW50VmVydGV4UG9zaXRpb24rKztcbiAgc3RhdGUucG9seWdvbi51cGRhdGVDb29yZGluYXRlKGAwLiR7c3RhdGUuY3VycmVudFZlcnRleFBvc2l0aW9ufWAsIGUubG5nTGF0LmxuZywgZS5sbmdMYXQubGF0KTtcbn07XG5cbkRyYXdQb2x5Z29uLmNsaWNrT25WZXJ0ZXggPSBmdW5jdGlvbihzdGF0ZSkge1xuICByZXR1cm4gdGhpcy5jaGFuZ2VNb2RlKENvbnN0YW50cy5tb2Rlcy5TSU1QTEVfU0VMRUNULCB7IGZlYXR1cmVJZHM6IFtzdGF0ZS5wb2x5Z29uLmlkXSB9KTtcbn07XG5cbkRyYXdQb2x5Z29uLm9uTW91c2VNb3ZlID0gZnVuY3Rpb24oc3RhdGUsIGUpIHtcbiAgc3RhdGUucG9seWdvbi51cGRhdGVDb29yZGluYXRlKGAwLiR7c3RhdGUuY3VycmVudFZlcnRleFBvc2l0aW9ufWAsIGUubG5nTGF0LmxuZywgZS5sbmdMYXQubGF0KTtcbiAgaWYgKENvbW1vblNlbGVjdG9ycy5pc1ZlcnRleChlKSkge1xuICAgIHRoaXMudXBkYXRlVUlDbGFzc2VzKHsgbW91c2U6IENvbnN0YW50cy5jdXJzb3JzLlBPSU5URVIgfSk7XG4gIH1cbn07XG5cbkRyYXdQb2x5Z29uLm9uVGFwID0gRHJhd1BvbHlnb24ub25DbGljayA9IGZ1bmN0aW9uKHN0YXRlLCBlKSB7XG4gIGlmIChDb21tb25TZWxlY3RvcnMuaXNWZXJ0ZXgoZSkpIHJldHVybiB0aGlzLmNsaWNrT25WZXJ0ZXgoc3RhdGUsIGUpO1xuICByZXR1cm4gdGhpcy5jbGlja0FueXdoZXJlKHN0YXRlLCBlKTtcbn07XG5cbkRyYXdQb2x5Z29uLm9uS2V5VXAgPSBmdW5jdGlvbihzdGF0ZSwgZSkge1xuICBpZiAoQ29tbW9uU2VsZWN0b3JzLmlzRXNjYXBlS2V5KGUpKSB7XG4gICAgdGhpcy5kZWxldGVGZWF0dXJlKFtzdGF0ZS5wb2x5Z29uLmlkXSwgeyBzaWxlbnQ6IHRydWUgfSk7XG4gICAgdGhpcy5jaGFuZ2VNb2RlKENvbnN0YW50cy5tb2Rlcy5TSU1QTEVfU0VMRUNUKTtcbiAgfSBlbHNlIGlmIChDb21tb25TZWxlY3RvcnMuaXNFbnRlcktleShlKSkge1xuICAgIHRoaXMuY2hhbmdlTW9kZShDb25zdGFudHMubW9kZXMuU0lNUExFX1NFTEVDVCwgeyBmZWF0dXJlSWRzOiBbc3RhdGUucG9seWdvbi5pZF0gfSk7XG4gIH1cbn07XG5cbkRyYXdQb2x5Z29uLm9uU3RvcCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIHRoaXMudXBkYXRlVUlDbGFzc2VzKHsgbW91c2U6IENvbnN0YW50cy5jdXJzb3JzLk5PTkUgfSk7XG4gIGRvdWJsZUNsaWNrWm9vbS5lbmFibGUodGhpcyk7XG4gIHRoaXMuYWN0aXZhdGVVSUJ1dHRvbigpO1xuXG4gIC8vIGNoZWNrIHRvIHNlZSBpZiB3ZSd2ZSBkZWxldGVkIHRoaXMgZmVhdHVyZVxuICBpZiAodGhpcy5nZXRGZWF0dXJlKHN0YXRlLnBvbHlnb24uaWQpID09PSB1bmRlZmluZWQpIHJldHVybjtcblxuICAvL3JlbW92ZSBsYXN0IGFkZGVkIGNvb3JkaW5hdGVcbiAgc3RhdGUucG9seWdvbi5yZW1vdmVDb29yZGluYXRlKGAwLiR7c3RhdGUuY3VycmVudFZlcnRleFBvc2l0aW9ufWApO1xuICBpZiAoc3RhdGUucG9seWdvbi5pc1ZhbGlkKCkpIHtcbiAgICB0aGlzLmZpcmUoQ29uc3RhbnRzLmV2ZW50cy5DUkVBVEUsIHtcbiAgICAgIGZlYXR1cmVzOiBbc3RhdGUucG9seWdvbi50b0dlb0pTT04oKV1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlbGV0ZUZlYXR1cmUoW3N0YXRlLnBvbHlnb24uaWRdLCB7IHNpbGVudDogdHJ1ZSB9KTtcbiAgICB0aGlzLmNoYW5nZU1vZGUoQ29uc3RhbnRzLm1vZGVzLlNJTVBMRV9TRUxFQ1QsIHt9LCB7IHNpbGVudDogdHJ1ZSB9KTtcbiAgfVxufTtcblxuRHJhd1BvbHlnb24udG9EaXNwbGF5RmVhdHVyZXMgPSBmdW5jdGlvbihzdGF0ZSwgZ2VvanNvbiwgZGlzcGxheSkge1xuICBjb25zdCBpc0FjdGl2ZVBvbHlnb24gPSBnZW9qc29uLnByb3BlcnRpZXMuaWQgPT09IHN0YXRlLnBvbHlnb24uaWQ7XG4gIGdlb2pzb24ucHJvcGVydGllcy5hY3RpdmUgPSAoaXNBY3RpdmVQb2x5Z29uKSA/IENvbnN0YW50cy5hY3RpdmVTdGF0ZXMuQUNUSVZFIDogQ29uc3RhbnRzLmFjdGl2ZVN0YXRlcy5JTkFDVElWRTtcbiAgaWYgKCFpc0FjdGl2ZVBvbHlnb24pIHJldHVybiBkaXNwbGF5KGdlb2pzb24pO1xuXG4gIC8vIERvbid0IHJlbmRlciBhIHBvbHlnb24gdW50aWwgaXQgaGFzIHR3byBwb3NpdGlvbnNcbiAgLy8gKGFuZCBhIDNyZCB3aGljaCBpcyBqdXN0IHRoZSBmaXJzdCByZXBlYXRlZClcbiAgaWYgKGdlb2pzb24uZ2VvbWV0cnkuY29vcmRpbmF0ZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgY29uc3QgY29vcmRpbmF0ZUNvdW50ID0gZ2VvanNvbi5nZW9tZXRyeS5jb29yZGluYXRlc1swXS5sZW5ndGg7XG4gIC8vIDIgY29vcmRpbmF0ZXMgYWZ0ZXIgc2VsZWN0aW5nIGEgZHJhdyB0eXBlXG4gIC8vIDMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGZpcnN0IHBvaW50XG4gIGlmIChjb29yZGluYXRlQ291bnQgPCAzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGdlb2pzb24ucHJvcGVydGllcy5tZXRhID0gQ29uc3RhbnRzLm1ldGEuRkVBVFVSRTtcbiAgZGlzcGxheShjcmVhdGVWZXJ0ZXgoc3RhdGUucG9seWdvbi5pZCwgZ2VvanNvbi5nZW9tZXRyeS5jb29yZGluYXRlc1swXVswXSwgJzAuMCcsIGZhbHNlKSk7XG4gIGlmIChjb29yZGluYXRlQ291bnQgPiAzKSB7XG4gICAgLy8gQWRkIGEgc3RhcnQgcG9zaXRpb24gbWFya2VyIHRvIHRoZSBtYXAsIGNsaWNraW5nIG9uIHRoaXMgd2lsbCBmaW5pc2ggdGhlIGZlYXR1cmVcbiAgICAvLyBUaGlzIHNob3VsZCBvbmx5IGJlIHNob3duIHdoZW4gd2UncmUgaW4gYSB2YWxpZCBzcG90XG4gICAgY29uc3QgZW5kUG9zID0gZ2VvanNvbi5nZW9tZXRyeS5jb29yZGluYXRlc1swXS5sZW5ndGggLSAzO1xuICAgIGRpc3BsYXkoY3JlYXRlVmVydGV4KHN0YXRlLnBvbHlnb24uaWQsIGdlb2pzb24uZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF1bZW5kUG9zXSwgYDAuJHtlbmRQb3N9YCwgZmFsc2UpKTtcbiAgfVxuICBpZiAoY29vcmRpbmF0ZUNvdW50IDw9IDQpIHtcbiAgICAvLyBJZiB3ZSd2ZSBvbmx5IGRyYXduIHR3byBwb3NpdGlvbnMgKHBsdXMgdGhlIGNsb3NlciksXG4gICAgLy8gbWFrZSBhIExpbmVTdHJpbmcgaW5zdGVhZCBvZiBhIFBvbHlnb25cbiAgICBjb25zdCBsaW5lQ29vcmRpbmF0ZXMgPSBbXG4gICAgICBbZ2VvanNvbi5nZW9tZXRyeS5jb29yZGluYXRlc1swXVswXVswXSwgZ2VvanNvbi5nZW9tZXRyeS5jb29yZGluYXRlc1swXVswXVsxXV0sIFtnZW9qc29uLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdWzFdWzBdLCBnZW9qc29uLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdWzFdWzFdXVxuICAgIF07XG4gICAgLy8gY3JlYXRlIGFuIGluaXRpYWwgdmVydGV4IHNvIHRoYXQgd2UgY2FuIHRyYWNrIHRoZSBmaXJzdCBwb2ludCBvbiBtb2JpbGUgZGV2aWNlc1xuICAgIGRpc3BsYXkoe1xuICAgICAgdHlwZTogQ29uc3RhbnRzLmdlb2pzb25UeXBlcy5GRUFUVVJFLFxuICAgICAgcHJvcGVydGllczogZ2VvanNvbi5wcm9wZXJ0aWVzLFxuICAgICAgZ2VvbWV0cnk6IHtcbiAgICAgICAgY29vcmRpbmF0ZXM6IGxpbmVDb29yZGluYXRlcyxcbiAgICAgICAgdHlwZTogQ29uc3RhbnRzLmdlb2pzb25UeXBlcy5MSU5FX1NUUklOR1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChjb29yZGluYXRlQ291bnQgPT09IDMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgLy8gcmVuZGVyIHRoZSBQb2x5Z29uXG4gIHJldHVybiBkaXNwbGF5KGdlb2pzb24pO1xufTtcblxuRHJhd1BvbHlnb24ub25UcmFzaCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIHRoaXMuZGVsZXRlRmVhdHVyZShbc3RhdGUucG9seWdvbi5pZF0sIHsgc2lsZW50OiB0cnVlIH0pO1xuICB0aGlzLmNoYW5nZU1vZGUoQ29uc3RhbnRzLm1vZGVzLlNJTVBMRV9TRUxFQ1QpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRHJhd1BvbHlnb247XG4iLCJpbXBvcnQgKiBhcyBDb21tb25TZWxlY3RvcnMgZnJvbSAnLi4vbGliL2NvbW1vbl9zZWxlY3RvcnMuanMnO1xuaW1wb3J0IGlzRXZlbnRBdENvb3JkaW5hdGVzIGZyb20gJy4uL2xpYi9pc19ldmVudF9hdF9jb29yZGluYXRlcy5qcyc7XG5pbXBvcnQgZG91YmxlQ2xpY2tab29tIGZyb20gJy4uL2xpYi9kb3VibGVfY2xpY2tfem9vbS5qcyc7XG5pbXBvcnQgKiBhcyBDb25zdGFudHMgZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCBjcmVhdGVWZXJ0ZXggZnJvbSAnLi4vbGliL2NyZWF0ZV92ZXJ0ZXguanMnO1xuXG5jb25zdCBEcmF3TGluZVN0cmluZyA9IHt9O1xuXG5EcmF3TGluZVN0cmluZy5vblNldHVwID0gZnVuY3Rpb24ob3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgY29uc3QgZmVhdHVyZUlkID0gb3B0cy5mZWF0dXJlSWQ7XG5cbiAgbGV0IGxpbmUsIGN1cnJlbnRWZXJ0ZXhQb3NpdGlvbjtcbiAgbGV0IGRpcmVjdGlvbiA9ICdmb3J3YXJkJztcbiAgaWYgKGZlYXR1cmVJZCkge1xuICAgIGxpbmUgPSB0aGlzLmdldEZlYXR1cmUoZmVhdHVyZUlkKTtcbiAgICBpZiAoIWxpbmUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgYSBmZWF0dXJlIHdpdGggdGhlIHByb3ZpZGVkIGZlYXR1cmVJZCcpO1xuICAgIH1cbiAgICBsZXQgZnJvbSA9IG9wdHMuZnJvbTtcbiAgICBpZiAoZnJvbSAmJiBmcm9tLnR5cGUgPT09ICdGZWF0dXJlJyAmJiBmcm9tLmdlb21ldHJ5ICYmIGZyb20uZ2VvbWV0cnkudHlwZSA9PT0gJ1BvaW50Jykge1xuICAgICAgZnJvbSA9IGZyb20uZ2VvbWV0cnk7XG4gICAgfVxuICAgIGlmIChmcm9tICYmIGZyb20udHlwZSA9PT0gJ1BvaW50JyAmJiBmcm9tLmNvb3JkaW5hdGVzICYmIGZyb20uY29vcmRpbmF0ZXMubGVuZ3RoID09PSAyKSB7XG4gICAgICBmcm9tID0gZnJvbS5jb29yZGluYXRlcztcbiAgICB9XG4gICAgaWYgKCFmcm9tIHx8ICFBcnJheS5pc0FycmF5KGZyb20pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BsZWFzZSB1c2UgdGhlIGBmcm9tYCBwcm9wZXJ0eSB0byBpbmRpY2F0ZSB3aGljaCBwb2ludCB0byBjb250aW51ZSB0aGUgbGluZSBmcm9tJyk7XG4gICAgfVxuICAgIGNvbnN0IGxhc3RDb29yZCA9IGxpbmUuY29vcmRpbmF0ZXMubGVuZ3RoIC0gMTtcbiAgICBpZiAobGluZS5jb29yZGluYXRlc1tsYXN0Q29vcmRdWzBdID09PSBmcm9tWzBdICYmIGxpbmUuY29vcmRpbmF0ZXNbbGFzdENvb3JkXVsxXSA9PT0gZnJvbVsxXSkge1xuICAgICAgY3VycmVudFZlcnRleFBvc2l0aW9uID0gbGFzdENvb3JkICsgMTtcbiAgICAgIC8vIGFkZCBvbmUgbmV3IGNvb3JkaW5hdGUgdG8gY29udGludWUgZnJvbVxuICAgICAgbGluZS5hZGRDb29yZGluYXRlKGN1cnJlbnRWZXJ0ZXhQb3NpdGlvbiwgLi4ubGluZS5jb29yZGluYXRlc1tsYXN0Q29vcmRdKTtcbiAgICB9IGVsc2UgaWYgKGxpbmUuY29vcmRpbmF0ZXNbMF1bMF0gPT09IGZyb21bMF0gJiYgbGluZS5jb29yZGluYXRlc1swXVsxXSA9PT0gZnJvbVsxXSkge1xuICAgICAgZGlyZWN0aW9uID0gJ2JhY2t3YXJkcyc7XG4gICAgICBjdXJyZW50VmVydGV4UG9zaXRpb24gPSAwO1xuICAgICAgLy8gYWRkIG9uZSBuZXcgY29vcmRpbmF0ZSB0byBjb250aW51ZSBmcm9tXG4gICAgICBsaW5lLmFkZENvb3JkaW5hdGUoY3VycmVudFZlcnRleFBvc2l0aW9uLCAuLi5saW5lLmNvb3JkaW5hdGVzWzBdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgZnJvbWAgc2hvdWxkIG1hdGNoIHRoZSBwb2ludCBhdCBlaXRoZXIgdGhlIHN0YXJ0IG9yIHRoZSBlbmQgb2YgdGhlIHByb3ZpZGVkIExpbmVTdHJpbmcnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGluZSA9IHRoaXMubmV3RmVhdHVyZSh7XG4gICAgICB0eXBlOiBDb25zdGFudHMuZ2VvanNvblR5cGVzLkZFQVRVUkUsXG4gICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgIHR5cGU6IENvbnN0YW50cy5nZW9qc29uVHlwZXMuTElORV9TVFJJTkcsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBbXVxuICAgICAgfVxuICAgIH0pO1xuICAgIGN1cnJlbnRWZXJ0ZXhQb3NpdGlvbiA9IDA7XG4gICAgdGhpcy5hZGRGZWF0dXJlKGxpbmUpO1xuICB9XG5cbiAgdGhpcy5jbGVhclNlbGVjdGVkRmVhdHVyZXMoKTtcbiAgZG91YmxlQ2xpY2tab29tLmRpc2FibGUodGhpcyk7XG4gIHRoaXMudXBkYXRlVUlDbGFzc2VzKHsgbW91c2U6IENvbnN0YW50cy5jdXJzb3JzLkFERCB9KTtcbiAgdGhpcy5hY3RpdmF0ZVVJQnV0dG9uKENvbnN0YW50cy50eXBlcy5MSU5FKTtcbiAgdGhpcy5zZXRBY3Rpb25hYmxlU3RhdGUoe1xuICAgIHRyYXNoOiB0cnVlXG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgbGluZSxcbiAgICBjdXJyZW50VmVydGV4UG9zaXRpb24sXG4gICAgZGlyZWN0aW9uXG4gIH07XG59O1xuXG5EcmF3TGluZVN0cmluZy5jbGlja0FueXdoZXJlID0gZnVuY3Rpb24oc3RhdGUsIGUpIHtcbiAgaWYgKHN0YXRlLmN1cnJlbnRWZXJ0ZXhQb3NpdGlvbiA+IDAgJiYgaXNFdmVudEF0Q29vcmRpbmF0ZXMoZSwgc3RhdGUubGluZS5jb29yZGluYXRlc1tzdGF0ZS5jdXJyZW50VmVydGV4UG9zaXRpb24gLSAxXSkgfHxcbiAgICAgIHN0YXRlLmRpcmVjdGlvbiA9PT0gJ2JhY2t3YXJkcycgJiYgaXNFdmVudEF0Q29vcmRpbmF0ZXMoZSwgc3RhdGUubGluZS5jb29yZGluYXRlc1tzdGF0ZS5jdXJyZW50VmVydGV4UG9zaXRpb24gKyAxXSkpIHtcbiAgICByZXR1cm4gdGhpcy5jaGFuZ2VNb2RlKENvbnN0YW50cy5tb2Rlcy5TSU1QTEVfU0VMRUNULCB7IGZlYXR1cmVJZHM6IFtzdGF0ZS5saW5lLmlkXSB9KTtcbiAgfVxuICB0aGlzLnVwZGF0ZVVJQ2xhc3Nlcyh7IG1vdXNlOiBDb25zdGFudHMuY3Vyc29ycy5BREQgfSk7XG4gIHN0YXRlLmxpbmUudXBkYXRlQ29vcmRpbmF0ZShzdGF0ZS5jdXJyZW50VmVydGV4UG9zaXRpb24sIGUubG5nTGF0LmxuZywgZS5sbmdMYXQubGF0KTtcbiAgaWYgKHN0YXRlLmRpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnKSB7XG4gICAgc3RhdGUuY3VycmVudFZlcnRleFBvc2l0aW9uKys7XG4gICAgc3RhdGUubGluZS51cGRhdGVDb29yZGluYXRlKHN0YXRlLmN1cnJlbnRWZXJ0ZXhQb3NpdGlvbiwgZS5sbmdMYXQubG5nLCBlLmxuZ0xhdC5sYXQpO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmxpbmUuYWRkQ29vcmRpbmF0ZSgwLCBlLmxuZ0xhdC5sbmcsIGUubG5nTGF0LmxhdCk7XG4gIH1cbn07XG5cbkRyYXdMaW5lU3RyaW5nLmNsaWNrT25WZXJ0ZXggPSBmdW5jdGlvbihzdGF0ZSkge1xuICByZXR1cm4gdGhpcy5jaGFuZ2VNb2RlKENvbnN0YW50cy5tb2Rlcy5TSU1QTEVfU0VMRUNULCB7IGZlYXR1cmVJZHM6IFtzdGF0ZS5saW5lLmlkXSB9KTtcbn07XG5cbkRyYXdMaW5lU3RyaW5nLm9uTW91c2VNb3ZlID0gZnVuY3Rpb24oc3RhdGUsIGUpIHtcbiAgc3RhdGUubGluZS51cGRhdGVDb29yZGluYXRlKHN0YXRlLmN1cnJlbnRWZXJ0ZXhQb3NpdGlvbiwgZS5sbmdMYXQubG5nLCBlLmxuZ0xhdC5sYXQpO1xuICBpZiAoQ29tbW9uU2VsZWN0b3JzLmlzVmVydGV4KGUpKSB7XG4gICAgdGhpcy51cGRhdGVVSUNsYXNzZXMoeyBtb3VzZTogQ29uc3RhbnRzLmN1cnNvcnMuUE9JTlRFUiB9KTtcbiAgfVxufTtcblxuRHJhd0xpbmVTdHJpbmcub25UYXAgPSBEcmF3TGluZVN0cmluZy5vbkNsaWNrID0gZnVuY3Rpb24oc3RhdGUsIGUpIHtcbiAgaWYgKENvbW1vblNlbGVjdG9ycy5pc1ZlcnRleChlKSkgcmV0dXJuIHRoaXMuY2xpY2tPblZlcnRleChzdGF0ZSwgZSk7XG4gIHRoaXMuY2xpY2tBbnl3aGVyZShzdGF0ZSwgZSk7XG59O1xuXG5EcmF3TGluZVN0cmluZy5vbktleVVwID0gZnVuY3Rpb24oc3RhdGUsIGUpIHtcbiAgaWYgKENvbW1vblNlbGVjdG9ycy5pc0VudGVyS2V5KGUpKSB7XG4gICAgdGhpcy5jaGFuZ2VNb2RlKENvbnN0YW50cy5tb2Rlcy5TSU1QTEVfU0VMRUNULCB7IGZlYXR1cmVJZHM6IFtzdGF0ZS5saW5lLmlkXSB9KTtcbiAgfSBlbHNlIGlmIChDb21tb25TZWxlY3RvcnMuaXNFc2NhcGVLZXkoZSkpIHtcbiAgICB0aGlzLmRlbGV0ZUZlYXR1cmUoW3N0YXRlLmxpbmUuaWRdLCB7IHNpbGVudDogdHJ1ZSB9KTtcbiAgICB0aGlzLmNoYW5nZU1vZGUoQ29uc3RhbnRzLm1vZGVzLlNJTVBMRV9TRUxFQ1QpO1xuICB9XG59O1xuXG5EcmF3TGluZVN0cmluZy5vblN0b3AgPSBmdW5jdGlvbihzdGF0ZSkge1xuICBkb3VibGVDbGlja1pvb20uZW5hYmxlKHRoaXMpO1xuICB0aGlzLmFjdGl2YXRlVUlCdXR0b24oKTtcblxuICAvLyBjaGVjayB0byBzZWUgaWYgd2UndmUgZGVsZXRlZCB0aGlzIGZlYXR1cmVcbiAgaWYgKHRoaXMuZ2V0RmVhdHVyZShzdGF0ZS5saW5lLmlkKSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgLy9yZW1vdmUgbGFzdCBhZGRlZCBjb29yZGluYXRlXG4gIHN0YXRlLmxpbmUucmVtb3ZlQ29vcmRpbmF0ZShgJHtzdGF0ZS5jdXJyZW50VmVydGV4UG9zaXRpb259YCk7XG4gIGlmIChzdGF0ZS5saW5lLmlzVmFsaWQoKSkge1xuICAgIHRoaXMuZmlyZShDb25zdGFudHMuZXZlbnRzLkNSRUFURSwge1xuICAgICAgZmVhdHVyZXM6IFtzdGF0ZS5saW5lLnRvR2VvSlNPTigpXVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZGVsZXRlRmVhdHVyZShbc3RhdGUubGluZS5pZF0sIHsgc2lsZW50OiB0cnVlIH0pO1xuICAgIHRoaXMuY2hhbmdlTW9kZShDb25zdGFudHMubW9kZXMuU0lNUExFX1NFTEVDVCwge30sIHsgc2lsZW50OiB0cnVlIH0pO1xuICB9XG59O1xuXG5EcmF3TGluZVN0cmluZy5vblRyYXNoID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgdGhpcy5kZWxldGVGZWF0dXJlKFtzdGF0ZS5saW5lLmlkXSwgeyBzaWxlbnQ6IHRydWUgfSk7XG4gIHRoaXMuY2hhbmdlTW9kZShDb25zdGFudHMubW9kZXMuU0lNUExFX1NFTEVDVCk7XG59O1xuXG5EcmF3TGluZVN0cmluZy50b0Rpc3BsYXlGZWF0dXJlcyA9IGZ1bmN0aW9uKHN0YXRlLCBnZW9qc29uLCBkaXNwbGF5KSB7XG4gIGNvbnN0IGlzQWN0aXZlTGluZSA9IGdlb2pzb24ucHJvcGVydGllcy5pZCA9PT0gc3RhdGUubGluZS5pZDtcbiAgZ2VvanNvbi5wcm9wZXJ0aWVzLmFjdGl2ZSA9IChpc0FjdGl2ZUxpbmUpID8gQ29uc3RhbnRzLmFjdGl2ZVN0YXRlcy5BQ1RJVkUgOiBDb25zdGFudHMuYWN0aXZlU3RhdGVzLklOQUNUSVZFO1xuICBpZiAoIWlzQWN0aXZlTGluZSkgcmV0dXJuIGRpc3BsYXkoZ2VvanNvbik7XG4gIC8vIE9ubHkgcmVuZGVyIHRoZSBsaW5lIGlmIGl0IGhhcyBhdCBsZWFzdCBvbmUgcmVhbCBjb29yZGluYXRlXG4gIGlmIChnZW9qc29uLmdlb21ldHJ5LmNvb3JkaW5hdGVzLmxlbmd0aCA8IDIpIHJldHVybjtcbiAgZ2VvanNvbi5wcm9wZXJ0aWVzLm1ldGEgPSBDb25zdGFudHMubWV0YS5GRUFUVVJFO1xuICBkaXNwbGF5KGNyZWF0ZVZlcnRleChcbiAgICBzdGF0ZS5saW5lLmlkLFxuICAgIGdlb2pzb24uZ2VvbWV0cnkuY29vcmRpbmF0ZXNbc3RhdGUuZGlyZWN0aW9uID09PSAnZm9yd2FyZCcgPyBnZW9qc29uLmdlb21ldHJ5LmNvb3JkaW5hdGVzLmxlbmd0aCAtIDIgOiAxXSxcbiAgICBgJHtzdGF0ZS5kaXJlY3Rpb24gPT09ICdmb3J3YXJkJyA/IGdlb2pzb24uZ2VvbWV0cnkuY29vcmRpbmF0ZXMubGVuZ3RoIC0gMiA6IDF9YCxcbiAgICBmYWxzZVxuICApKTtcblxuICBkaXNwbGF5KGdlb2pzb24pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRHJhd0xpbmVTdHJpbmc7XG4iLCJcbmltcG9ydCBzaW1wbGVfc2VsZWN0IGZyb20gJy4vc2ltcGxlX3NlbGVjdC5qcyc7XG5pbXBvcnQgZGlyZWN0X3NlbGVjdCBmcm9tICcuL2RpcmVjdF9zZWxlY3QuanMnO1xuaW1wb3J0IGRyYXdfcG9pbnQgZnJvbSAnLi9kcmF3X3BvaW50LmpzJztcbmltcG9ydCBkcmF3X3BvbHlnb24gZnJvbSAnLi9kcmF3X3BvbHlnb24uanMnO1xuaW1wb3J0IGRyYXdfbGluZV9zdHJpbmcgZnJvbSAnLi9kcmF3X2xpbmVfc3RyaW5nLmpzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzaW1wbGVfc2VsZWN0LFxuICBkaXJlY3Rfc2VsZWN0LFxuICBkcmF3X3BvaW50LFxuICBkcmF3X3BvbHlnb24sXG4gIGRyYXdfbGluZV9zdHJpbmcsXG59O1xuIiwiaW1wb3J0ICogYXMgQ29uc3RhbnRzIGZyb20gJy4vY29uc3RhbnRzLmpzJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL2xpYi90aGVtZS5qcyc7XG5pbXBvcnQgbW9kZXMgZnJvbSAnLi9tb2Rlcy9pbmRleC5qcyc7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICBkZWZhdWx0TW9kZTogQ29uc3RhbnRzLm1vZGVzLlNJTVBMRV9TRUxFQ1QsXG4gIGtleWJpbmRpbmdzOiB0cnVlLFxuICB0b3VjaEVuYWJsZWQ6IHRydWUsXG4gIGNsaWNrQnVmZmVyOiAyLFxuICB0b3VjaEJ1ZmZlcjogMjUsXG4gIGJveFNlbGVjdDogdHJ1ZSxcbiAgZGlzcGxheUNvbnRyb2xzRGVmYXVsdDogdHJ1ZSxcbiAgc3R5bGVzLFxuICBtb2RlcyxcbiAgY29udHJvbHM6IHt9LFxuICB1c2VyUHJvcGVydGllczogZmFsc2UsXG4gIHN1cHByZXNzQVBJRXZlbnRzOiB0cnVlXG59O1xuXG5jb25zdCBzaG93Q29udHJvbHMgPSB7XG4gIHBvaW50OiB0cnVlLFxuICBsaW5lX3N0cmluZzogdHJ1ZSxcbiAgcG9seWdvbjogdHJ1ZSxcbiAgdHJhc2g6IHRydWUsXG4gIGNvbWJpbmVfZmVhdHVyZXM6IHRydWUsXG4gIHVuY29tYmluZV9mZWF0dXJlczogdHJ1ZVxufTtcblxuY29uc3QgaGlkZUNvbnRyb2xzID0ge1xuICBwb2ludDogZmFsc2UsXG4gIGxpbmVfc3RyaW5nOiBmYWxzZSxcbiAgcG9seWdvbjogZmFsc2UsXG4gIHRyYXNoOiBmYWxzZSxcbiAgY29tYmluZV9mZWF0dXJlczogZmFsc2UsXG4gIHVuY29tYmluZV9mZWF0dXJlczogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIGFkZFNvdXJjZXMoc3R5bGVzLCBzb3VyY2VCdWNrZXQpIHtcbiAgcmV0dXJuIHN0eWxlcy5tYXAoKHN0eWxlKSA9PiB7XG4gICAgaWYgKHN0eWxlLnNvdXJjZSkgcmV0dXJuIHN0eWxlO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdHlsZSwge1xuICAgICAgaWQ6IGAke3N0eWxlLmlkfS4ke3NvdXJjZUJ1Y2tldH1gLFxuICAgICAgc291cmNlOiAoc291cmNlQnVja2V0ID09PSAnaG90JykgPyBDb25zdGFudHMuc291cmNlcy5IT1QgOiBDb25zdGFudHMuc291cmNlcy5DT0xEXG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvcHRpb25zID0ge30pIHtcbiAgbGV0IHdpdGhEZWZhdWx0cyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpO1xuXG4gIGlmICghb3B0aW9ucy5jb250cm9scykge1xuICAgIHdpdGhEZWZhdWx0cy5jb250cm9scyA9IHt9O1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuZGlzcGxheUNvbnRyb2xzRGVmYXVsdCA9PT0gZmFsc2UpIHtcbiAgICB3aXRoRGVmYXVsdHMuY29udHJvbHMgPSBPYmplY3QuYXNzaWduKHt9LCBoaWRlQ29udHJvbHMsIG9wdGlvbnMuY29udHJvbHMpO1xuICB9IGVsc2Uge1xuICAgIHdpdGhEZWZhdWx0cy5jb250cm9scyA9IE9iamVjdC5hc3NpZ24oe30sIHNob3dDb250cm9scywgb3B0aW9ucy5jb250cm9scyk7XG4gIH1cblxuICB3aXRoRGVmYXVsdHMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgd2l0aERlZmF1bHRzKTtcblxuICAvLyBMYXllcnMgd2l0aCBhIHNoYXJlZCBzb3VyY2Ugc2hvdWxkIGJlIGFkamFjZW50IGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gIHdpdGhEZWZhdWx0cy5zdHlsZXMgPSBhZGRTb3VyY2VzKHdpdGhEZWZhdWx0cy5zdHlsZXMsICdjb2xkJykuY29uY2F0KGFkZFNvdXJjZXMod2l0aERlZmF1bHRzLnN0eWxlcywgJ2hvdCcpKTtcblxuICByZXR1cm4gd2l0aERlZmF1bHRzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShhLm1hcChpZCA9PiBpZCkuc29ydCgpKSA9PT0gSlNPTi5zdHJpbmdpZnkoYi5tYXAoaWQgPT4gaWQpLnNvcnQoKSk7XG59XG4iLCJpbXBvcnQgaXNFcXVhbCBmcm9tICdmYXN0LWRlZXAtZXF1YWwnO1xuaW1wb3J0IG5vcm1hbGl6ZSBmcm9tICdAbWFwYm94L2dlb2pzb24tbm9ybWFsaXplJztcbmltcG9ydCB7Z2VuZXJhdGVJRH0gZnJvbSAnLi9saWIvaWQuanMnO1xuaW1wb3J0IGZlYXR1cmVzQXQgZnJvbSAnLi9saWIvZmVhdHVyZXNfYXQuanMnO1xuaW1wb3J0IHN0cmluZ1NldHNBcmVFcXVhbCBmcm9tICcuL2xpYi9zdHJpbmdfc2V0c19hcmVfZXF1YWwuanMnO1xuaW1wb3J0ICogYXMgQ29uc3RhbnRzIGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmltcG9ydCBTdHJpbmdTZXQgZnJvbSAnLi9saWIvc3RyaW5nX3NldC5qcyc7XG5cbmltcG9ydCBQb2x5Z29uIGZyb20gJy4vZmVhdHVyZV90eXBlcy9wb2x5Z29uLmpzJztcbmltcG9ydCBMaW5lU3RyaW5nIGZyb20gJy4vZmVhdHVyZV90eXBlcy9saW5lX3N0cmluZy5qcyc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi9mZWF0dXJlX3R5cGVzL3BvaW50LmpzJztcbmltcG9ydCBNdWx0aUZlYXR1cmUgZnJvbSAnLi9mZWF0dXJlX3R5cGVzL211bHRpX2ZlYXR1cmUuanMnO1xuXG5jb25zdCBmZWF0dXJlVHlwZXMgPSB7XG4gIFBvbHlnb24sXG4gIExpbmVTdHJpbmcsXG4gIFBvaW50LFxuICBNdWx0aVBvbHlnb246IE11bHRpRmVhdHVyZSxcbiAgTXVsdGlMaW5lU3RyaW5nOiBNdWx0aUZlYXR1cmUsXG4gIE11bHRpUG9pbnQ6IE11bHRpRmVhdHVyZVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY3R4LCBhcGkpIHtcbiAgYXBpLm1vZGVzID0gQ29uc3RhbnRzLm1vZGVzO1xuXG4gIC8vIEFQSSBkb2Vzbid0IGVtaXQgZXZlbnRzIGJ5IGRlZmF1bHRcbiAgY29uc3Qgc2lsZW50ID0gY3R4Lm9wdGlvbnMuc3VwcHJlc3NBUElFdmVudHMgIT09IHVuZGVmaW5lZCA/ICEhY3R4Lm9wdGlvbnMuc3VwcHJlc3NBUElFdmVudHMgOiB0cnVlO1xuXG4gIGFwaS5nZXRGZWF0dXJlSWRzQXQgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIGNvbnN0IGZlYXR1cmVzID0gZmVhdHVyZXNBdC5jbGljayh7IHBvaW50IH0sIG51bGwsIGN0eCk7XG4gICAgcmV0dXJuIGZlYXR1cmVzLm1hcChmZWF0dXJlID0+IGZlYXR1cmUucHJvcGVydGllcy5pZCk7XG4gIH07XG5cbiAgYXBpLmdldFNlbGVjdGVkSWRzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGN0eC5zdG9yZS5nZXRTZWxlY3RlZElkcygpO1xuICB9O1xuXG4gIGFwaS5nZXRTZWxlY3RlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBDb25zdGFudHMuZ2VvanNvblR5cGVzLkZFQVRVUkVfQ09MTEVDVElPTixcbiAgICAgIGZlYXR1cmVzOiBjdHguc3RvcmUuZ2V0U2VsZWN0ZWRJZHMoKS5tYXAoaWQgPT4gY3R4LnN0b3JlLmdldChpZCkpLm1hcChmZWF0dXJlID0+IGZlYXR1cmUudG9HZW9KU09OKCkpXG4gICAgfTtcbiAgfTtcblxuICBhcGkuZ2V0U2VsZWN0ZWRQb2ludHMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogQ29uc3RhbnRzLmdlb2pzb25UeXBlcy5GRUFUVVJFX0NPTExFQ1RJT04sXG4gICAgICBmZWF0dXJlczogY3R4LnN0b3JlLmdldFNlbGVjdGVkQ29vcmRpbmF0ZXMoKS5tYXAoY29vcmRpbmF0ZSA9PiAoe1xuICAgICAgICB0eXBlOiBDb25zdGFudHMuZ2VvanNvblR5cGVzLkZFQVRVUkUsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBnZW9tZXRyeToge1xuICAgICAgICAgIHR5cGU6IENvbnN0YW50cy5nZW9qc29uVHlwZXMuUE9JTlQsXG4gICAgICAgICAgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGUuY29vcmRpbmF0ZXNcbiAgICAgICAgfVxuICAgICAgfSkpXG4gICAgfTtcbiAgfTtcblxuICBhcGkuc2V0ID0gZnVuY3Rpb24oZmVhdHVyZUNvbGxlY3Rpb24pIHtcbiAgICBpZiAoZmVhdHVyZUNvbGxlY3Rpb24udHlwZSA9PT0gdW5kZWZpbmVkIHx8IGZlYXR1cmVDb2xsZWN0aW9uLnR5cGUgIT09IENvbnN0YW50cy5nZW9qc29uVHlwZXMuRkVBVFVSRV9DT0xMRUNUSU9OIHx8ICFBcnJheS5pc0FycmF5KGZlYXR1cmVDb2xsZWN0aW9uLmZlYXR1cmVzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEZlYXR1cmVDb2xsZWN0aW9uJyk7XG4gICAgfVxuICAgIGNvbnN0IHJlbmRlckJhdGNoID0gY3R4LnN0b3JlLmNyZWF0ZVJlbmRlckJhdGNoKCk7XG4gICAgbGV0IHRvRGVsZXRlID0gY3R4LnN0b3JlLmdldEFsbElkcygpLnNsaWNlKCk7XG4gICAgY29uc3QgbmV3SWRzID0gYXBpLmFkZChmZWF0dXJlQ29sbGVjdGlvbik7XG4gICAgY29uc3QgbmV3SWRzTG9va3VwID0gbmV3IFN0cmluZ1NldChuZXdJZHMpO1xuXG4gICAgdG9EZWxldGUgPSB0b0RlbGV0ZS5maWx0ZXIoaWQgPT4gIW5ld0lkc0xvb2t1cC5oYXMoaWQpKTtcbiAgICBpZiAodG9EZWxldGUubGVuZ3RoKSB7XG4gICAgICBhcGkuZGVsZXRlKHRvRGVsZXRlKTtcbiAgICB9XG5cbiAgICByZW5kZXJCYXRjaCgpO1xuICAgIHJldHVybiBuZXdJZHM7XG4gIH07XG5cbiAgYXBpLmFkZCA9IGZ1bmN0aW9uKGdlb2pzb24pIHtcbiAgICBjb25zdCBmZWF0dXJlQ29sbGVjdGlvbiA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkobm9ybWFsaXplKGdlb2pzb24pKSk7XG5cbiAgICBjb25zdCBpZHMgPSBmZWF0dXJlQ29sbGVjdGlvbi5mZWF0dXJlcy5tYXAoKGZlYXR1cmUpID0+IHtcbiAgICAgIGZlYXR1cmUuaWQgPSBmZWF0dXJlLmlkIHx8IGdlbmVyYXRlSUQoKTtcblxuICAgICAgaWYgKGZlYXR1cmUuZ2VvbWV0cnkgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGdlb21ldHJ5OiBudWxsJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjdHguc3RvcmUuZ2V0KGZlYXR1cmUuaWQpID09PSB1bmRlZmluZWQgfHwgY3R4LnN0b3JlLmdldChmZWF0dXJlLmlkKS50eXBlICE9PSBmZWF0dXJlLmdlb21ldHJ5LnR5cGUpIHtcbiAgICAgICAgLy8gSWYgdGhlIGZlYXR1cmUgaGFzIG5vdCB5ZXQgYmVlbiBjcmVhdGVkIC4uLlxuICAgICAgICBjb25zdCBNb2RlbCA9IGZlYXR1cmVUeXBlc1tmZWF0dXJlLmdlb21ldHJ5LnR5cGVdO1xuICAgICAgICBpZiAoTW9kZWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBnZW9tZXRyeSB0eXBlOiAke2ZlYXR1cmUuZ2VvbWV0cnkudHlwZX0uYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW50ZXJuYWxGZWF0dXJlID0gbmV3IE1vZGVsKGN0eCwgZmVhdHVyZSk7XG4gICAgICAgIGN0eC5zdG9yZS5hZGQoaW50ZXJuYWxGZWF0dXJlLCB7IHNpbGVudCB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIGEgZmVhdHVyZSBvZiB0aGF0IGlkIGhhcyBhbHJlYWR5IGJlZW4gY3JlYXRlZCwgYW5kIHdlIGFyZSBzd2FwcGluZyBpdCBvdXQgLi4uXG4gICAgICAgIGNvbnN0IGludGVybmFsRmVhdHVyZSA9IGN0eC5zdG9yZS5nZXQoZmVhdHVyZS5pZCk7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsUHJvcGVydGllcyA9IGludGVybmFsRmVhdHVyZS5wcm9wZXJ0aWVzO1xuICAgICAgICBpbnRlcm5hbEZlYXR1cmUucHJvcGVydGllcyA9IGZlYXR1cmUucHJvcGVydGllcztcbiAgICAgICAgaWYgKCFpc0VxdWFsKG9yaWdpbmFsUHJvcGVydGllcywgZmVhdHVyZS5wcm9wZXJ0aWVzKSkge1xuICAgICAgICAgIGN0eC5zdG9yZS5mZWF0dXJlQ2hhbmdlZChpbnRlcm5hbEZlYXR1cmUuaWQsIHsgc2lsZW50IH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNFcXVhbChpbnRlcm5hbEZlYXR1cmUuZ2V0Q29vcmRpbmF0ZXMoKSwgZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcykpIHtcbiAgICAgICAgICBpbnRlcm5hbEZlYXR1cmUuaW5jb21pbmdDb29yZHMoZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmZWF0dXJlLmlkO1xuICAgIH0pO1xuXG4gICAgY3R4LnN0b3JlLnJlbmRlcigpO1xuICAgIHJldHVybiBpZHM7XG4gIH07XG5cblxuICBhcGkuZ2V0ID0gZnVuY3Rpb24oaWQpIHtcbiAgICBjb25zdCBmZWF0dXJlID0gY3R4LnN0b3JlLmdldChpZCk7XG4gICAgaWYgKGZlYXR1cmUpIHtcbiAgICAgIHJldHVybiBmZWF0dXJlLnRvR2VvSlNPTigpO1xuICAgIH1cbiAgfTtcblxuICBhcGkuZ2V0QWxsID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IENvbnN0YW50cy5nZW9qc29uVHlwZXMuRkVBVFVSRV9DT0xMRUNUSU9OLFxuICAgICAgZmVhdHVyZXM6IGN0eC5zdG9yZS5nZXRBbGwoKS5tYXAoZmVhdHVyZSA9PiBmZWF0dXJlLnRvR2VvSlNPTigpKVxuICAgIH07XG4gIH07XG5cbiAgYXBpLmRlbGV0ZSA9IGZ1bmN0aW9uKGZlYXR1cmVJZHMpIHtcbiAgICBjdHguc3RvcmUuZGVsZXRlKGZlYXR1cmVJZHMsIHsgc2lsZW50IH0pO1xuICAgIC8vIElmIHdlIHdlcmUgaW4gZGlyZWN0IHNlbGVjdCBtb2RlIGFuZCBvdXIgc2VsZWN0ZWQgZmVhdHVyZSBubyBsb25nZXIgZXhpc3RzXG4gICAgLy8gKGJlY2F1c2UgaXQgd2FzIGRlbGV0ZWQpLCB3ZSBuZWVkIHRvIGdldCBvdXQgb2YgdGhhdCBtb2RlLlxuICAgIGlmIChhcGkuZ2V0TW9kZSgpID09PSBDb25zdGFudHMubW9kZXMuRElSRUNUX1NFTEVDVCAmJiAhY3R4LnN0b3JlLmdldFNlbGVjdGVkSWRzKCkubGVuZ3RoKSB7XG4gICAgICBjdHguZXZlbnRzLmNoYW5nZU1vZGUoQ29uc3RhbnRzLm1vZGVzLlNJTVBMRV9TRUxFQ1QsIHVuZGVmaW5lZCwgeyBzaWxlbnQgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN0eC5zdG9yZS5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXBpO1xuICB9O1xuXG4gIGFwaS5kZWxldGVBbGwgPSBmdW5jdGlvbigpIHtcbiAgICBjdHguc3RvcmUuZGVsZXRlKGN0eC5zdG9yZS5nZXRBbGxJZHMoKSwgeyBzaWxlbnQgfSk7XG4gICAgLy8gSWYgd2Ugd2VyZSBpbiBkaXJlY3Qgc2VsZWN0IG1vZGUsIG5vdyBvdXIgc2VsZWN0ZWQgZmVhdHVyZSBubyBsb25nZXIgZXhpc3RzLFxuICAgIC8vIHNvIGVzY2FwZSB0aGF0IG1vZGUuXG4gICAgaWYgKGFwaS5nZXRNb2RlKCkgPT09IENvbnN0YW50cy5tb2Rlcy5ESVJFQ1RfU0VMRUNUKSB7XG4gICAgICBjdHguZXZlbnRzLmNoYW5nZU1vZGUoQ29uc3RhbnRzLm1vZGVzLlNJTVBMRV9TRUxFQ1QsIHVuZGVmaW5lZCwgeyBzaWxlbnQgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN0eC5zdG9yZS5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXBpO1xuICB9O1xuXG4gIGFwaS5jaGFuZ2VNb2RlID0gZnVuY3Rpb24obW9kZSwgbW9kZU9wdGlvbnMgPSB7fSkge1xuICAgIC8vIEF2b2lkIGNoYW5naW5nIG1vZGVzIGp1c3QgdG8gcmUtc2VsZWN0IHdoYXQncyBhbHJlYWR5IHNlbGVjdGVkXG4gICAgaWYgKG1vZGUgPT09IENvbnN0YW50cy5tb2Rlcy5TSU1QTEVfU0VMRUNUICYmIGFwaS5nZXRNb2RlKCkgPT09IENvbnN0YW50cy5tb2Rlcy5TSU1QTEVfU0VMRUNUKSB7XG4gICAgICBpZiAoc3RyaW5nU2V0c0FyZUVxdWFsKChtb2RlT3B0aW9ucy5mZWF0dXJlSWRzIHx8IFtdKSwgY3R4LnN0b3JlLmdldFNlbGVjdGVkSWRzKCkpKSByZXR1cm4gYXBpO1xuICAgICAgLy8gQW5kIGlmIHdlIGFyZSBjaGFuZ2luZyB0aGUgc2VsZWN0aW9uIHdpdGhpbiBzaW1wbGVfc2VsZWN0IG1vZGUsIGp1c3QgY2hhbmdlIHRoZSBzZWxlY3Rpb24sXG4gICAgICAvLyBpbnN0ZWFkIG9mIHN0b3BwaW5nIGFuZCByZS1zdGFydGluZyB0aGUgbW9kZVxuICAgICAgY3R4LnN0b3JlLnNldFNlbGVjdGVkKG1vZGVPcHRpb25zLmZlYXR1cmVJZHMsIHsgc2lsZW50IH0pO1xuICAgICAgY3R4LnN0b3JlLnJlbmRlcigpO1xuICAgICAgcmV0dXJuIGFwaTtcbiAgICB9XG5cbiAgICBpZiAobW9kZSA9PT0gQ29uc3RhbnRzLm1vZGVzLkRJUkVDVF9TRUxFQ1QgJiYgYXBpLmdldE1vZGUoKSA9PT0gQ29uc3RhbnRzLm1vZGVzLkRJUkVDVF9TRUxFQ1QgJiZcbiAgICAgIG1vZGVPcHRpb25zLmZlYXR1cmVJZCA9PT0gY3R4LnN0b3JlLmdldFNlbGVjdGVkSWRzKClbMF0pIHtcbiAgICAgIHJldHVybiBhcGk7XG4gICAgfVxuXG4gICAgY3R4LmV2ZW50cy5jaGFuZ2VNb2RlKG1vZGUsIG1vZGVPcHRpb25zLCB7IHNpbGVudCB9KTtcbiAgICByZXR1cm4gYXBpO1xuICB9O1xuXG4gIGFwaS5nZXRNb2RlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGN0eC5ldmVudHMuZ2V0TW9kZSgpO1xuICB9O1xuXG4gIGFwaS50cmFzaCA9IGZ1bmN0aW9uKCkge1xuICAgIGN0eC5ldmVudHMudHJhc2goeyBzaWxlbnQgfSk7XG4gICAgcmV0dXJuIGFwaTtcbiAgfTtcblxuICBhcGkuY29tYmluZUZlYXR1cmVzID0gZnVuY3Rpb24oKSB7XG4gICAgY3R4LmV2ZW50cy5jb21iaW5lRmVhdHVyZXMoeyBzaWxlbnQgfSk7XG4gICAgcmV0dXJuIGFwaTtcbiAgfTtcblxuICBhcGkudW5jb21iaW5lRmVhdHVyZXMgPSBmdW5jdGlvbigpIHtcbiAgICBjdHguZXZlbnRzLnVuY29tYmluZUZlYXR1cmVzKHsgc2lsZW50IH0pO1xuICAgIHJldHVybiBhcGk7XG4gIH07XG5cbiAgYXBpLnNldEZlYXR1cmVQcm9wZXJ0eSA9IGZ1bmN0aW9uKGZlYXR1cmVJZCwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgY3R4LnN0b3JlLnNldEZlYXR1cmVQcm9wZXJ0eShmZWF0dXJlSWQsIHByb3BlcnR5LCB2YWx1ZSwgeyBzaWxlbnQgfSk7XG4gICAgcmV0dXJuIGFwaTtcbiAgfTtcblxuICByZXR1cm4gYXBpO1xufVxuIiwiaW1wb3J0IHJ1blNldHVwIGZyb20gJy4vc3JjL3NldHVwLmpzJztcbmltcG9ydCBzZXR1cE9wdGlvbnMgZnJvbSAnLi9zcmMvb3B0aW9ucy5qcyc7XG5pbXBvcnQgc2V0dXBBUEkgZnJvbSAnLi9zcmMvYXBpLmpzJztcbmltcG9ydCBtb2RlcyBmcm9tICcuL3NyYy9tb2Rlcy9pbmRleC5qcyc7XG5pbXBvcnQgKiBhcyBDb25zdGFudHMgZnJvbSAnLi9zcmMvY29uc3RhbnRzLmpzJztcbmltcG9ydCAqIGFzIGxpYiBmcm9tICcuL3NyYy9saWIvaW5kZXguanMnO1xuXG5jb25zdCBzZXR1cERyYXcgPSBmdW5jdGlvbihvcHRpb25zLCBhcGkpIHtcbiAgb3B0aW9ucyA9IHNldHVwT3B0aW9ucyhvcHRpb25zKTtcblxuICBjb25zdCBjdHggPSB7XG4gICAgb3B0aW9uc1xuICB9O1xuXG4gIGFwaSA9IHNldHVwQVBJKGN0eCwgYXBpKTtcbiAgY3R4LmFwaSA9IGFwaTtcblxuICBjb25zdCBzZXR1cCA9IHJ1blNldHVwKGN0eCk7XG5cbiAgYXBpLm9uQWRkID0gc2V0dXAub25BZGQ7XG4gIGFwaS5vblJlbW92ZSA9IHNldHVwLm9uUmVtb3ZlO1xuICBhcGkudHlwZXMgPSBDb25zdGFudHMudHlwZXM7XG4gIGFwaS5vcHRpb25zID0gb3B0aW9ucztcblxuICByZXR1cm4gYXBpO1xufTtcblxuZnVuY3Rpb24gTWFwYm94RHJhdyhvcHRpb25zKSB7XG4gIHNldHVwRHJhdyhvcHRpb25zLCB0aGlzKTtcbn1cblxuTWFwYm94RHJhdy5tb2RlcyA9IG1vZGVzO1xuTWFwYm94RHJhdy5jb25zdGFudHMgPSBDb25zdGFudHM7XG5NYXBib3hEcmF3LmxpYiA9IGxpYjtcblxuZXhwb3J0IGRlZmF1bHQgTWFwYm94RHJhdztcbiIsImltcG9ydCB7IGlzTnVtYmVyLCB9IGZyb20gXCJAdHVyZi9oZWxwZXJzXCI7XG4vKipcbiAqIFVud3JhcCBhIGNvb3JkaW5hdGUgZnJvbSBhIFBvaW50IEZlYXR1cmUsIEdlb21ldHJ5IG9yIGEgc2luZ2xlIGNvb3JkaW5hdGUuXG4gKlxuICogQG5hbWUgZ2V0Q29vcmRcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPnxHZW9tZXRyeTxQb2ludD58RmVhdHVyZTxQb2ludD59IGNvb3JkIEdlb0pTT04gUG9pbnQgb3IgYW4gQXJyYXkgb2YgbnVtYmVyc1xuICogQHJldHVybnMge0FycmF5PG51bWJlcj59IGNvb3JkaW5hdGVzXG4gKiBAZXhhbXBsZVxuICogdmFyIHB0ID0gdHVyZi5wb2ludChbMTAsIDEwXSk7XG4gKlxuICogdmFyIGNvb3JkID0gdHVyZi5nZXRDb29yZChwdCk7XG4gKiAvLz0gWzEwLCAxMF1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvb3JkKGNvb3JkKSB7XG4gICAgaWYgKCFjb29yZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb29yZCBpcyByZXF1aXJlZFwiKTtcbiAgICB9XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGNvb3JkKSkge1xuICAgICAgICBpZiAoY29vcmQudHlwZSA9PT0gXCJGZWF0dXJlXCIgJiZcbiAgICAgICAgICAgIGNvb3JkLmdlb21ldHJ5ICE9PSBudWxsICYmXG4gICAgICAgICAgICBjb29yZC5nZW9tZXRyeS50eXBlID09PSBcIlBvaW50XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBjb29yZC5nZW9tZXRyeS5jb29yZGluYXRlcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29vcmQudHlwZSA9PT0gXCJQb2ludFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gY29vcmQuY29vcmRpbmF0ZXM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29vcmQpICYmXG4gICAgICAgIGNvb3JkLmxlbmd0aCA+PSAyICYmXG4gICAgICAgICFBcnJheS5pc0FycmF5KGNvb3JkWzBdKSAmJlxuICAgICAgICAhQXJyYXkuaXNBcnJheShjb29yZFsxXSkpIHtcbiAgICAgICAgcmV0dXJuIGNvb3JkO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb29yZCBtdXN0IGJlIEdlb0pTT04gUG9pbnQgb3IgYW4gQXJyYXkgb2YgbnVtYmVyc1wiKTtcbn1cbi8qKlxuICogVW53cmFwIGNvb3JkaW5hdGVzIGZyb20gYSBGZWF0dXJlLCBHZW9tZXRyeSBPYmplY3Qgb3IgYW4gQXJyYXlcbiAqXG4gKiBAbmFtZSBnZXRDb29yZHNcbiAqIEBwYXJhbSB7QXJyYXk8YW55PnxHZW9tZXRyeXxGZWF0dXJlfSBjb29yZHMgRmVhdHVyZSwgR2VvbWV0cnkgT2JqZWN0IG9yIGFuIEFycmF5XG4gKiBAcmV0dXJucyB7QXJyYXk8YW55Pn0gY29vcmRpbmF0ZXNcbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9seSA9IHR1cmYucG9seWdvbihbW1sxMTkuMzIsIC04LjddLCBbMTE5LjU1LCAtOC42OV0sIFsxMTkuNTEsIC04LjU0XSwgWzExOS4zMiwgLTguN11dXSk7XG4gKlxuICogdmFyIGNvb3JkcyA9IHR1cmYuZ2V0Q29vcmRzKHBvbHkpO1xuICogLy89IFtbWzExOS4zMiwgLTguN10sIFsxMTkuNTUsIC04LjY5XSwgWzExOS41MSwgLTguNTRdLCBbMTE5LjMyLCAtOC43XV1dXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb29yZHMoY29vcmRzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29vcmRzKSkge1xuICAgICAgICByZXR1cm4gY29vcmRzO1xuICAgIH1cbiAgICAvLyBGZWF0dXJlXG4gICAgaWYgKGNvb3Jkcy50eXBlID09PSBcIkZlYXR1cmVcIikge1xuICAgICAgICBpZiAoY29vcmRzLmdlb21ldHJ5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gY29vcmRzLmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBHZW9tZXRyeVxuICAgICAgICBpZiAoY29vcmRzLmNvb3JkaW5hdGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gY29vcmRzLmNvb3JkaW5hdGVzO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcImNvb3JkcyBtdXN0IGJlIEdlb0pTT04gRmVhdHVyZSwgR2VvbWV0cnkgT2JqZWN0IG9yIGFuIEFycmF5XCIpO1xufVxuLyoqXG4gKiBDaGVja3MgaWYgY29vcmRpbmF0ZXMgY29udGFpbnMgYSBudW1iZXJcbiAqXG4gKiBAbmFtZSBjb250YWluc051bWJlclxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBjb29yZGluYXRlcyBHZW9KU09OIENvb3JkaW5hdGVzXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBBcnJheSBjb250YWlucyBhIG51bWJlclxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnNOdW1iZXIoY29vcmRpbmF0ZXMpIHtcbiAgICBpZiAoY29vcmRpbmF0ZXMubGVuZ3RoID4gMSAmJlxuICAgICAgICBpc051bWJlcihjb29yZGluYXRlc1swXSkgJiZcbiAgICAgICAgaXNOdW1iZXIoY29vcmRpbmF0ZXNbMV0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb29yZGluYXRlc1swXSkgJiYgY29vcmRpbmF0ZXNbMF0ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBjb250YWluc051bWJlcihjb29yZGluYXRlc1swXSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcImNvb3JkaW5hdGVzIG11c3Qgb25seSBjb250YWluIG51bWJlcnNcIik7XG59XG4vKipcbiAqIEVuZm9yY2UgZXhwZWN0YXRpb25zIGFib3V0IHR5cGVzIG9mIEdlb0pTT04gb2JqZWN0cyBmb3IgVHVyZi5cbiAqXG4gKiBAbmFtZSBnZW9qc29uVHlwZVxuICogQHBhcmFtIHtHZW9KU09OfSB2YWx1ZSBhbnkgR2VvSlNPTiBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIGV4cGVjdGVkIEdlb0pTT04gdHlwZVxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiBjYWxsaW5nIGZ1bmN0aW9uXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgdmFsdWUgaXMgbm90IHRoZSBleHBlY3RlZCB0eXBlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VvanNvblR5cGUodmFsdWUsIHR5cGUsIG5hbWUpIHtcbiAgICBpZiAoIXR5cGUgfHwgIW5hbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHlwZSBhbmQgbmFtZSByZXF1aXJlZFwiKTtcbiAgICB9XG4gICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZS50eXBlICE9PSB0eXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaW5wdXQgdG8gXCIgK1xuICAgICAgICAgICAgbmFtZSArXG4gICAgICAgICAgICBcIjogbXVzdCBiZSBhIFwiICtcbiAgICAgICAgICAgIHR5cGUgK1xuICAgICAgICAgICAgXCIsIGdpdmVuIFwiICtcbiAgICAgICAgICAgIHZhbHVlLnR5cGUpO1xuICAgIH1cbn1cbi8qKlxuICogRW5mb3JjZSBleHBlY3RhdGlvbnMgYWJvdXQgdHlwZXMgb2Yge0BsaW5rIEZlYXR1cmV9IGlucHV0cyBmb3IgVHVyZi5cbiAqIEludGVybmFsbHkgdGhpcyB1c2VzIHtAbGluayBnZW9qc29uVHlwZX0gdG8ganVkZ2UgZ2VvbWV0cnkgdHlwZXMuXG4gKlxuICogQG5hbWUgZmVhdHVyZU9mXG4gKiBAcGFyYW0ge0ZlYXR1cmV9IGZlYXR1cmUgYSBmZWF0dXJlIHdpdGggYW4gZXhwZWN0ZWQgZ2VvbWV0cnkgdHlwZVxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgZXhwZWN0ZWQgR2VvSlNPTiB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIGNhbGxpbmcgZnVuY3Rpb25cbiAqIEB0aHJvd3Mge0Vycm9yfSBlcnJvciBpZiB2YWx1ZSBpcyBub3QgdGhlIGV4cGVjdGVkIHR5cGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmZWF0dXJlT2YoZmVhdHVyZSwgdHlwZSwgbmFtZSkge1xuICAgIGlmICghZmVhdHVyZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBmZWF0dXJlIHBhc3NlZFwiKTtcbiAgICB9XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIi5mZWF0dXJlT2YoKSByZXF1aXJlcyBhIG5hbWVcIik7XG4gICAgfVxuICAgIGlmICghZmVhdHVyZSB8fCBmZWF0dXJlLnR5cGUgIT09IFwiRmVhdHVyZVwiIHx8ICFmZWF0dXJlLmdlb21ldHJ5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaW5wdXQgdG8gXCIgKyBuYW1lICsgXCIsIEZlYXR1cmUgd2l0aCBnZW9tZXRyeSByZXF1aXJlZFwiKTtcbiAgICB9XG4gICAgaWYgKCFmZWF0dXJlLmdlb21ldHJ5IHx8IGZlYXR1cmUuZ2VvbWV0cnkudHlwZSAhPT0gdHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGlucHV0IHRvIFwiICtcbiAgICAgICAgICAgIG5hbWUgK1xuICAgICAgICAgICAgXCI6IG11c3QgYmUgYSBcIiArXG4gICAgICAgICAgICB0eXBlICtcbiAgICAgICAgICAgIFwiLCBnaXZlbiBcIiArXG4gICAgICAgICAgICBmZWF0dXJlLmdlb21ldHJ5LnR5cGUpO1xuICAgIH1cbn1cbi8qKlxuICogRW5mb3JjZSBleHBlY3RhdGlvbnMgYWJvdXQgdHlwZXMgb2Yge0BsaW5rIEZlYXR1cmVDb2xsZWN0aW9ufSBpbnB1dHMgZm9yIFR1cmYuXG4gKiBJbnRlcm5hbGx5IHRoaXMgdXNlcyB7QGxpbmsgZ2VvanNvblR5cGV9IHRvIGp1ZGdlIGdlb21ldHJ5IHR5cGVzLlxuICpcbiAqIEBuYW1lIGNvbGxlY3Rpb25PZlxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbn0gZmVhdHVyZUNvbGxlY3Rpb24gYSBGZWF0dXJlQ29sbGVjdGlvbiBmb3Igd2hpY2ggZmVhdHVyZXMgd2lsbCBiZSBqdWRnZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIGV4cGVjdGVkIEdlb0pTT04gdHlwZVxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiBjYWxsaW5nIGZ1bmN0aW9uXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgdmFsdWUgaXMgbm90IHRoZSBleHBlY3RlZCB0eXBlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29sbGVjdGlvbk9mKGZlYXR1cmVDb2xsZWN0aW9uLCB0eXBlLCBuYW1lKSB7XG4gICAgaWYgKCFmZWF0dXJlQ29sbGVjdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBmZWF0dXJlQ29sbGVjdGlvbiBwYXNzZWRcIik7XG4gICAgfVxuICAgIGlmICghbmFtZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCIuY29sbGVjdGlvbk9mKCkgcmVxdWlyZXMgYSBuYW1lXCIpO1xuICAgIH1cbiAgICBpZiAoIWZlYXR1cmVDb2xsZWN0aW9uIHx8IGZlYXR1cmVDb2xsZWN0aW9uLnR5cGUgIT09IFwiRmVhdHVyZUNvbGxlY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGlucHV0IHRvIFwiICsgbmFtZSArIFwiLCBGZWF0dXJlQ29sbGVjdGlvbiByZXF1aXJlZFwiKTtcbiAgICB9XG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGZlYXR1cmVDb2xsZWN0aW9uLmZlYXR1cmVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgZmVhdHVyZSA9IF9hW19pXTtcbiAgICAgICAgaWYgKCFmZWF0dXJlIHx8IGZlYXR1cmUudHlwZSAhPT0gXCJGZWF0dXJlXCIgfHwgIWZlYXR1cmUuZ2VvbWV0cnkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaW5wdXQgdG8gXCIgKyBuYW1lICsgXCIsIEZlYXR1cmUgd2l0aCBnZW9tZXRyeSByZXF1aXJlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZlYXR1cmUuZ2VvbWV0cnkgfHwgZmVhdHVyZS5nZW9tZXRyeS50eXBlICE9PSB0eXBlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGlucHV0IHRvIFwiICtcbiAgICAgICAgICAgICAgICBuYW1lICtcbiAgICAgICAgICAgICAgICBcIjogbXVzdCBiZSBhIFwiICtcbiAgICAgICAgICAgICAgICB0eXBlICtcbiAgICAgICAgICAgICAgICBcIiwgZ2l2ZW4gXCIgK1xuICAgICAgICAgICAgICAgIGZlYXR1cmUuZ2VvbWV0cnkudHlwZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEdldCBHZW9tZXRyeSBmcm9tIEZlYXR1cmUgb3IgR2VvbWV0cnkgT2JqZWN0XG4gKlxuICogQHBhcmFtIHtGZWF0dXJlfEdlb21ldHJ5fSBnZW9qc29uIEdlb0pTT04gRmVhdHVyZSBvciBHZW9tZXRyeSBPYmplY3RcbiAqIEByZXR1cm5zIHtHZW9tZXRyeXxudWxsfSBHZW9KU09OIEdlb21ldHJ5IE9iamVjdFxuICogQHRocm93cyB7RXJyb3J9IGlmIGdlb2pzb24gaXMgbm90IGEgRmVhdHVyZSBvciBHZW9tZXRyeSBPYmplY3RcbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9pbnQgPSB7XG4gKiAgIFwidHlwZVwiOiBcIkZlYXR1cmVcIixcbiAqICAgXCJwcm9wZXJ0aWVzXCI6IHt9LFxuICogICBcImdlb21ldHJ5XCI6IHtcbiAqICAgICBcInR5cGVcIjogXCJQb2ludFwiLFxuICogICAgIFwiY29vcmRpbmF0ZXNcIjogWzExMCwgNDBdXG4gKiAgIH1cbiAqIH1cbiAqIHZhciBnZW9tID0gdHVyZi5nZXRHZW9tKHBvaW50KVxuICogLy89e1widHlwZVwiOiBcIlBvaW50XCIsIFwiY29vcmRpbmF0ZXNcIjogWzExMCwgNDBdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0R2VvbShnZW9qc29uKSB7XG4gICAgaWYgKGdlb2pzb24udHlwZSA9PT0gXCJGZWF0dXJlXCIpIHtcbiAgICAgICAgcmV0dXJuIGdlb2pzb24uZ2VvbWV0cnk7XG4gICAgfVxuICAgIHJldHVybiBnZW9qc29uO1xufVxuLyoqXG4gKiBHZXQgR2VvSlNPTiBvYmplY3QncyB0eXBlLCBHZW9tZXRyeSB0eXBlIGlzIHByaW9yaXRpemUuXG4gKlxuICogQHBhcmFtIHtHZW9KU09OfSBnZW9qc29uIEdlb0pTT04gb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gW25hbWU9XCJnZW9qc29uXCJdIG5hbWUgb2YgdGhlIHZhcmlhYmxlIHRvIGRpc3BsYXkgaW4gZXJyb3IgbWVzc2FnZSAodW51c2VkKVxuICogQHJldHVybnMge3N0cmluZ30gR2VvSlNPTiB0eXBlXG4gKiBAZXhhbXBsZVxuICogdmFyIHBvaW50ID0ge1xuICogICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gKiAgIFwicHJvcGVydGllc1wiOiB7fSxcbiAqICAgXCJnZW9tZXRyeVwiOiB7XG4gKiAgICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgICBcImNvb3JkaW5hdGVzXCI6IFsxMTAsIDQwXVxuICogICB9XG4gKiB9XG4gKiB2YXIgZ2VvbSA9IHR1cmYuZ2V0VHlwZShwb2ludClcbiAqIC8vPVwiUG9pbnRcIlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHlwZShnZW9qc29uLCBfbmFtZSkge1xuICAgIGlmIChnZW9qc29uLnR5cGUgPT09IFwiRmVhdHVyZUNvbGxlY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gXCJGZWF0dXJlQ29sbGVjdGlvblwiO1xuICAgIH1cbiAgICBpZiAoZ2VvanNvbi50eXBlID09PSBcIkdlb21ldHJ5Q29sbGVjdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBcIkdlb21ldHJ5Q29sbGVjdGlvblwiO1xuICAgIH1cbiAgICBpZiAoZ2VvanNvbi50eXBlID09PSBcIkZlYXR1cmVcIiAmJiBnZW9qc29uLmdlb21ldHJ5ICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBnZW9qc29uLmdlb21ldHJ5LnR5cGU7XG4gICAgfVxuICAgIHJldHVybiBnZW9qc29uLnR5cGU7XG59XG4iLCJpbXBvcnQgeyBmZWF0dXJlIH0gZnJvbSBcIkB0dXJmL2hlbHBlcnNcIjtcbmltcG9ydCB7IGdldENvb3JkcywgZ2V0VHlwZSB9IGZyb20gXCJAdHVyZi9pbnZhcmlhbnRcIjtcbi8vIFRvLURvID0+IEltcHJvdmUgVHlwZXNjcmlwdCBHZW9KU09OIGhhbmRsaW5nXG4vKipcbiAqIFJlbW92ZXMgcmVkdW5kYW50IGNvb3JkaW5hdGVzIGZyb20gYW55IEdlb0pTT04gR2VvbWV0cnkuXG4gKlxuICogQG5hbWUgY2xlYW5Db29yZHNcbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZX0gZ2VvanNvbiBGZWF0dXJlIG9yIEdlb21ldHJ5XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubXV0YXRlPWZhbHNlXSBhbGxvd3MgR2VvSlNPTiBpbnB1dCB0byBiZSBtdXRhdGVkXG4gKiBAcmV0dXJucyB7R2VvbWV0cnl8RmVhdHVyZX0gdGhlIGNsZWFuZWQgaW5wdXQgRmVhdHVyZS9HZW9tZXRyeVxuICogQGV4YW1wbGVcbiAqIHZhciBsaW5lID0gdHVyZi5saW5lU3RyaW5nKFtbMCwgMF0sIFswLCAyXSwgWzAsIDVdLCBbMCwgOF0sIFswLCA4XSwgWzAsIDEwXV0pO1xuICogdmFyIG11bHRpUG9pbnQgPSB0dXJmLm11bHRpUG9pbnQoW1swLCAwXSwgWzAsIDBdLCBbMiwgMl1dKTtcbiAqXG4gKiB0dXJmLmNsZWFuQ29vcmRzKGxpbmUpLmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICogLy89IFtbMCwgMF0sIFswLCAxMF1dXG4gKlxuICogdHVyZi5jbGVhbkNvb3JkcyhtdWx0aVBvaW50KS5nZW9tZXRyeS5jb29yZGluYXRlcztcbiAqIC8vPSBbWzAsIDBdLCBbMiwgMl1dXG4gKi9cbmZ1bmN0aW9uIGNsZWFuQ29vcmRzKGdlb2pzb24sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIC8vIEJhY2t3YXJkcyBjb21wYXRpYmxlIHdpdGggdjQuMFxuICAgIHZhciBtdXRhdGUgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMubXV0YXRlIDogb3B0aW9ucztcbiAgICBpZiAoIWdlb2pzb24pXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImdlb2pzb24gaXMgcmVxdWlyZWRcIik7XG4gICAgdmFyIHR5cGUgPSBnZXRUeXBlKGdlb2pzb24pO1xuICAgIC8vIFN0b3JlIG5ldyBcImNsZWFuXCIgcG9pbnRzIGluIHRoaXMgQXJyYXlcbiAgICB2YXIgbmV3Q29vcmRzID0gW107XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJMaW5lU3RyaW5nXCI6XG4gICAgICAgICAgICBuZXdDb29yZHMgPSBjbGVhbkxpbmUoZ2VvanNvbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIk11bHRpTGluZVN0cmluZ1wiOlxuICAgICAgICBjYXNlIFwiUG9seWdvblwiOlxuICAgICAgICAgICAgZ2V0Q29vcmRzKGdlb2pzb24pLmZvckVhY2goZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgICAgICAgICAgICBuZXdDb29yZHMucHVzaChjbGVhbkxpbmUobGluZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIk11bHRpUG9seWdvblwiOlxuICAgICAgICAgICAgZ2V0Q29vcmRzKGdlb2pzb24pLmZvckVhY2goZnVuY3Rpb24gKHBvbHlnb25zKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvbHlQb2ludHMgPSBbXTtcbiAgICAgICAgICAgICAgICBwb2x5Z29ucy5mb3JFYWNoKGZ1bmN0aW9uIChyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvbHlQb2ludHMucHVzaChjbGVhbkxpbmUocmluZykpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG5ld0Nvb3Jkcy5wdXNoKHBvbHlQb2ludHMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIlBvaW50XCI6XG4gICAgICAgICAgICByZXR1cm4gZ2VvanNvbjtcbiAgICAgICAgY2FzZSBcIk11bHRpUG9pbnRcIjpcbiAgICAgICAgICAgIHZhciBleGlzdGluZyA9IHt9O1xuICAgICAgICAgICAgZ2V0Q29vcmRzKGdlb2pzb24pLmZvckVhY2goZnVuY3Rpb24gKGNvb3JkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGNvb3JkLmpvaW4oXCItXCIpO1xuICAgICAgICAgICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4aXN0aW5nLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0Nvb3Jkcy5wdXNoKGNvb3JkKTtcbiAgICAgICAgICAgICAgICAgICAgZXhpc3Rpbmdba2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0eXBlICsgXCIgZ2VvbWV0cnkgbm90IHN1cHBvcnRlZFwiKTtcbiAgICB9XG4gICAgLy8gU3VwcG9ydCBpbnB1dCBtdXRhdGlvblxuICAgIGlmIChnZW9qc29uLmNvb3JkaW5hdGVzKSB7XG4gICAgICAgIGlmIChtdXRhdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGdlb2pzb24uY29vcmRpbmF0ZXMgPSBuZXdDb29yZHM7XG4gICAgICAgICAgICByZXR1cm4gZ2VvanNvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyB0eXBlOiB0eXBlLCBjb29yZGluYXRlczogbmV3Q29vcmRzIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAobXV0YXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBnZW9qc29uLmdlb21ldHJ5LmNvb3JkaW5hdGVzID0gbmV3Q29vcmRzO1xuICAgICAgICAgICAgcmV0dXJuIGdlb2pzb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZlYXR1cmUoeyB0eXBlOiB0eXBlLCBjb29yZGluYXRlczogbmV3Q29vcmRzIH0sIGdlb2pzb24ucHJvcGVydGllcywge1xuICAgICAgICAgICAgYmJveDogZ2VvanNvbi5iYm94LFxuICAgICAgICAgICAgaWQ6IGdlb2pzb24uaWQsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8qKlxuICogQ2xlYW4gQ29vcmRzXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPnxMaW5lU3RyaW5nfSBsaW5lIExpbmVcbiAqIEByZXR1cm5zIHtBcnJheTxudW1iZXI+fSBDbGVhbmVkIGNvb3JkaW5hdGVzXG4gKi9cbmZ1bmN0aW9uIGNsZWFuTGluZShsaW5lKSB7XG4gICAgdmFyIHBvaW50cyA9IGdldENvb3JkcyhsaW5lKTtcbiAgICAvLyBoYW5kbGUgXCJjbGVhblwiIHNlZ21lbnRcbiAgICBpZiAocG9pbnRzLmxlbmd0aCA9PT0gMiAmJiAhZXF1YWxzKHBvaW50c1swXSwgcG9pbnRzWzFdKSlcbiAgICAgICAgcmV0dXJuIHBvaW50cztcbiAgICB2YXIgbmV3UG9pbnRzID0gW107XG4gICAgdmFyIHNlY29uZFRvTGFzdCA9IHBvaW50cy5sZW5ndGggLSAxO1xuICAgIHZhciBuZXdQb2ludHNMZW5ndGggPSBuZXdQb2ludHMubGVuZ3RoO1xuICAgIG5ld1BvaW50cy5wdXNoKHBvaW50c1swXSk7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBzZWNvbmRUb0xhc3Q7IGkrKykge1xuICAgICAgICB2YXIgcHJldkFkZGVkUG9pbnQgPSBuZXdQb2ludHNbbmV3UG9pbnRzLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAocG9pbnRzW2ldWzBdID09PSBwcmV2QWRkZWRQb2ludFswXSAmJlxuICAgICAgICAgICAgcG9pbnRzW2ldWzFdID09PSBwcmV2QWRkZWRQb2ludFsxXSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5ld1BvaW50cy5wdXNoKHBvaW50c1tpXSk7XG4gICAgICAgICAgICBuZXdQb2ludHNMZW5ndGggPSBuZXdQb2ludHMubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKG5ld1BvaW50c0xlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNQb2ludE9uTGluZVNlZ21lbnQobmV3UG9pbnRzW25ld1BvaW50c0xlbmd0aCAtIDNdLCBuZXdQb2ludHNbbmV3UG9pbnRzTGVuZ3RoIC0gMV0sIG5ld1BvaW50c1tuZXdQb2ludHNMZW5ndGggLSAyXSkpXG4gICAgICAgICAgICAgICAgICAgIG5ld1BvaW50cy5zcGxpY2UobmV3UG9pbnRzLmxlbmd0aCAtIDIsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIG5ld1BvaW50cy5wdXNoKHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV0pO1xuICAgIG5ld1BvaW50c0xlbmd0aCA9IG5ld1BvaW50cy5sZW5ndGg7XG4gICAgaWYgKGVxdWFscyhwb2ludHNbMF0sIHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV0pICYmIG5ld1BvaW50c0xlbmd0aCA8IDQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgcG9seWdvblwiKTtcbiAgICBpZiAoaXNQb2ludE9uTGluZVNlZ21lbnQobmV3UG9pbnRzW25ld1BvaW50c0xlbmd0aCAtIDNdLCBuZXdQb2ludHNbbmV3UG9pbnRzTGVuZ3RoIC0gMV0sIG5ld1BvaW50c1tuZXdQb2ludHNMZW5ndGggLSAyXSkpXG4gICAgICAgIG5ld1BvaW50cy5zcGxpY2UobmV3UG9pbnRzLmxlbmd0aCAtIDIsIDEpO1xuICAgIHJldHVybiBuZXdQb2ludHM7XG59XG4vKipcbiAqIENvbXBhcmVzIHR3byBwb2ludHMgYW5kIHJldHVybnMgaWYgdGhleSBhcmUgZXF1YWxzXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7UG9zaXRpb259IHB0MSBwb2ludFxuICogQHBhcmFtIHtQb3NpdGlvbn0gcHQyIHBvaW50XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGV5IGFyZSBlcXVhbHNcbiAqL1xuZnVuY3Rpb24gZXF1YWxzKHB0MSwgcHQyKSB7XG4gICAgcmV0dXJuIHB0MVswXSA9PT0gcHQyWzBdICYmIHB0MVsxXSA9PT0gcHQyWzFdO1xufVxuLyoqXG4gKiBSZXR1cm5zIGlmIGBwb2ludGAgaXMgb24gdGhlIHNlZ21lbnQgYmV0d2VlbiBgc3RhcnRgIGFuZCBgZW5kYC5cbiAqIEJvcnJvd2VkIGZyb20gYEB0dXJmL2Jvb2xlYW4tcG9pbnQtb24tbGluZWAgdG8gc3BlZWQgdXAgdGhlIGV2YWx1YXRpb24gKGluc3RlYWQgb2YgdXNpbmcgdGhlIG1vZHVsZSBhcyBkZXBlbmRlbmN5KVxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1Bvc2l0aW9ufSBzdGFydCBjb29yZCBwYWlyIG9mIHN0YXJ0IG9mIGxpbmVcbiAqIEBwYXJhbSB7UG9zaXRpb259IGVuZCBjb29yZCBwYWlyIG9mIGVuZCBvZiBsaW5lXG4gKiBAcGFyYW0ge1Bvc2l0aW9ufSBwb2ludCBjb29yZCBwYWlyIG9mIHBvaW50IHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZS9mYWxzZVxuICovXG5mdW5jdGlvbiBpc1BvaW50T25MaW5lU2VnbWVudChzdGFydCwgZW5kLCBwb2ludCkge1xuICAgIHZhciB4ID0gcG9pbnRbMF0sIHkgPSBwb2ludFsxXTtcbiAgICB2YXIgc3RhcnRYID0gc3RhcnRbMF0sIHN0YXJ0WSA9IHN0YXJ0WzFdO1xuICAgIHZhciBlbmRYID0gZW5kWzBdLCBlbmRZID0gZW5kWzFdO1xuICAgIHZhciBkeGMgPSB4IC0gc3RhcnRYO1xuICAgIHZhciBkeWMgPSB5IC0gc3RhcnRZO1xuICAgIHZhciBkeGwgPSBlbmRYIC0gc3RhcnRYO1xuICAgIHZhciBkeWwgPSBlbmRZIC0gc3RhcnRZO1xuICAgIHZhciBjcm9zcyA9IGR4YyAqIGR5bCAtIGR5YyAqIGR4bDtcbiAgICBpZiAoY3Jvc3MgIT09IDApXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBlbHNlIGlmIChNYXRoLmFicyhkeGwpID49IE1hdGguYWJzKGR5bCkpXG4gICAgICAgIHJldHVybiBkeGwgPiAwID8gc3RhcnRYIDw9IHggJiYgeCA8PSBlbmRYIDogZW5kWCA8PSB4ICYmIHggPD0gc3RhcnRYO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIGR5bCA+IDAgPyBzdGFydFkgPD0geSAmJiB5IDw9IGVuZFkgOiBlbmRZIDw9IHkgJiYgeSA8PSBzdGFydFk7XG59XG5leHBvcnQgZGVmYXVsdCBjbGVhbkNvb3JkcztcbiIsIi8qKlxuICogUmV0dXJucyBhIGNsb25lZCBjb3B5IG9mIHRoZSBwYXNzZWQgR2VvSlNPTiBPYmplY3QsIGluY2x1ZGluZyBwb3NzaWJsZSAnRm9yZWlnbiBNZW1iZXJzJy5cbiAqIH4zLTV4IGZhc3RlciB0aGFuIHRoZSBjb21tb24gSlNPTi5wYXJzZSArIEpTT04uc3RyaW5naWZ5IGNvbWJvIG1ldGhvZC5cbiAqXG4gKiBAbmFtZSBjbG9uZVxuICogQHBhcmFtIHtHZW9KU09OfSBnZW9qc29uIEdlb0pTT04gT2JqZWN0XG4gKiBAcmV0dXJucyB7R2VvSlNPTn0gY2xvbmVkIEdlb0pTT04gT2JqZWN0XG4gKiBAZXhhbXBsZVxuICogdmFyIGxpbmUgPSB0dXJmLmxpbmVTdHJpbmcoW1stNzQsIDQwXSwgWy03OCwgNDJdLCBbLTgyLCAzNV1dLCB7Y29sb3I6ICdyZWQnfSk7XG4gKlxuICogdmFyIGxpbmVDbG9uZWQgPSB0dXJmLmNsb25lKGxpbmUpO1xuICovXG5mdW5jdGlvbiBjbG9uZShnZW9qc29uKSB7XG4gICAgaWYgKCFnZW9qc29uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImdlb2pzb24gaXMgcmVxdWlyZWRcIik7XG4gICAgfVxuICAgIHN3aXRjaCAoZ2VvanNvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJGZWF0dXJlXCI6XG4gICAgICAgICAgICByZXR1cm4gY2xvbmVGZWF0dXJlKGdlb2pzb24pO1xuICAgICAgICBjYXNlIFwiRmVhdHVyZUNvbGxlY3Rpb25cIjpcbiAgICAgICAgICAgIHJldHVybiBjbG9uZUZlYXR1cmVDb2xsZWN0aW9uKGdlb2pzb24pO1xuICAgICAgICBjYXNlIFwiUG9pbnRcIjpcbiAgICAgICAgY2FzZSBcIkxpbmVTdHJpbmdcIjpcbiAgICAgICAgY2FzZSBcIlBvbHlnb25cIjpcbiAgICAgICAgY2FzZSBcIk11bHRpUG9pbnRcIjpcbiAgICAgICAgY2FzZSBcIk11bHRpTGluZVN0cmluZ1wiOlxuICAgICAgICBjYXNlIFwiTXVsdGlQb2x5Z29uXCI6XG4gICAgICAgIGNhc2UgXCJHZW9tZXRyeUNvbGxlY3Rpb25cIjpcbiAgICAgICAgICAgIHJldHVybiBjbG9uZUdlb21ldHJ5KGdlb2pzb24pO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBHZW9KU09OIHR5cGVcIik7XG4gICAgfVxufVxuLyoqXG4gKiBDbG9uZSBGZWF0dXJlXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RmVhdHVyZTxhbnk+fSBnZW9qc29uIEdlb0pTT04gRmVhdHVyZVxuICogQHJldHVybnMge0ZlYXR1cmU8YW55Pn0gY2xvbmVkIEZlYXR1cmVcbiAqL1xuZnVuY3Rpb24gY2xvbmVGZWF0dXJlKGdlb2pzb24pIHtcbiAgICB2YXIgY2xvbmVkID0geyB0eXBlOiBcIkZlYXR1cmVcIiB9O1xuICAgIC8vIFByZXNlcnZlIEZvcmVpZ24gTWVtYmVyc1xuICAgIE9iamVjdC5rZXlzKGdlb2pzb24pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSBcInR5cGVcIjpcbiAgICAgICAgICAgIGNhc2UgXCJwcm9wZXJ0aWVzXCI6XG4gICAgICAgICAgICBjYXNlIFwiZ2VvbWV0cnlcIjpcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNsb25lZFtrZXldID0gZ2VvanNvbltrZXldO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gQWRkIHByb3BlcnRpZXMgJiBnZW9tZXRyeSBsYXN0XG4gICAgY2xvbmVkLnByb3BlcnRpZXMgPSBjbG9uZVByb3BlcnRpZXMoZ2VvanNvbi5wcm9wZXJ0aWVzKTtcbiAgICBjbG9uZWQuZ2VvbWV0cnkgPSBjbG9uZUdlb21ldHJ5KGdlb2pzb24uZ2VvbWV0cnkpO1xuICAgIHJldHVybiBjbG9uZWQ7XG59XG4vKipcbiAqIENsb25lIFByb3BlcnRpZXNcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgR2VvSlNPTiBQcm9wZXJ0aWVzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBjbG9uZWQgUHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBjbG9uZVByb3BlcnRpZXMocHJvcGVydGllcykge1xuICAgIHZhciBjbG9uZWQgPSB7fTtcbiAgICBpZiAoIXByb3BlcnRpZXMpIHtcbiAgICAgICAgcmV0dXJuIGNsb25lZDtcbiAgICB9XG4gICAgT2JqZWN0LmtleXMocHJvcGVydGllcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHByb3BlcnRpZXNba2V5XTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlIG51bGxcbiAgICAgICAgICAgICAgICBjbG9uZWRba2V5XSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBBcnJheVxuICAgICAgICAgICAgICAgIGNsb25lZFtrZXldID0gdmFsdWUubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlIGdlbmVyaWMgT2JqZWN0XG4gICAgICAgICAgICAgICAgY2xvbmVkW2tleV0gPSBjbG9uZVByb3BlcnRpZXModmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2xvbmVkW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjbG9uZWQ7XG59XG4vKipcbiAqIENsb25lIEZlYXR1cmUgQ29sbGVjdGlvblxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9uPGFueT59IGdlb2pzb24gR2VvSlNPTiBGZWF0dXJlIENvbGxlY3Rpb25cbiAqIEByZXR1cm5zIHtGZWF0dXJlQ29sbGVjdGlvbjxhbnk+fSBjbG9uZWQgRmVhdHVyZSBDb2xsZWN0aW9uXG4gKi9cbmZ1bmN0aW9uIGNsb25lRmVhdHVyZUNvbGxlY3Rpb24oZ2VvanNvbikge1xuICAgIHZhciBjbG9uZWQgPSB7IHR5cGU6IFwiRmVhdHVyZUNvbGxlY3Rpb25cIiB9O1xuICAgIC8vIFByZXNlcnZlIEZvcmVpZ24gTWVtYmVyc1xuICAgIE9iamVjdC5rZXlzKGdlb2pzb24pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSBcInR5cGVcIjpcbiAgICAgICAgICAgIGNhc2UgXCJmZWF0dXJlc1wiOlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY2xvbmVkW2tleV0gPSBnZW9qc29uW2tleV07XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBBZGQgZmVhdHVyZXNcbiAgICBjbG9uZWQuZmVhdHVyZXMgPSBnZW9qc29uLmZlYXR1cmVzLm1hcChmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICByZXR1cm4gY2xvbmVGZWF0dXJlKGZlYXR1cmUpO1xuICAgIH0pO1xuICAgIHJldHVybiBjbG9uZWQ7XG59XG4vKipcbiAqIENsb25lIEdlb21ldHJ5XG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7R2VvbWV0cnk8YW55Pn0gZ2VvbWV0cnkgR2VvSlNPTiBHZW9tZXRyeVxuICogQHJldHVybnMge0dlb21ldHJ5PGFueT59IGNsb25lZCBHZW9tZXRyeVxuICovXG5mdW5jdGlvbiBjbG9uZUdlb21ldHJ5KGdlb21ldHJ5KSB7XG4gICAgdmFyIGdlb20gPSB7IHR5cGU6IGdlb21ldHJ5LnR5cGUgfTtcbiAgICBpZiAoZ2VvbWV0cnkuYmJveCkge1xuICAgICAgICBnZW9tLmJib3ggPSBnZW9tZXRyeS5iYm94O1xuICAgIH1cbiAgICBpZiAoZ2VvbWV0cnkudHlwZSA9PT0gXCJHZW9tZXRyeUNvbGxlY3Rpb25cIikge1xuICAgICAgICBnZW9tLmdlb21ldHJpZXMgPSBnZW9tZXRyeS5nZW9tZXRyaWVzLm1hcChmdW5jdGlvbiAoZykge1xuICAgICAgICAgICAgcmV0dXJuIGNsb25lR2VvbWV0cnkoZyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZ2VvbTtcbiAgICB9XG4gICAgZ2VvbS5jb29yZGluYXRlcyA9IGRlZXBTbGljZShnZW9tZXRyeS5jb29yZGluYXRlcyk7XG4gICAgcmV0dXJuIGdlb207XG59XG4vKipcbiAqIERlZXAgU2xpY2UgY29vcmRpbmF0ZXNcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtDb29yZGluYXRlc30gY29vcmRzIENvb3JkaW5hdGVzXG4gKiBAcmV0dXJucyB7Q29vcmRpbmF0ZXN9IGFsbCBjb29yZGluYXRlcyBzbGljZWRcbiAqL1xuZnVuY3Rpb24gZGVlcFNsaWNlKGNvb3Jkcykge1xuICAgIHZhciBjbG9uZWQgPSBjb29yZHM7XG4gICAgaWYgKHR5cGVvZiBjbG9uZWRbMF0gIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgcmV0dXJuIGNsb25lZC5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gY2xvbmVkLm1hcChmdW5jdGlvbiAoY29vcmQpIHtcbiAgICAgICAgcmV0dXJuIGRlZXBTbGljZShjb29yZCk7XG4gICAgfSk7XG59XG5leHBvcnQgZGVmYXVsdCBjbG9uZTtcbiIsImltcG9ydCBjbGVhbkNvb3JkcyBmcm9tICdAdHVyZi9jbGVhbi1jb29yZHMnO1xuaW1wb3J0IGNsb25lIGZyb20gJ0B0dXJmL2Nsb25lJztcbmltcG9ydCB7IGdlb21FYWNoIH0gZnJvbSAnQHR1cmYvbWV0YSc7XG5pbXBvcnQgeyBpc09iamVjdCB9IGZyb20gJ0B0dXJmL2hlbHBlcnMnO1xuXG4vKlxuIChjKSAyMDEzLCBWbGFkaW1pciBBZ2Fmb25raW5cbiBTaW1wbGlmeS5qcywgYSBoaWdoLXBlcmZvcm1hbmNlIEpTIHBvbHlsaW5lIHNpbXBsaWZpY2F0aW9uIGxpYnJhcnlcbiBtb3VybmVyLmdpdGh1Yi5pby9zaW1wbGlmeS1qc1xuKi9cblxuLy8gdG8gc3VpdCB5b3VyIHBvaW50IGZvcm1hdCwgcnVuIHNlYXJjaC9yZXBsYWNlIGZvciAnLngnIGFuZCAnLnknO1xuLy8gZm9yIDNEIHZlcnNpb24sIHNlZSAzZCBicmFuY2ggKGNvbmZpZ3VyYWJpbGl0eSB3b3VsZCBkcmF3IHNpZ25pZmljYW50IHBlcmZvcm1hbmNlIG92ZXJoZWFkKVxuXG4vLyBzcXVhcmUgZGlzdGFuY2UgYmV0d2VlbiAyIHBvaW50c1xuZnVuY3Rpb24gZ2V0U3FEaXN0KHAxLCBwMikge1xuICB2YXIgZHggPSBwMS54IC0gcDIueCxcbiAgICBkeSA9IHAxLnkgLSBwMi55O1xuXG4gIHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeTtcbn1cblxuLy8gc3F1YXJlIGRpc3RhbmNlIGZyb20gYSBwb2ludCB0byBhIHNlZ21lbnRcbmZ1bmN0aW9uIGdldFNxU2VnRGlzdChwLCBwMSwgcDIpIHtcbiAgdmFyIHggPSBwMS54LFxuICAgIHkgPSBwMS55LFxuICAgIGR4ID0gcDIueCAtIHgsXG4gICAgZHkgPSBwMi55IC0geTtcblxuICBpZiAoZHggIT09IDAgfHwgZHkgIT09IDApIHtcbiAgICB2YXIgdCA9ICgocC54IC0geCkgKiBkeCArIChwLnkgLSB5KSAqIGR5KSAvIChkeCAqIGR4ICsgZHkgKiBkeSk7XG5cbiAgICBpZiAodCA+IDEpIHtcbiAgICAgIHggPSBwMi54O1xuICAgICAgeSA9IHAyLnk7XG4gICAgfSBlbHNlIGlmICh0ID4gMCkge1xuICAgICAgeCArPSBkeCAqIHQ7XG4gICAgICB5ICs9IGR5ICogdDtcbiAgICB9XG4gIH1cblxuICBkeCA9IHAueCAtIHg7XG4gIGR5ID0gcC55IC0geTtcblxuICByZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XG59XG4vLyByZXN0IG9mIHRoZSBjb2RlIGRvZXNuJ3QgY2FyZSBhYm91dCBwb2ludCBmb3JtYXRcblxuLy8gYmFzaWMgZGlzdGFuY2UtYmFzZWQgc2ltcGxpZmljYXRpb25cbmZ1bmN0aW9uIHNpbXBsaWZ5UmFkaWFsRGlzdChwb2ludHMsIHNxVG9sZXJhbmNlKSB7XG4gIHZhciBwcmV2UG9pbnQgPSBwb2ludHNbMF0sXG4gICAgbmV3UG9pbnRzID0gW3ByZXZQb2ludF0sXG4gICAgcG9pbnQ7XG5cbiAgZm9yICh2YXIgaSA9IDEsIGxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHBvaW50ID0gcG9pbnRzW2ldO1xuXG4gICAgaWYgKGdldFNxRGlzdChwb2ludCwgcHJldlBvaW50KSA+IHNxVG9sZXJhbmNlKSB7XG4gICAgICBuZXdQb2ludHMucHVzaChwb2ludCk7XG4gICAgICBwcmV2UG9pbnQgPSBwb2ludDtcbiAgICB9XG4gIH1cblxuICBpZiAocHJldlBvaW50ICE9PSBwb2ludCkgbmV3UG9pbnRzLnB1c2gocG9pbnQpO1xuXG4gIHJldHVybiBuZXdQb2ludHM7XG59XG5cbmZ1bmN0aW9uIHNpbXBsaWZ5RFBTdGVwKHBvaW50cywgZmlyc3QsIGxhc3QsIHNxVG9sZXJhbmNlLCBzaW1wbGlmaWVkKSB7XG4gIHZhciBtYXhTcURpc3QgPSBzcVRvbGVyYW5jZSxcbiAgICBpbmRleDtcblxuICBmb3IgKHZhciBpID0gZmlyc3QgKyAxOyBpIDwgbGFzdDsgaSsrKSB7XG4gICAgdmFyIHNxRGlzdCA9IGdldFNxU2VnRGlzdChwb2ludHNbaV0sIHBvaW50c1tmaXJzdF0sIHBvaW50c1tsYXN0XSk7XG5cbiAgICBpZiAoc3FEaXN0ID4gbWF4U3FEaXN0KSB7XG4gICAgICBpbmRleCA9IGk7XG4gICAgICBtYXhTcURpc3QgPSBzcURpc3Q7XG4gICAgfVxuICB9XG5cbiAgaWYgKG1heFNxRGlzdCA+IHNxVG9sZXJhbmNlKSB7XG4gICAgaWYgKGluZGV4IC0gZmlyc3QgPiAxKVxuICAgICAgc2ltcGxpZnlEUFN0ZXAocG9pbnRzLCBmaXJzdCwgaW5kZXgsIHNxVG9sZXJhbmNlLCBzaW1wbGlmaWVkKTtcbiAgICBzaW1wbGlmaWVkLnB1c2gocG9pbnRzW2luZGV4XSk7XG4gICAgaWYgKGxhc3QgLSBpbmRleCA+IDEpXG4gICAgICBzaW1wbGlmeURQU3RlcChwb2ludHMsIGluZGV4LCBsYXN0LCBzcVRvbGVyYW5jZSwgc2ltcGxpZmllZCk7XG4gIH1cbn1cblxuLy8gc2ltcGxpZmljYXRpb24gdXNpbmcgUmFtZXItRG91Z2xhcy1QZXVja2VyIGFsZ29yaXRobVxuZnVuY3Rpb24gc2ltcGxpZnlEb3VnbGFzUGV1Y2tlcihwb2ludHMsIHNxVG9sZXJhbmNlKSB7XG4gIHZhciBsYXN0ID0gcG9pbnRzLmxlbmd0aCAtIDE7XG5cbiAgdmFyIHNpbXBsaWZpZWQgPSBbcG9pbnRzWzBdXTtcbiAgc2ltcGxpZnlEUFN0ZXAocG9pbnRzLCAwLCBsYXN0LCBzcVRvbGVyYW5jZSwgc2ltcGxpZmllZCk7XG4gIHNpbXBsaWZpZWQucHVzaChwb2ludHNbbGFzdF0pO1xuXG4gIHJldHVybiBzaW1wbGlmaWVkO1xufVxuXG4vLyBib3RoIGFsZ29yaXRobXMgY29tYmluZWQgZm9yIGF3ZXNvbWUgcGVyZm9ybWFuY2VcbmZ1bmN0aW9uIHNpbXBsaWZ5KHBvaW50cywgdG9sZXJhbmNlLCBoaWdoZXN0UXVhbGl0eSkge1xuICBpZiAocG9pbnRzLmxlbmd0aCA8PSAyKSByZXR1cm4gcG9pbnRzO1xuXG4gIHZhciBzcVRvbGVyYW5jZSA9IHRvbGVyYW5jZSAhPT0gdW5kZWZpbmVkID8gdG9sZXJhbmNlICogdG9sZXJhbmNlIDogMTtcblxuICBwb2ludHMgPSBoaWdoZXN0UXVhbGl0eSA/IHBvaW50cyA6IHNpbXBsaWZ5UmFkaWFsRGlzdChwb2ludHMsIHNxVG9sZXJhbmNlKTtcbiAgcG9pbnRzID0gc2ltcGxpZnlEb3VnbGFzUGV1Y2tlcihwb2ludHMsIHNxVG9sZXJhbmNlKTtcblxuICByZXR1cm4gcG9pbnRzO1xufVxuXG4vKipcbiAqIFRha2VzIGEge0BsaW5rIEdlb0pTT059IG9iamVjdCBhbmQgcmV0dXJucyBhIHNpbXBsaWZpZWQgdmVyc2lvbi4gSW50ZXJuYWxseSB1c2VzXG4gKiBbc2ltcGxpZnktanNdKGh0dHA6Ly9tb3VybmVyLmdpdGh1Yi5pby9zaW1wbGlmeS1qcy8pIHRvIHBlcmZvcm0gc2ltcGxpZmljYXRpb24gdXNpbmcgdGhlIFJhbWVyLURvdWdsYXMtUGV1Y2tlciBhbGdvcml0aG0uXG4gKlxuICogQG5hbWUgc2ltcGxpZnlcbiAqIEBwYXJhbSB7R2VvSlNPTn0gZ2VvanNvbiBvYmplY3QgdG8gYmUgc2ltcGxpZmllZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBPcHRpb25hbCBwYXJhbWV0ZXJzXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMudG9sZXJhbmNlPTFdIHNpbXBsaWZpY2F0aW9uIHRvbGVyYW5jZVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5oaWdoUXVhbGl0eT1mYWxzZV0gd2hldGhlciBvciBub3QgdG8gc3BlbmQgbW9yZSB0aW1lIHRvIGNyZWF0ZSBhIGhpZ2hlci1xdWFsaXR5IHNpbXBsaWZpY2F0aW9uIHdpdGggYSBkaWZmZXJlbnQgYWxnb3JpdGhtXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLm11dGF0ZT1mYWxzZV0gYWxsb3dzIEdlb0pTT04gaW5wdXQgdG8gYmUgbXV0YXRlZCAoc2lnbmlmaWNhbnQgcGVyZm9ybWFuY2UgaW5jcmVhc2UgaWYgdHJ1ZSlcbiAqIEByZXR1cm5zIHtHZW9KU09OfSBhIHNpbXBsaWZpZWQgR2VvSlNPTlxuICogQGV4YW1wbGVcbiAqIHZhciBnZW9qc29uID0gdHVyZi5wb2x5Z29uKFtbXG4gKiAgIFstNzAuNjAzNjM3LCAtMzMuMzk5OTE4XSxcbiAqICAgWy03MC42MTQ2MjQsIC0zMy4zOTUzMzJdLFxuICogICBbLTcwLjYzOTM0MywgLTMzLjM5MjQ2Nl0sXG4gKiAgIFstNzAuNjU5OTQyLCAtMzMuMzk0NzU5XSxcbiAqICAgWy03MC42ODM5NzUsIC0zMy40MDQ1MDRdLFxuICogICBbLTcwLjY5NzAyMSwgLTMzLjQxOTQwNl0sXG4gKiAgIFstNzAuNzAxMTQxLCAtMzMuNDM0MzA2XSxcbiAqICAgWy03MC43MDA0NTQsIC0zMy40NDYzMzldLFxuICogICBbLTcwLjY5NDI3NCwgLTMzLjQ1ODM2OV0sXG4gKiAgIFstNzAuNjgyNjAxLCAtMzMuNDY1ODE2XSxcbiAqICAgWy03MC42Njg4NjksIC0zMy40NzIxMTddLFxuICogICBbLTcwLjY0NjIwOSwgLTMzLjQ3MzgzNV0sXG4gKiAgIFstNzAuNjI0OTIzLCAtMzMuNDcyMTE3XSxcbiAqICAgWy03MC42MDk4MTcsIC0zMy40NjgxMDddLFxuICogICBbLTcwLjU5NTM5NywgLTMzLjQ1ODM2OV0sXG4gKiAgIFstNzAuNTg3MTU4LCAtMzMuNDQyOTAxXSxcbiAqICAgWy03MC41ODcxNTgsIC0zMy40MjYyODNdLFxuICogICBbLTcwLjU5MDU5MSwgLTMzLjQxNDI0OF0sXG4gKiAgIFstNzAuNTk0NzExLCAtMzMuNDA2MjI0XSxcbiAqICAgWy03MC42MDM2MzcsIC0zMy4zOTk5MThdXG4gKiBdXSk7XG4gKiB2YXIgb3B0aW9ucyA9IHt0b2xlcmFuY2U6IDAuMDEsIGhpZ2hRdWFsaXR5OiBmYWxzZX07XG4gKiB2YXIgc2ltcGxpZmllZCA9IHR1cmYuc2ltcGxpZnkoZ2VvanNvbiwgb3B0aW9ucyk7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW2dlb2pzb24sIHNpbXBsaWZpZWRdXG4gKi9cbmZ1bmN0aW9uIHNpbXBsaWZ5JDEoZ2VvanNvbiwgb3B0aW9ucykge1xuICAvLyBPcHRpb25hbCBwYXJhbWV0ZXJzXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZiAoIWlzT2JqZWN0KG9wdGlvbnMpKSB0aHJvdyBuZXcgRXJyb3IoXCJvcHRpb25zIGlzIGludmFsaWRcIik7XG4gIHZhciB0b2xlcmFuY2UgPSBvcHRpb25zLnRvbGVyYW5jZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy50b2xlcmFuY2UgOiAxO1xuICB2YXIgaGlnaFF1YWxpdHkgPSBvcHRpb25zLmhpZ2hRdWFsaXR5IHx8IGZhbHNlO1xuICB2YXIgbXV0YXRlID0gb3B0aW9ucy5tdXRhdGUgfHwgZmFsc2U7XG5cbiAgaWYgKCFnZW9qc29uKSB0aHJvdyBuZXcgRXJyb3IoXCJnZW9qc29uIGlzIHJlcXVpcmVkXCIpO1xuICBpZiAodG9sZXJhbmNlICYmIHRvbGVyYW5jZSA8IDApIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgdG9sZXJhbmNlXCIpO1xuXG4gIC8vIENsb25lIGdlb2pzb24gdG8gYXZvaWQgc2lkZSBlZmZlY3RzXG4gIGlmIChtdXRhdGUgIT09IHRydWUpIGdlb2pzb24gPSBjbG9uZShnZW9qc29uKTtcblxuICBnZW9tRWFjaChnZW9qc29uLCBmdW5jdGlvbiAoZ2VvbSkge1xuICAgIHNpbXBsaWZ5R2VvbShnZW9tLCB0b2xlcmFuY2UsIGhpZ2hRdWFsaXR5KTtcbiAgfSk7XG4gIHJldHVybiBnZW9qc29uO1xufVxuXG4vKipcbiAqIFNpbXBsaWZpZXMgYSBmZWF0dXJlJ3MgY29vcmRpbmF0ZXNcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtHZW9tZXRyeX0gZ2VvbWV0cnkgdG8gYmUgc2ltcGxpZmllZFxuICogQHBhcmFtIHtudW1iZXJ9IFt0b2xlcmFuY2U9MV0gc2ltcGxpZmljYXRpb24gdG9sZXJhbmNlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtoaWdoUXVhbGl0eT1mYWxzZV0gd2hldGhlciBvciBub3QgdG8gc3BlbmQgbW9yZSB0aW1lIHRvIGNyZWF0ZSBhIGhpZ2hlci1xdWFsaXR5IHNpbXBsaWZpY2F0aW9uIHdpdGggYSBkaWZmZXJlbnQgYWxnb3JpdGhtXG4gKiBAcmV0dXJucyB7R2VvbWV0cnl9IG91dHB1dFxuICovXG5mdW5jdGlvbiBzaW1wbGlmeUdlb20oZ2VvbWV0cnksIHRvbGVyYW5jZSwgaGlnaFF1YWxpdHkpIHtcbiAgdmFyIHR5cGUgPSBnZW9tZXRyeS50eXBlO1xuXG4gIC8vIFwidW5zaW1wbHlmaWFibGVcIiBnZW9tZXRyeSB0eXBlc1xuICBpZiAodHlwZSA9PT0gXCJQb2ludFwiIHx8IHR5cGUgPT09IFwiTXVsdGlQb2ludFwiKSByZXR1cm4gZ2VvbWV0cnk7XG5cbiAgLy8gUmVtb3ZlIGFueSBleHRyYSBjb29yZGluYXRlc1xuICBjbGVhbkNvb3JkcyhnZW9tZXRyeSwgdHJ1ZSk7XG5cbiAgdmFyIGNvb3JkaW5hdGVzID0gZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgXCJMaW5lU3RyaW5nXCI6XG4gICAgICBnZW9tZXRyeVtcImNvb3JkaW5hdGVzXCJdID0gc2ltcGxpZnlMaW5lKFxuICAgICAgICBjb29yZGluYXRlcyxcbiAgICAgICAgdG9sZXJhbmNlLFxuICAgICAgICBoaWdoUXVhbGl0eVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJNdWx0aUxpbmVTdHJpbmdcIjpcbiAgICAgIGdlb21ldHJ5W1wiY29vcmRpbmF0ZXNcIl0gPSBjb29yZGluYXRlcy5tYXAoZnVuY3Rpb24gKGxpbmVzKSB7XG4gICAgICAgIHJldHVybiBzaW1wbGlmeUxpbmUobGluZXMsIHRvbGVyYW5jZSwgaGlnaFF1YWxpdHkpO1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiUG9seWdvblwiOlxuICAgICAgZ2VvbWV0cnlbXCJjb29yZGluYXRlc1wiXSA9IHNpbXBsaWZ5UG9seWdvbihcbiAgICAgICAgY29vcmRpbmF0ZXMsXG4gICAgICAgIHRvbGVyYW5jZSxcbiAgICAgICAgaGlnaFF1YWxpdHlcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiTXVsdGlQb2x5Z29uXCI6XG4gICAgICBnZW9tZXRyeVtcImNvb3JkaW5hdGVzXCJdID0gY29vcmRpbmF0ZXMubWFwKGZ1bmN0aW9uIChyaW5ncykge1xuICAgICAgICByZXR1cm4gc2ltcGxpZnlQb2x5Z29uKHJpbmdzLCB0b2xlcmFuY2UsIGhpZ2hRdWFsaXR5KTtcbiAgICAgIH0pO1xuICB9XG4gIHJldHVybiBnZW9tZXRyeTtcbn1cblxuLyoqXG4gKiBTaW1wbGlmaWVzIHRoZSBjb29yZGluYXRlcyBvZiBhIExpbmVTdHJpbmcgd2l0aCBzaW1wbGlmeS1qc1xuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGNvb3JkaW5hdGVzIHRvIGJlIHByb2Nlc3NlZFxuICogQHBhcmFtIHtudW1iZXJ9IHRvbGVyYW5jZSBzaW1wbGlmaWNhdGlvbiB0b2xlcmFuY2VcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaGlnaFF1YWxpdHkgd2hldGhlciBvciBub3QgdG8gc3BlbmQgbW9yZSB0aW1lIHRvIGNyZWF0ZSBhIGhpZ2hlci1xdWFsaXR5XG4gKiBAcmV0dXJucyB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IHNpbXBsaWZpZWQgY29vcmRzXG4gKi9cbmZ1bmN0aW9uIHNpbXBsaWZ5TGluZShjb29yZGluYXRlcywgdG9sZXJhbmNlLCBoaWdoUXVhbGl0eSkge1xuICByZXR1cm4gc2ltcGxpZnkoXG4gICAgY29vcmRpbmF0ZXMubWFwKGZ1bmN0aW9uIChjb29yZCkge1xuICAgICAgcmV0dXJuIHsgeDogY29vcmRbMF0sIHk6IGNvb3JkWzFdLCB6OiBjb29yZFsyXSB9O1xuICAgIH0pLFxuICAgIHRvbGVyYW5jZSxcbiAgICBoaWdoUXVhbGl0eVxuICApLm1hcChmdW5jdGlvbiAoY29vcmRzKSB7XG4gICAgcmV0dXJuIGNvb3Jkcy56ID8gW2Nvb3Jkcy54LCBjb29yZHMueSwgY29vcmRzLnpdIDogW2Nvb3Jkcy54LCBjb29yZHMueV07XG4gIH0pO1xufVxuXG4vKipcbiAqIFNpbXBsaWZpZXMgdGhlIGNvb3JkaW5hdGVzIG9mIGEgUG9seWdvbiB3aXRoIHNpbXBsaWZ5LWpzXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gY29vcmRpbmF0ZXMgdG8gYmUgcHJvY2Vzc2VkXG4gKiBAcGFyYW0ge251bWJlcn0gdG9sZXJhbmNlIHNpbXBsaWZpY2F0aW9uIHRvbGVyYW5jZVxuICogQHBhcmFtIHtib29sZWFufSBoaWdoUXVhbGl0eSB3aGV0aGVyIG9yIG5vdCB0byBzcGVuZCBtb3JlIHRpbWUgdG8gY3JlYXRlIGEgaGlnaGVyLXF1YWxpdHlcbiAqIEByZXR1cm5zIHtBcnJheTxBcnJheTxBcnJheTxudW1iZXI+Pj59IHNpbXBsaWZpZWQgY29vcmRzXG4gKi9cbmZ1bmN0aW9uIHNpbXBsaWZ5UG9seWdvbihjb29yZGluYXRlcywgdG9sZXJhbmNlLCBoaWdoUXVhbGl0eSkge1xuICByZXR1cm4gY29vcmRpbmF0ZXMubWFwKGZ1bmN0aW9uIChyaW5nKSB7XG4gICAgdmFyIHB0cyA9IHJpbmcubWFwKGZ1bmN0aW9uIChjb29yZCkge1xuICAgICAgcmV0dXJuIHsgeDogY29vcmRbMF0sIHk6IGNvb3JkWzFdIH07XG4gICAgfSk7XG4gICAgaWYgKHB0cy5sZW5ndGggPCA0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHBvbHlnb25cIik7XG4gICAgfVxuICAgIHZhciBzaW1wbGVSaW5nID0gc2ltcGxpZnkocHRzLCB0b2xlcmFuY2UsIGhpZ2hRdWFsaXR5KS5tYXAoZnVuY3Rpb24gKFxuICAgICAgY29vcmRzXG4gICAgKSB7XG4gICAgICByZXR1cm4gW2Nvb3Jkcy54LCBjb29yZHMueV07XG4gICAgfSk7XG4gICAgLy9yZW1vdmUgMSBwZXJjZW50IG9mIHRvbGVyYW5jZSB1bnRpbCBlbm91Z2ggcG9pbnRzIHRvIG1ha2UgYSB0cmlhbmdsZVxuICAgIHdoaWxlICghY2hlY2tWYWxpZGl0eShzaW1wbGVSaW5nKSkge1xuICAgICAgdG9sZXJhbmNlIC09IHRvbGVyYW5jZSAqIDAuMDE7XG4gICAgICBzaW1wbGVSaW5nID0gc2ltcGxpZnkocHRzLCB0b2xlcmFuY2UsIGhpZ2hRdWFsaXR5KS5tYXAoZnVuY3Rpb24gKFxuICAgICAgICBjb29yZHNcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gW2Nvb3Jkcy54LCBjb29yZHMueV07XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgc2ltcGxlUmluZ1tzaW1wbGVSaW5nLmxlbmd0aCAtIDFdWzBdICE9PSBzaW1wbGVSaW5nWzBdWzBdIHx8XG4gICAgICBzaW1wbGVSaW5nW3NpbXBsZVJpbmcubGVuZ3RoIC0gMV1bMV0gIT09IHNpbXBsZVJpbmdbMF1bMV1cbiAgICApIHtcbiAgICAgIHNpbXBsZVJpbmcucHVzaChzaW1wbGVSaW5nWzBdKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpbXBsZVJpbmc7XG4gIH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiByaW5nIGhhcyBhdCBsZWFzdCAzIGNvb3JkaW5hdGVzIGFuZCBpdHMgZmlyc3QgY29vcmRpbmF0ZSBpcyB0aGUgc2FtZSBhcyBpdHMgbGFzdFxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHJpbmcgY29vcmRpbmF0ZXMgdG8gYmUgY2hlY2tlZFxuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdmFsaWRcbiAqL1xuZnVuY3Rpb24gY2hlY2tWYWxpZGl0eShyaW5nKSB7XG4gIGlmIChyaW5nLmxlbmd0aCA8IDMpIHJldHVybiBmYWxzZTtcbiAgLy9pZiB0aGUgbGFzdCBwb2ludCBpcyB0aGUgc2FtZSBhcyB0aGUgZmlyc3QsIGl0J3Mgbm90IGEgdHJpYW5nbGVcbiAgcmV0dXJuICEoXG4gICAgcmluZy5sZW5ndGggPT09IDMgJiZcbiAgICByaW5nWzJdWzBdID09PSByaW5nWzBdWzBdICYmXG4gICAgcmluZ1syXVsxXSA9PT0gcmluZ1swXVsxXVxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzaW1wbGlmeSQxO1xuIiwiLyoqXG4gKiBAbW9kdWxlIGhlbHBlcnNcbiAqL1xuLyoqXG4gKiBFYXJ0aCBSYWRpdXMgdXNlZCB3aXRoIHRoZSBIYXJ2ZXNpbmUgZm9ybXVsYSBhbmQgYXBwcm94aW1hdGVzIHVzaW5nIGEgc3BoZXJpY2FsIChub24tZWxsaXBzb2lkKSBFYXJ0aC5cbiAqXG4gKiBAbWVtYmVyb2YgaGVscGVyc1xuICogQHR5cGUge251bWJlcn1cbiAqL1xuZXhwb3J0IHZhciBlYXJ0aFJhZGl1cyA9IDYzNzEwMDguODtcbi8qKlxuICogVW5pdCBvZiBtZWFzdXJlbWVudCBmYWN0b3JzIHVzaW5nIGEgc3BoZXJpY2FsIChub24tZWxsaXBzb2lkKSBlYXJ0aCByYWRpdXMuXG4gKlxuICogQG1lbWJlcm9mIGhlbHBlcnNcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydCB2YXIgZmFjdG9ycyA9IHtcbiAgICBjZW50aW1ldGVyczogZWFydGhSYWRpdXMgKiAxMDAsXG4gICAgY2VudGltZXRyZXM6IGVhcnRoUmFkaXVzICogMTAwLFxuICAgIGRlZ3JlZXM6IGVhcnRoUmFkaXVzIC8gMTExMzI1LFxuICAgIGZlZXQ6IGVhcnRoUmFkaXVzICogMy4yODA4NCxcbiAgICBpbmNoZXM6IGVhcnRoUmFkaXVzICogMzkuMzcsXG4gICAga2lsb21ldGVyczogZWFydGhSYWRpdXMgLyAxMDAwLFxuICAgIGtpbG9tZXRyZXM6IGVhcnRoUmFkaXVzIC8gMTAwMCxcbiAgICBtZXRlcnM6IGVhcnRoUmFkaXVzLFxuICAgIG1ldHJlczogZWFydGhSYWRpdXMsXG4gICAgbWlsZXM6IGVhcnRoUmFkaXVzIC8gMTYwOS4zNDQsXG4gICAgbWlsbGltZXRlcnM6IGVhcnRoUmFkaXVzICogMTAwMCxcbiAgICBtaWxsaW1ldHJlczogZWFydGhSYWRpdXMgKiAxMDAwLFxuICAgIG5hdXRpY2FsbWlsZXM6IGVhcnRoUmFkaXVzIC8gMTg1MixcbiAgICByYWRpYW5zOiAxLFxuICAgIHlhcmRzOiBlYXJ0aFJhZGl1cyAqIDEuMDkzNixcbn07XG4vKipcbiAqIFVuaXRzIG9mIG1lYXN1cmVtZW50IGZhY3RvcnMgYmFzZWQgb24gMSBtZXRlci5cbiAqXG4gKiBAbWVtYmVyb2YgaGVscGVyc1xuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0IHZhciB1bml0c0ZhY3RvcnMgPSB7XG4gICAgY2VudGltZXRlcnM6IDEwMCxcbiAgICBjZW50aW1ldHJlczogMTAwLFxuICAgIGRlZ3JlZXM6IDEgLyAxMTEzMjUsXG4gICAgZmVldDogMy4yODA4NCxcbiAgICBpbmNoZXM6IDM5LjM3LFxuICAgIGtpbG9tZXRlcnM6IDEgLyAxMDAwLFxuICAgIGtpbG9tZXRyZXM6IDEgLyAxMDAwLFxuICAgIG1ldGVyczogMSxcbiAgICBtZXRyZXM6IDEsXG4gICAgbWlsZXM6IDEgLyAxNjA5LjM0NCxcbiAgICBtaWxsaW1ldGVyczogMTAwMCxcbiAgICBtaWxsaW1ldHJlczogMTAwMCxcbiAgICBuYXV0aWNhbG1pbGVzOiAxIC8gMTg1MixcbiAgICByYWRpYW5zOiAxIC8gZWFydGhSYWRpdXMsXG4gICAgeWFyZHM6IDEuMDkzNjEzMyxcbn07XG4vKipcbiAqIEFyZWEgb2YgbWVhc3VyZW1lbnQgZmFjdG9ycyBiYXNlZCBvbiAxIHNxdWFyZSBtZXRlci5cbiAqXG4gKiBAbWVtYmVyb2YgaGVscGVyc1xuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0IHZhciBhcmVhRmFjdG9ycyA9IHtcbiAgICBhY3JlczogMC4wMDAyNDcxMDUsXG4gICAgY2VudGltZXRlcnM6IDEwMDAwLFxuICAgIGNlbnRpbWV0cmVzOiAxMDAwMCxcbiAgICBmZWV0OiAxMC43NjM5MTA0MTcsXG4gICAgaGVjdGFyZXM6IDAuMDAwMSxcbiAgICBpbmNoZXM6IDE1NTAuMDAzMTAwMDA2LFxuICAgIGtpbG9tZXRlcnM6IDAuMDAwMDAxLFxuICAgIGtpbG9tZXRyZXM6IDAuMDAwMDAxLFxuICAgIG1ldGVyczogMSxcbiAgICBtZXRyZXM6IDEsXG4gICAgbWlsZXM6IDMuODZlLTcsXG4gICAgbWlsbGltZXRlcnM6IDEwMDAwMDAsXG4gICAgbWlsbGltZXRyZXM6IDEwMDAwMDAsXG4gICAgeWFyZHM6IDEuMTk1OTkwMDQ2LFxufTtcbi8qKlxuICogV3JhcHMgYSBHZW9KU09OIHtAbGluayBHZW9tZXRyeX0gaW4gYSBHZW9KU09OIHtAbGluayBGZWF0dXJlfS5cbiAqXG4gKiBAbmFtZSBmZWF0dXJlXG4gKiBAcGFyYW0ge0dlb21ldHJ5fSBnZW9tZXRyeSBpbnB1dCBnZW9tZXRyeVxuICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzPXt9XSBhbiBPYmplY3Qgb2Yga2V5LXZhbHVlIHBhaXJzIHRvIGFkZCBhcyBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIE9wdGlvbmFsIFBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gW29wdGlvbnMuYmJveF0gQm91bmRpbmcgQm94IEFycmF5IFt3ZXN0LCBzb3V0aCwgZWFzdCwgbm9ydGhdIGFzc29jaWF0ZWQgd2l0aCB0aGUgRmVhdHVyZVxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBbb3B0aW9ucy5pZF0gSWRlbnRpZmllciBhc3NvY2lhdGVkIHdpdGggdGhlIEZlYXR1cmVcbiAqIEByZXR1cm5zIHtGZWF0dXJlfSBhIEdlb0pTT04gRmVhdHVyZVxuICogQGV4YW1wbGVcbiAqIHZhciBnZW9tZXRyeSA9IHtcbiAqICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgXCJjb29yZGluYXRlc1wiOiBbMTEwLCA1MF1cbiAqIH07XG4gKlxuICogdmFyIGZlYXR1cmUgPSB0dXJmLmZlYXR1cmUoZ2VvbWV0cnkpO1xuICpcbiAqIC8vPWZlYXR1cmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZlYXR1cmUoZ2VvbSwgcHJvcGVydGllcywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgdmFyIGZlYXQgPSB7IHR5cGU6IFwiRmVhdHVyZVwiIH07XG4gICAgaWYgKG9wdGlvbnMuaWQgPT09IDAgfHwgb3B0aW9ucy5pZCkge1xuICAgICAgICBmZWF0LmlkID0gb3B0aW9ucy5pZDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuYmJveCkge1xuICAgICAgICBmZWF0LmJib3ggPSBvcHRpb25zLmJib3g7XG4gICAgfVxuICAgIGZlYXQucHJvcGVydGllcyA9IHByb3BlcnRpZXMgfHwge307XG4gICAgZmVhdC5nZW9tZXRyeSA9IGdlb207XG4gICAgcmV0dXJuIGZlYXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBHZW9KU09OIHtAbGluayBHZW9tZXRyeX0gZnJvbSBhIEdlb21ldHJ5IHN0cmluZyB0eXBlICYgY29vcmRpbmF0ZXMuXG4gKiBGb3IgR2VvbWV0cnlDb2xsZWN0aW9uIHR5cGUgdXNlIGBoZWxwZXJzLmdlb21ldHJ5Q29sbGVjdGlvbmBcbiAqXG4gKiBAbmFtZSBnZW9tZXRyeVxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgR2VvbWV0cnkgVHlwZVxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBjb29yZGluYXRlcyBDb29yZGluYXRlc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBPcHRpb25hbCBQYXJhbWV0ZXJzXG4gKiBAcmV0dXJucyB7R2VvbWV0cnl9IGEgR2VvSlNPTiBHZW9tZXRyeVxuICogQGV4YW1wbGVcbiAqIHZhciB0eXBlID0gXCJQb2ludFwiO1xuICogdmFyIGNvb3JkaW5hdGVzID0gWzExMCwgNTBdO1xuICogdmFyIGdlb21ldHJ5ID0gdHVyZi5nZW9tZXRyeSh0eXBlLCBjb29yZGluYXRlcyk7XG4gKiAvLyA9PiBnZW9tZXRyeVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VvbWV0cnkodHlwZSwgY29vcmRpbmF0ZXMsIF9vcHRpb25zKSB7XG4gICAgaWYgKF9vcHRpb25zID09PSB2b2lkIDApIHsgX29wdGlvbnMgPSB7fTsgfVxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwiUG9pbnRcIjpcbiAgICAgICAgICAgIHJldHVybiBwb2ludChjb29yZGluYXRlcykuZ2VvbWV0cnk7XG4gICAgICAgIGNhc2UgXCJMaW5lU3RyaW5nXCI6XG4gICAgICAgICAgICByZXR1cm4gbGluZVN0cmluZyhjb29yZGluYXRlcykuZ2VvbWV0cnk7XG4gICAgICAgIGNhc2UgXCJQb2x5Z29uXCI6XG4gICAgICAgICAgICByZXR1cm4gcG9seWdvbihjb29yZGluYXRlcykuZ2VvbWV0cnk7XG4gICAgICAgIGNhc2UgXCJNdWx0aVBvaW50XCI6XG4gICAgICAgICAgICByZXR1cm4gbXVsdGlQb2ludChjb29yZGluYXRlcykuZ2VvbWV0cnk7XG4gICAgICAgIGNhc2UgXCJNdWx0aUxpbmVTdHJpbmdcIjpcbiAgICAgICAgICAgIHJldHVybiBtdWx0aUxpbmVTdHJpbmcoY29vcmRpbmF0ZXMpLmdlb21ldHJ5O1xuICAgICAgICBjYXNlIFwiTXVsdGlQb2x5Z29uXCI6XG4gICAgICAgICAgICByZXR1cm4gbXVsdGlQb2x5Z29uKGNvb3JkaW5hdGVzKS5nZW9tZXRyeTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0eXBlICsgXCIgaXMgaW52YWxpZFwiKTtcbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgUG9pbnR9IHtAbGluayBGZWF0dXJlfSBmcm9tIGEgUG9zaXRpb24uXG4gKlxuICogQG5hbWUgcG9pbnRcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gY29vcmRpbmF0ZXMgbG9uZ2l0dWRlLCBsYXRpdHVkZSBwb3NpdGlvbiAoZWFjaCBpbiBkZWNpbWFsIGRlZ3JlZXMpXG4gKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXM9e31dIGFuIE9iamVjdCBvZiBrZXktdmFsdWUgcGFpcnMgdG8gYWRkIGFzIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gT3B0aW9uYWwgUGFyYW1ldGVyc1xuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBbb3B0aW9ucy5iYm94XSBCb3VuZGluZyBCb3ggQXJyYXkgW3dlc3QsIHNvdXRoLCBlYXN0LCBub3J0aF0gYXNzb2NpYXRlZCB3aXRoIHRoZSBGZWF0dXJlXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IFtvcHRpb25zLmlkXSBJZGVudGlmaWVyIGFzc29jaWF0ZWQgd2l0aCB0aGUgRmVhdHVyZVxuICogQHJldHVybnMge0ZlYXR1cmU8UG9pbnQ+fSBhIFBvaW50IGZlYXR1cmVcbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9pbnQgPSB0dXJmLnBvaW50KFstNzUuMzQzLCAzOS45ODRdKTtcbiAqXG4gKiAvLz1wb2ludFxuICovXG5leHBvcnQgZnVuY3Rpb24gcG9pbnQoY29vcmRpbmF0ZXMsIHByb3BlcnRpZXMsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIGlmICghY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY29vcmRpbmF0ZXMgaXMgcmVxdWlyZWRcIik7XG4gICAgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShjb29yZGluYXRlcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY29vcmRpbmF0ZXMgbXVzdCBiZSBhbiBBcnJheVwiKTtcbiAgICB9XG4gICAgaWYgKGNvb3JkaW5hdGVzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY29vcmRpbmF0ZXMgbXVzdCBiZSBhdCBsZWFzdCAyIG51bWJlcnMgbG9uZ1wiKTtcbiAgICB9XG4gICAgaWYgKCFpc051bWJlcihjb29yZGluYXRlc1swXSkgfHwgIWlzTnVtYmVyKGNvb3JkaW5hdGVzWzFdKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb29yZGluYXRlcyBtdXN0IGNvbnRhaW4gbnVtYmVyc1wiKTtcbiAgICB9XG4gICAgdmFyIGdlb20gPSB7XG4gICAgICAgIHR5cGU6IFwiUG9pbnRcIixcbiAgICAgICAgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzLFxuICAgIH07XG4gICAgcmV0dXJuIGZlYXR1cmUoZ2VvbSwgcHJvcGVydGllcywgb3B0aW9ucyk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgUG9pbnR9IHtAbGluayBGZWF0dXJlQ29sbGVjdGlvbn0gZnJvbSBhbiBBcnJheSBvZiBQb2ludCBjb29yZGluYXRlcy5cbiAqXG4gKiBAbmFtZSBwb2ludHNcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IGNvb3JkaW5hdGVzIGFuIGFycmF5IG9mIFBvaW50c1xuICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzPXt9XSBUcmFuc2xhdGUgdGhlc2UgcHJvcGVydGllcyB0byBlYWNoIEZlYXR1cmVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gT3B0aW9uYWwgUGFyYW1ldGVyc1xuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBbb3B0aW9ucy5iYm94XSBCb3VuZGluZyBCb3ggQXJyYXkgW3dlc3QsIHNvdXRoLCBlYXN0LCBub3J0aF1cbiAqIGFzc29jaWF0ZWQgd2l0aCB0aGUgRmVhdHVyZUNvbGxlY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gW29wdGlvbnMuaWRdIElkZW50aWZpZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBGZWF0dXJlQ29sbGVjdGlvblxuICogQHJldHVybnMge0ZlYXR1cmVDb2xsZWN0aW9uPFBvaW50Pn0gUG9pbnQgRmVhdHVyZVxuICogQGV4YW1wbGVcbiAqIHZhciBwb2ludHMgPSB0dXJmLnBvaW50cyhbXG4gKiAgIFstNzUsIDM5XSxcbiAqICAgWy04MCwgNDVdLFxuICogICBbLTc4LCA1MF1cbiAqIF0pO1xuICpcbiAqIC8vPXBvaW50c1xuICovXG5leHBvcnQgZnVuY3Rpb24gcG9pbnRzKGNvb3JkaW5hdGVzLCBwcm9wZXJ0aWVzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICByZXR1cm4gZmVhdHVyZUNvbGxlY3Rpb24oY29vcmRpbmF0ZXMubWFwKGZ1bmN0aW9uIChjb29yZHMpIHtcbiAgICAgICAgcmV0dXJuIHBvaW50KGNvb3JkcywgcHJvcGVydGllcyk7XG4gICAgfSksIG9wdGlvbnMpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEge0BsaW5rIFBvbHlnb259IHtAbGluayBGZWF0dXJlfSBmcm9tIGFuIEFycmF5IG9mIExpbmVhclJpbmdzLlxuICpcbiAqIEBuYW1lIHBvbHlnb25cbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8QXJyYXk8bnVtYmVyPj4+fSBjb29yZGluYXRlcyBhbiBhcnJheSBvZiBMaW5lYXJSaW5nc1xuICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzPXt9XSBhbiBPYmplY3Qgb2Yga2V5LXZhbHVlIHBhaXJzIHRvIGFkZCBhcyBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIE9wdGlvbmFsIFBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gW29wdGlvbnMuYmJveF0gQm91bmRpbmcgQm94IEFycmF5IFt3ZXN0LCBzb3V0aCwgZWFzdCwgbm9ydGhdIGFzc29jaWF0ZWQgd2l0aCB0aGUgRmVhdHVyZVxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBbb3B0aW9ucy5pZF0gSWRlbnRpZmllciBhc3NvY2lhdGVkIHdpdGggdGhlIEZlYXR1cmVcbiAqIEByZXR1cm5zIHtGZWF0dXJlPFBvbHlnb24+fSBQb2x5Z29uIEZlYXR1cmVcbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9seWdvbiA9IHR1cmYucG9seWdvbihbW1stNSwgNTJdLCBbLTQsIDU2XSwgWy0yLCA1MV0sIFstNywgNTRdLCBbLTUsIDUyXV1dLCB7IG5hbWU6ICdwb2x5MScgfSk7XG4gKlxuICogLy89cG9seWdvblxuICovXG5leHBvcnQgZnVuY3Rpb24gcG9seWdvbihjb29yZGluYXRlcywgcHJvcGVydGllcywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgZm9yICh2YXIgX2kgPSAwLCBjb29yZGluYXRlc18xID0gY29vcmRpbmF0ZXM7IF9pIDwgY29vcmRpbmF0ZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHJpbmcgPSBjb29yZGluYXRlc18xW19pXTtcbiAgICAgICAgaWYgKHJpbmcubGVuZ3RoIDwgNCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRWFjaCBMaW5lYXJSaW5nIG9mIGEgUG9seWdvbiBtdXN0IGhhdmUgNCBvciBtb3JlIFBvc2l0aW9ucy5cIik7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCByaW5nW3JpbmcubGVuZ3RoIC0gMV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIGZpcnN0IHBvaW50IG9mIFBvbHlnb24gY29udGFpbnMgdHdvIG51bWJlcnNcbiAgICAgICAgICAgIGlmIChyaW5nW3JpbmcubGVuZ3RoIC0gMV1bal0gIT09IHJpbmdbMF1bal0pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGaXJzdCBhbmQgbGFzdCBQb3NpdGlvbiBhcmUgbm90IGVxdWl2YWxlbnQuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBnZW9tID0ge1xuICAgICAgICB0eXBlOiBcIlBvbHlnb25cIixcbiAgICAgICAgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzLFxuICAgIH07XG4gICAgcmV0dXJuIGZlYXR1cmUoZ2VvbSwgcHJvcGVydGllcywgb3B0aW9ucyk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgUG9seWdvbn0ge0BsaW5rIEZlYXR1cmVDb2xsZWN0aW9ufSBmcm9tIGFuIEFycmF5IG9mIFBvbHlnb24gY29vcmRpbmF0ZXMuXG4gKlxuICogQG5hbWUgcG9seWdvbnNcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8QXJyYXk8QXJyYXk8bnVtYmVyPj4+Pn0gY29vcmRpbmF0ZXMgYW4gYXJyYXkgb2YgUG9seWdvbiBjb29yZGluYXRlc1xuICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzPXt9XSBhbiBPYmplY3Qgb2Yga2V5LXZhbHVlIHBhaXJzIHRvIGFkZCBhcyBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIE9wdGlvbmFsIFBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gW29wdGlvbnMuYmJveF0gQm91bmRpbmcgQm94IEFycmF5IFt3ZXN0LCBzb3V0aCwgZWFzdCwgbm9ydGhdIGFzc29jaWF0ZWQgd2l0aCB0aGUgRmVhdHVyZVxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBbb3B0aW9ucy5pZF0gSWRlbnRpZmllciBhc3NvY2lhdGVkIHdpdGggdGhlIEZlYXR1cmVDb2xsZWN0aW9uXG4gKiBAcmV0dXJucyB7RmVhdHVyZUNvbGxlY3Rpb248UG9seWdvbj59IFBvbHlnb24gRmVhdHVyZUNvbGxlY3Rpb25cbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9seWdvbnMgPSB0dXJmLnBvbHlnb25zKFtcbiAqICAgW1tbLTUsIDUyXSwgWy00LCA1Nl0sIFstMiwgNTFdLCBbLTcsIDU0XSwgWy01LCA1Ml1dXSxcbiAqICAgW1tbLTE1LCA0Ml0sIFstMTQsIDQ2XSwgWy0xMiwgNDFdLCBbLTE3LCA0NF0sIFstMTUsIDQyXV1dLFxuICogXSk7XG4gKlxuICogLy89cG9seWdvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvbHlnb25zKGNvb3JkaW5hdGVzLCBwcm9wZXJ0aWVzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICByZXR1cm4gZmVhdHVyZUNvbGxlY3Rpb24oY29vcmRpbmF0ZXMubWFwKGZ1bmN0aW9uIChjb29yZHMpIHtcbiAgICAgICAgcmV0dXJuIHBvbHlnb24oY29vcmRzLCBwcm9wZXJ0aWVzKTtcbiAgICB9KSwgb3B0aW9ucyk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgTGluZVN0cmluZ30ge0BsaW5rIEZlYXR1cmV9IGZyb20gYW4gQXJyYXkgb2YgUG9zaXRpb25zLlxuICpcbiAqIEBuYW1lIGxpbmVTdHJpbmdcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IGNvb3JkaW5hdGVzIGFuIGFycmF5IG9mIFBvc2l0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzPXt9XSBhbiBPYmplY3Qgb2Yga2V5LXZhbHVlIHBhaXJzIHRvIGFkZCBhcyBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIE9wdGlvbmFsIFBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gW29wdGlvbnMuYmJveF0gQm91bmRpbmcgQm94IEFycmF5IFt3ZXN0LCBzb3V0aCwgZWFzdCwgbm9ydGhdIGFzc29jaWF0ZWQgd2l0aCB0aGUgRmVhdHVyZVxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBbb3B0aW9ucy5pZF0gSWRlbnRpZmllciBhc3NvY2lhdGVkIHdpdGggdGhlIEZlYXR1cmVcbiAqIEByZXR1cm5zIHtGZWF0dXJlPExpbmVTdHJpbmc+fSBMaW5lU3RyaW5nIEZlYXR1cmVcbiAqIEBleGFtcGxlXG4gKiB2YXIgbGluZXN0cmluZzEgPSB0dXJmLmxpbmVTdHJpbmcoW1stMjQsIDYzXSwgWy0yMywgNjBdLCBbLTI1LCA2NV0sIFstMjAsIDY5XV0sIHtuYW1lOiAnbGluZSAxJ30pO1xuICogdmFyIGxpbmVzdHJpbmcyID0gdHVyZi5saW5lU3RyaW5nKFtbLTE0LCA0M10sIFstMTMsIDQwXSwgWy0xNSwgNDVdLCBbLTEwLCA0OV1dLCB7bmFtZTogJ2xpbmUgMid9KTtcbiAqXG4gKiAvLz1saW5lc3RyaW5nMVxuICogLy89bGluZXN0cmluZzJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpbmVTdHJpbmcoY29vcmRpbmF0ZXMsIHByb3BlcnRpZXMsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIGlmIChjb29yZGluYXRlcy5sZW5ndGggPCAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImNvb3JkaW5hdGVzIG11c3QgYmUgYW4gYXJyYXkgb2YgdHdvIG9yIG1vcmUgcG9zaXRpb25zXCIpO1xuICAgIH1cbiAgICB2YXIgZ2VvbSA9IHtcbiAgICAgICAgdHlwZTogXCJMaW5lU3RyaW5nXCIsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlcyxcbiAgICB9O1xuICAgIHJldHVybiBmZWF0dXJlKGdlb20sIHByb3BlcnRpZXMsIG9wdGlvbnMpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEge0BsaW5rIExpbmVTdHJpbmd9IHtAbGluayBGZWF0dXJlQ29sbGVjdGlvbn0gZnJvbSBhbiBBcnJheSBvZiBMaW5lU3RyaW5nIGNvb3JkaW5hdGVzLlxuICpcbiAqIEBuYW1lIGxpbmVTdHJpbmdzXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PEFycmF5PG51bWJlcj4+Pn0gY29vcmRpbmF0ZXMgYW4gYXJyYXkgb2YgTGluZWFyUmluZ3NcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllcz17fV0gYW4gT2JqZWN0IG9mIGtleS12YWx1ZSBwYWlycyB0byBhZGQgYXMgcHJvcGVydGllc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBPcHRpb25hbCBQYXJhbWV0ZXJzXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IFtvcHRpb25zLmJib3hdIEJvdW5kaW5nIEJveCBBcnJheSBbd2VzdCwgc291dGgsIGVhc3QsIG5vcnRoXVxuICogYXNzb2NpYXRlZCB3aXRoIHRoZSBGZWF0dXJlQ29sbGVjdGlvblxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBbb3B0aW9ucy5pZF0gSWRlbnRpZmllciBhc3NvY2lhdGVkIHdpdGggdGhlIEZlYXR1cmVDb2xsZWN0aW9uXG4gKiBAcmV0dXJucyB7RmVhdHVyZUNvbGxlY3Rpb248TGluZVN0cmluZz59IExpbmVTdHJpbmcgRmVhdHVyZUNvbGxlY3Rpb25cbiAqIEBleGFtcGxlXG4gKiB2YXIgbGluZXN0cmluZ3MgPSB0dXJmLmxpbmVTdHJpbmdzKFtcbiAqICAgW1stMjQsIDYzXSwgWy0yMywgNjBdLCBbLTI1LCA2NV0sIFstMjAsIDY5XV0sXG4gKiAgIFtbLTE0LCA0M10sIFstMTMsIDQwXSwgWy0xNSwgNDVdLCBbLTEwLCA0OV1dXG4gKiBdKTtcbiAqXG4gKiAvLz1saW5lc3RyaW5nc1xuICovXG5leHBvcnQgZnVuY3Rpb24gbGluZVN0cmluZ3MoY29vcmRpbmF0ZXMsIHByb3BlcnRpZXMsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHJldHVybiBmZWF0dXJlQ29sbGVjdGlvbihjb29yZGluYXRlcy5tYXAoZnVuY3Rpb24gKGNvb3Jkcykge1xuICAgICAgICByZXR1cm4gbGluZVN0cmluZyhjb29yZHMsIHByb3BlcnRpZXMpO1xuICAgIH0pLCBvcHRpb25zKTtcbn1cbi8qKlxuICogVGFrZXMgb25lIG9yIG1vcmUge0BsaW5rIEZlYXR1cmV8RmVhdHVyZXN9IGFuZCBjcmVhdGVzIGEge0BsaW5rIEZlYXR1cmVDb2xsZWN0aW9ufS5cbiAqXG4gKiBAbmFtZSBmZWF0dXJlQ29sbGVjdGlvblxuICogQHBhcmFtIHtGZWF0dXJlW119IGZlYXR1cmVzIGlucHV0IGZlYXR1cmVzXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIE9wdGlvbmFsIFBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gW29wdGlvbnMuYmJveF0gQm91bmRpbmcgQm94IEFycmF5IFt3ZXN0LCBzb3V0aCwgZWFzdCwgbm9ydGhdIGFzc29jaWF0ZWQgd2l0aCB0aGUgRmVhdHVyZVxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBbb3B0aW9ucy5pZF0gSWRlbnRpZmllciBhc3NvY2lhdGVkIHdpdGggdGhlIEZlYXR1cmVcbiAqIEByZXR1cm5zIHtGZWF0dXJlQ29sbGVjdGlvbn0gRmVhdHVyZUNvbGxlY3Rpb24gb2YgRmVhdHVyZXNcbiAqIEBleGFtcGxlXG4gKiB2YXIgbG9jYXRpb25BID0gdHVyZi5wb2ludChbLTc1LjM0MywgMzkuOTg0XSwge25hbWU6ICdMb2NhdGlvbiBBJ30pO1xuICogdmFyIGxvY2F0aW9uQiA9IHR1cmYucG9pbnQoWy03NS44MzMsIDM5LjI4NF0sIHtuYW1lOiAnTG9jYXRpb24gQid9KTtcbiAqIHZhciBsb2NhdGlvbkMgPSB0dXJmLnBvaW50KFstNzUuNTM0LCAzOS4xMjNdLCB7bmFtZTogJ0xvY2F0aW9uIEMnfSk7XG4gKlxuICogdmFyIGNvbGxlY3Rpb24gPSB0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtcbiAqICAgbG9jYXRpb25BLFxuICogICBsb2NhdGlvbkIsXG4gKiAgIGxvY2F0aW9uQ1xuICogXSk7XG4gKlxuICogLy89Y29sbGVjdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZmVhdHVyZUNvbGxlY3Rpb24oZmVhdHVyZXMsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHZhciBmYyA9IHsgdHlwZTogXCJGZWF0dXJlQ29sbGVjdGlvblwiIH07XG4gICAgaWYgKG9wdGlvbnMuaWQpIHtcbiAgICAgICAgZmMuaWQgPSBvcHRpb25zLmlkO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5iYm94KSB7XG4gICAgICAgIGZjLmJib3ggPSBvcHRpb25zLmJib3g7XG4gICAgfVxuICAgIGZjLmZlYXR1cmVzID0gZmVhdHVyZXM7XG4gICAgcmV0dXJuIGZjO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEge0BsaW5rIEZlYXR1cmU8TXVsdGlMaW5lU3RyaW5nPn0gYmFzZWQgb24gYVxuICogY29vcmRpbmF0ZSBhcnJheS4gUHJvcGVydGllcyBjYW4gYmUgYWRkZWQgb3B0aW9uYWxseS5cbiAqXG4gKiBAbmFtZSBtdWx0aUxpbmVTdHJpbmdcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8QXJyYXk8bnVtYmVyPj4+fSBjb29yZGluYXRlcyBhbiBhcnJheSBvZiBMaW5lU3RyaW5nc1xuICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzPXt9XSBhbiBPYmplY3Qgb2Yga2V5LXZhbHVlIHBhaXJzIHRvIGFkZCBhcyBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIE9wdGlvbmFsIFBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gW29wdGlvbnMuYmJveF0gQm91bmRpbmcgQm94IEFycmF5IFt3ZXN0LCBzb3V0aCwgZWFzdCwgbm9ydGhdIGFzc29jaWF0ZWQgd2l0aCB0aGUgRmVhdHVyZVxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBbb3B0aW9ucy5pZF0gSWRlbnRpZmllciBhc3NvY2lhdGVkIHdpdGggdGhlIEZlYXR1cmVcbiAqIEByZXR1cm5zIHtGZWF0dXJlPE11bHRpTGluZVN0cmluZz59IGEgTXVsdGlMaW5lU3RyaW5nIGZlYXR1cmVcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiBubyBjb29yZGluYXRlcyBhcmUgcGFzc2VkXG4gKiBAZXhhbXBsZVxuICogdmFyIG11bHRpTGluZSA9IHR1cmYubXVsdGlMaW5lU3RyaW5nKFtbWzAsMF0sWzEwLDEwXV1dKTtcbiAqXG4gKiAvLz1tdWx0aUxpbmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpTGluZVN0cmluZyhjb29yZGluYXRlcywgcHJvcGVydGllcywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgdmFyIGdlb20gPSB7XG4gICAgICAgIHR5cGU6IFwiTXVsdGlMaW5lU3RyaW5nXCIsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlcyxcbiAgICB9O1xuICAgIHJldHVybiBmZWF0dXJlKGdlb20sIHByb3BlcnRpZXMsIG9wdGlvbnMpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEge0BsaW5rIEZlYXR1cmU8TXVsdGlQb2ludD59IGJhc2VkIG9uIGFcbiAqIGNvb3JkaW5hdGUgYXJyYXkuIFByb3BlcnRpZXMgY2FuIGJlIGFkZGVkIG9wdGlvbmFsbHkuXG4gKlxuICogQG5hbWUgbXVsdGlQb2ludFxuICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gY29vcmRpbmF0ZXMgYW4gYXJyYXkgb2YgUG9zaXRpb25zXG4gKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXM9e31dIGFuIE9iamVjdCBvZiBrZXktdmFsdWUgcGFpcnMgdG8gYWRkIGFzIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gT3B0aW9uYWwgUGFyYW1ldGVyc1xuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBbb3B0aW9ucy5iYm94XSBCb3VuZGluZyBCb3ggQXJyYXkgW3dlc3QsIHNvdXRoLCBlYXN0LCBub3J0aF0gYXNzb2NpYXRlZCB3aXRoIHRoZSBGZWF0dXJlXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IFtvcHRpb25zLmlkXSBJZGVudGlmaWVyIGFzc29jaWF0ZWQgd2l0aCB0aGUgRmVhdHVyZVxuICogQHJldHVybnMge0ZlYXR1cmU8TXVsdGlQb2ludD59IGEgTXVsdGlQb2ludCBmZWF0dXJlXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgbm8gY29vcmRpbmF0ZXMgYXJlIHBhc3NlZFxuICogQGV4YW1wbGVcbiAqIHZhciBtdWx0aVB0ID0gdHVyZi5tdWx0aVBvaW50KFtbMCwwXSxbMTAsMTBdXSk7XG4gKlxuICogLy89bXVsdGlQdFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlQb2ludChjb29yZGluYXRlcywgcHJvcGVydGllcywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgdmFyIGdlb20gPSB7XG4gICAgICAgIHR5cGU6IFwiTXVsdGlQb2ludFwiLFxuICAgICAgICBjb29yZGluYXRlczogY29vcmRpbmF0ZXMsXG4gICAgfTtcbiAgICByZXR1cm4gZmVhdHVyZShnZW9tLCBwcm9wZXJ0aWVzLCBvcHRpb25zKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIHtAbGluayBGZWF0dXJlPE11bHRpUG9seWdvbj59IGJhc2VkIG9uIGFcbiAqIGNvb3JkaW5hdGUgYXJyYXkuIFByb3BlcnRpZXMgY2FuIGJlIGFkZGVkIG9wdGlvbmFsbHkuXG4gKlxuICogQG5hbWUgbXVsdGlQb2x5Z29uXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PEFycmF5PEFycmF5PG51bWJlcj4+Pj59IGNvb3JkaW5hdGVzIGFuIGFycmF5IG9mIFBvbHlnb25zXG4gKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXM9e31dIGFuIE9iamVjdCBvZiBrZXktdmFsdWUgcGFpcnMgdG8gYWRkIGFzIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gT3B0aW9uYWwgUGFyYW1ldGVyc1xuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBbb3B0aW9ucy5iYm94XSBCb3VuZGluZyBCb3ggQXJyYXkgW3dlc3QsIHNvdXRoLCBlYXN0LCBub3J0aF0gYXNzb2NpYXRlZCB3aXRoIHRoZSBGZWF0dXJlXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IFtvcHRpb25zLmlkXSBJZGVudGlmaWVyIGFzc29jaWF0ZWQgd2l0aCB0aGUgRmVhdHVyZVxuICogQHJldHVybnMge0ZlYXR1cmU8TXVsdGlQb2x5Z29uPn0gYSBtdWx0aXBvbHlnb24gZmVhdHVyZVxuICogQHRocm93cyB7RXJyb3J9IGlmIG5vIGNvb3JkaW5hdGVzIGFyZSBwYXNzZWRcbiAqIEBleGFtcGxlXG4gKiB2YXIgbXVsdGlQb2x5ID0gdHVyZi5tdWx0aVBvbHlnb24oW1tbWzAsMF0sWzAsMTBdLFsxMCwxMF0sWzEwLDBdLFswLDBdXV1dKTtcbiAqXG4gKiAvLz1tdWx0aVBvbHlcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aVBvbHlnb24oY29vcmRpbmF0ZXMsIHByb3BlcnRpZXMsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHZhciBnZW9tID0ge1xuICAgICAgICB0eXBlOiBcIk11bHRpUG9seWdvblwiLFxuICAgICAgICBjb29yZGluYXRlczogY29vcmRpbmF0ZXMsXG4gICAgfTtcbiAgICByZXR1cm4gZmVhdHVyZShnZW9tLCBwcm9wZXJ0aWVzLCBvcHRpb25zKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIHtAbGluayBGZWF0dXJlPEdlb21ldHJ5Q29sbGVjdGlvbj59IGJhc2VkIG9uIGFcbiAqIGNvb3JkaW5hdGUgYXJyYXkuIFByb3BlcnRpZXMgY2FuIGJlIGFkZGVkIG9wdGlvbmFsbHkuXG4gKlxuICogQG5hbWUgZ2VvbWV0cnlDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5PEdlb21ldHJ5Pn0gZ2VvbWV0cmllcyBhbiBhcnJheSBvZiBHZW9KU09OIEdlb21ldHJpZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllcz17fV0gYW4gT2JqZWN0IG9mIGtleS12YWx1ZSBwYWlycyB0byBhZGQgYXMgcHJvcGVydGllc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBPcHRpb25hbCBQYXJhbWV0ZXJzXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IFtvcHRpb25zLmJib3hdIEJvdW5kaW5nIEJveCBBcnJheSBbd2VzdCwgc291dGgsIGVhc3QsIG5vcnRoXSBhc3NvY2lhdGVkIHdpdGggdGhlIEZlYXR1cmVcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gW29wdGlvbnMuaWRdIElkZW50aWZpZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBGZWF0dXJlXG4gKiBAcmV0dXJucyB7RmVhdHVyZTxHZW9tZXRyeUNvbGxlY3Rpb24+fSBhIEdlb0pTT04gR2VvbWV0cnlDb2xsZWN0aW9uIEZlYXR1cmVcbiAqIEBleGFtcGxlXG4gKiB2YXIgcHQgPSB0dXJmLmdlb21ldHJ5KFwiUG9pbnRcIiwgWzEwMCwgMF0pO1xuICogdmFyIGxpbmUgPSB0dXJmLmdlb21ldHJ5KFwiTGluZVN0cmluZ1wiLCBbWzEwMSwgMF0sIFsxMDIsIDFdXSk7XG4gKiB2YXIgY29sbGVjdGlvbiA9IHR1cmYuZ2VvbWV0cnlDb2xsZWN0aW9uKFtwdCwgbGluZV0pO1xuICpcbiAqIC8vID0+IGNvbGxlY3Rpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlb21ldHJ5Q29sbGVjdGlvbihnZW9tZXRyaWVzLCBwcm9wZXJ0aWVzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICB2YXIgZ2VvbSA9IHtcbiAgICAgICAgdHlwZTogXCJHZW9tZXRyeUNvbGxlY3Rpb25cIixcbiAgICAgICAgZ2VvbWV0cmllczogZ2VvbWV0cmllcyxcbiAgICB9O1xuICAgIHJldHVybiBmZWF0dXJlKGdlb20sIHByb3BlcnRpZXMsIG9wdGlvbnMpO1xufVxuLyoqXG4gKiBSb3VuZCBudW1iZXIgdG8gcHJlY2lzaW9uXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG51bSBOdW1iZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFByZWNpc2lvblxuICogQHJldHVybnMge251bWJlcn0gcm91bmRlZCBudW1iZXJcbiAqIEBleGFtcGxlXG4gKiB0dXJmLnJvdW5kKDEyMC40MzIxKVxuICogLy89MTIwXG4gKlxuICogdHVyZi5yb3VuZCgxMjAuNDMyMSwgMilcbiAqIC8vPTEyMC40M1xuICovXG5leHBvcnQgZnVuY3Rpb24gcm91bmQobnVtLCBwcmVjaXNpb24pIHtcbiAgICBpZiAocHJlY2lzaW9uID09PSB2b2lkIDApIHsgcHJlY2lzaW9uID0gMDsgfVxuICAgIGlmIChwcmVjaXNpb24gJiYgIShwcmVjaXNpb24gPj0gMCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicHJlY2lzaW9uIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXJcIik7XG4gICAgfVxuICAgIHZhciBtdWx0aXBsaWVyID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbiB8fCAwKTtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChudW0gKiBtdWx0aXBsaWVyKSAvIG11bHRpcGxpZXI7XG59XG4vKipcbiAqIENvbnZlcnQgYSBkaXN0YW5jZSBtZWFzdXJlbWVudCAoYXNzdW1pbmcgYSBzcGhlcmljYWwgRWFydGgpIGZyb20gcmFkaWFucyB0byBhIG1vcmUgZnJpZW5kbHkgdW5pdC5cbiAqIFZhbGlkIHVuaXRzOiBtaWxlcywgbmF1dGljYWxtaWxlcywgaW5jaGVzLCB5YXJkcywgbWV0ZXJzLCBtZXRyZXMsIGtpbG9tZXRlcnMsIGNlbnRpbWV0ZXJzLCBmZWV0XG4gKlxuICogQG5hbWUgcmFkaWFuc1RvTGVuZ3RoXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkaWFucyBpbiByYWRpYW5zIGFjcm9zcyB0aGUgc3BoZXJlXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VuaXRzPVwia2lsb21ldGVyc1wiXSBjYW4gYmUgZGVncmVlcywgcmFkaWFucywgbWlsZXMsIGluY2hlcywgeWFyZHMsIG1ldHJlcyxcbiAqIG1ldGVycywga2lsb21ldHJlcywga2lsb21ldGVycy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IGRpc3RhbmNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYWRpYW5zVG9MZW5ndGgocmFkaWFucywgdW5pdHMpIHtcbiAgICBpZiAodW5pdHMgPT09IHZvaWQgMCkgeyB1bml0cyA9IFwia2lsb21ldGVyc1wiOyB9XG4gICAgdmFyIGZhY3RvciA9IGZhY3RvcnNbdW5pdHNdO1xuICAgIGlmICghZmFjdG9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcih1bml0cyArIFwiIHVuaXRzIGlzIGludmFsaWRcIik7XG4gICAgfVxuICAgIHJldHVybiByYWRpYW5zICogZmFjdG9yO1xufVxuLyoqXG4gKiBDb252ZXJ0IGEgZGlzdGFuY2UgbWVhc3VyZW1lbnQgKGFzc3VtaW5nIGEgc3BoZXJpY2FsIEVhcnRoKSBmcm9tIGEgcmVhbC13b3JsZCB1bml0IGludG8gcmFkaWFuc1xuICogVmFsaWQgdW5pdHM6IG1pbGVzLCBuYXV0aWNhbG1pbGVzLCBpbmNoZXMsIHlhcmRzLCBtZXRlcnMsIG1ldHJlcywga2lsb21ldGVycywgY2VudGltZXRlcnMsIGZlZXRcbiAqXG4gKiBAbmFtZSBsZW5ndGhUb1JhZGlhbnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBkaXN0YW5jZSBpbiByZWFsIHVuaXRzXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VuaXRzPVwia2lsb21ldGVyc1wiXSBjYW4gYmUgZGVncmVlcywgcmFkaWFucywgbWlsZXMsIGluY2hlcywgeWFyZHMsIG1ldHJlcyxcbiAqIG1ldGVycywga2lsb21ldHJlcywga2lsb21ldGVycy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IHJhZGlhbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxlbmd0aFRvUmFkaWFucyhkaXN0YW5jZSwgdW5pdHMpIHtcbiAgICBpZiAodW5pdHMgPT09IHZvaWQgMCkgeyB1bml0cyA9IFwia2lsb21ldGVyc1wiOyB9XG4gICAgdmFyIGZhY3RvciA9IGZhY3RvcnNbdW5pdHNdO1xuICAgIGlmICghZmFjdG9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcih1bml0cyArIFwiIHVuaXRzIGlzIGludmFsaWRcIik7XG4gICAgfVxuICAgIHJldHVybiBkaXN0YW5jZSAvIGZhY3Rvcjtcbn1cbi8qKlxuICogQ29udmVydCBhIGRpc3RhbmNlIG1lYXN1cmVtZW50IChhc3N1bWluZyBhIHNwaGVyaWNhbCBFYXJ0aCkgZnJvbSBhIHJlYWwtd29ybGQgdW5pdCBpbnRvIGRlZ3JlZXNcbiAqIFZhbGlkIHVuaXRzOiBtaWxlcywgbmF1dGljYWxtaWxlcywgaW5jaGVzLCB5YXJkcywgbWV0ZXJzLCBtZXRyZXMsIGNlbnRpbWV0ZXJzLCBraWxvbWV0cmVzLCBmZWV0XG4gKlxuICogQG5hbWUgbGVuZ3RoVG9EZWdyZWVzXG4gKiBAcGFyYW0ge251bWJlcn0gZGlzdGFuY2UgaW4gcmVhbCB1bml0c1xuICogQHBhcmFtIHtzdHJpbmd9IFt1bml0cz1cImtpbG9tZXRlcnNcIl0gY2FuIGJlIGRlZ3JlZXMsIHJhZGlhbnMsIG1pbGVzLCBpbmNoZXMsIHlhcmRzLCBtZXRyZXMsXG4gKiBtZXRlcnMsIGtpbG9tZXRyZXMsIGtpbG9tZXRlcnMuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBkZWdyZWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGhUb0RlZ3JlZXMoZGlzdGFuY2UsIHVuaXRzKSB7XG4gICAgcmV0dXJuIHJhZGlhbnNUb0RlZ3JlZXMobGVuZ3RoVG9SYWRpYW5zKGRpc3RhbmNlLCB1bml0cykpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhbnkgYmVhcmluZyBhbmdsZSBmcm9tIHRoZSBub3J0aCBsaW5lIGRpcmVjdGlvbiAocG9zaXRpdmUgY2xvY2t3aXNlKVxuICogYW5kIHJldHVybnMgYW4gYW5nbGUgYmV0d2VlbiAwLTM2MCBkZWdyZWVzIChwb3NpdGl2ZSBjbG9ja3dpc2UpLCAwIGJlaW5nIHRoZSBub3J0aCBsaW5lXG4gKlxuICogQG5hbWUgYmVhcmluZ1RvQXppbXV0aFxuICogQHBhcmFtIHtudW1iZXJ9IGJlYXJpbmcgYW5nbGUsIGJldHdlZW4gLTE4MCBhbmQgKzE4MCBkZWdyZWVzXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBhbmdsZSBiZXR3ZWVuIDAgYW5kIDM2MCBkZWdyZWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiZWFyaW5nVG9BemltdXRoKGJlYXJpbmcpIHtcbiAgICB2YXIgYW5nbGUgPSBiZWFyaW5nICUgMzYwO1xuICAgIGlmIChhbmdsZSA8IDApIHtcbiAgICAgICAgYW5nbGUgKz0gMzYwO1xuICAgIH1cbiAgICByZXR1cm4gYW5nbGU7XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIGFuZ2xlIGluIHJhZGlhbnMgdG8gZGVncmVlc1xuICpcbiAqIEBuYW1lIHJhZGlhbnNUb0RlZ3JlZXNcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWRpYW5zIGFuZ2xlIGluIHJhZGlhbnNcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGRlZ3JlZXMgYmV0d2VlbiAwIGFuZCAzNjAgZGVncmVlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmFkaWFuc1RvRGVncmVlcyhyYWRpYW5zKSB7XG4gICAgdmFyIGRlZ3JlZXMgPSByYWRpYW5zICUgKDIgKiBNYXRoLlBJKTtcbiAgICByZXR1cm4gKGRlZ3JlZXMgKiAxODApIC8gTWF0aC5QSTtcbn1cbi8qKlxuICogQ29udmVydHMgYW4gYW5nbGUgaW4gZGVncmVlcyB0byByYWRpYW5zXG4gKlxuICogQG5hbWUgZGVncmVlc1RvUmFkaWFuc1xuICogQHBhcmFtIHtudW1iZXJ9IGRlZ3JlZXMgYW5nbGUgYmV0d2VlbiAwIGFuZCAzNjAgZGVncmVlc1xuICogQHJldHVybnMge251bWJlcn0gYW5nbGUgaW4gcmFkaWFuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGVncmVlc1RvUmFkaWFucyhkZWdyZWVzKSB7XG4gICAgdmFyIHJhZGlhbnMgPSBkZWdyZWVzICUgMzYwO1xuICAgIHJldHVybiAocmFkaWFucyAqIE1hdGguUEkpIC8gMTgwO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGxlbmd0aCB0byB0aGUgcmVxdWVzdGVkIHVuaXQuXG4gKiBWYWxpZCB1bml0czogbWlsZXMsIG5hdXRpY2FsbWlsZXMsIGluY2hlcywgeWFyZHMsIG1ldGVycywgbWV0cmVzLCBraWxvbWV0ZXJzLCBjZW50aW1ldGVycywgZmVldFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggdG8gYmUgY29udmVydGVkXG4gKiBAcGFyYW0ge1VuaXRzfSBbb3JpZ2luYWxVbml0PVwia2lsb21ldGVyc1wiXSBvZiB0aGUgbGVuZ3RoXG4gKiBAcGFyYW0ge1VuaXRzfSBbZmluYWxVbml0PVwia2lsb21ldGVyc1wiXSByZXR1cm5lZCB1bml0XG4gKiBAcmV0dXJucyB7bnVtYmVyfSB0aGUgY29udmVydGVkIGxlbmd0aFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydExlbmd0aChsZW5ndGgsIG9yaWdpbmFsVW5pdCwgZmluYWxVbml0KSB7XG4gICAgaWYgKG9yaWdpbmFsVW5pdCA9PT0gdm9pZCAwKSB7IG9yaWdpbmFsVW5pdCA9IFwia2lsb21ldGVyc1wiOyB9XG4gICAgaWYgKGZpbmFsVW5pdCA9PT0gdm9pZCAwKSB7IGZpbmFsVW5pdCA9IFwia2lsb21ldGVyc1wiOyB9XG4gICAgaWYgKCEobGVuZ3RoID49IDApKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImxlbmd0aCBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcmFkaWFuc1RvTGVuZ3RoKGxlbmd0aFRvUmFkaWFucyhsZW5ndGgsIG9yaWdpbmFsVW5pdCksIGZpbmFsVW5pdCk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgYXJlYSB0byB0aGUgcmVxdWVzdGVkIHVuaXQuXG4gKiBWYWxpZCB1bml0czoga2lsb21ldGVycywga2lsb21ldHJlcywgbWV0ZXJzLCBtZXRyZXMsIGNlbnRpbWV0cmVzLCBtaWxsaW1ldGVycywgYWNyZXMsIG1pbGVzLCB5YXJkcywgZmVldCwgaW5jaGVzLCBoZWN0YXJlc1xuICogQHBhcmFtIHtudW1iZXJ9IGFyZWEgdG8gYmUgY29udmVydGVkXG4gKiBAcGFyYW0ge1VuaXRzfSBbb3JpZ2luYWxVbml0PVwibWV0ZXJzXCJdIG9mIHRoZSBkaXN0YW5jZVxuICogQHBhcmFtIHtVbml0c30gW2ZpbmFsVW5pdD1cImtpbG9tZXRlcnNcIl0gcmV0dXJuZWQgdW5pdFxuICogQHJldHVybnMge251bWJlcn0gdGhlIGNvbnZlcnRlZCBhcmVhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0QXJlYShhcmVhLCBvcmlnaW5hbFVuaXQsIGZpbmFsVW5pdCkge1xuICAgIGlmIChvcmlnaW5hbFVuaXQgPT09IHZvaWQgMCkgeyBvcmlnaW5hbFVuaXQgPSBcIm1ldGVyc1wiOyB9XG4gICAgaWYgKGZpbmFsVW5pdCA9PT0gdm9pZCAwKSB7IGZpbmFsVW5pdCA9IFwia2lsb21ldGVyc1wiOyB9XG4gICAgaWYgKCEoYXJlYSA+PSAwKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhcmVhIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXJcIik7XG4gICAgfVxuICAgIHZhciBzdGFydEZhY3RvciA9IGFyZWFGYWN0b3JzW29yaWdpbmFsVW5pdF07XG4gICAgaWYgKCFzdGFydEZhY3Rvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIG9yaWdpbmFsIHVuaXRzXCIpO1xuICAgIH1cbiAgICB2YXIgZmluYWxGYWN0b3IgPSBhcmVhRmFjdG9yc1tmaW5hbFVuaXRdO1xuICAgIGlmICghZmluYWxGYWN0b3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmaW5hbCB1bml0c1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIChhcmVhIC8gc3RhcnRGYWN0b3IpICogZmluYWxGYWN0b3I7XG59XG4vKipcbiAqIGlzTnVtYmVyXG4gKlxuICogQHBhcmFtIHsqfSBudW0gTnVtYmVyIHRvIHZhbGlkYXRlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZS9mYWxzZVxuICogQGV4YW1wbGVcbiAqIHR1cmYuaXNOdW1iZXIoMTIzKVxuICogLy89dHJ1ZVxuICogdHVyZi5pc051bWJlcignZm9vJylcbiAqIC8vPWZhbHNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlcihudW0pIHtcbiAgICByZXR1cm4gIWlzTmFOKG51bSkgJiYgbnVtICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KG51bSk7XG59XG4vKipcbiAqIGlzT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSBpbnB1dCB2YXJpYWJsZSB0byB2YWxpZGF0ZVxuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUvZmFsc2VcbiAqIEBleGFtcGxlXG4gKiB0dXJmLmlzT2JqZWN0KHtlbGV2YXRpb246IDEwfSlcbiAqIC8vPXRydWVcbiAqIHR1cmYuaXNPYmplY3QoJ2ZvbycpXG4gKiAvLz1mYWxzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QoaW5wdXQpIHtcbiAgICByZXR1cm4gISFpbnB1dCAmJiBpbnB1dC5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufVxuLyoqXG4gKiBWYWxpZGF0ZSBCQm94XG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gYmJveCBCQm94IHRvIHZhbGlkYXRlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqIEB0aHJvd3MgRXJyb3IgaWYgQkJveCBpcyBub3QgdmFsaWRcbiAqIEBleGFtcGxlXG4gKiB2YWxpZGF0ZUJCb3goWy0xODAsIC00MCwgMTEwLCA1MF0pXG4gKiAvLz1PS1xuICogdmFsaWRhdGVCQm94KFstMTgwLCAtNDBdKVxuICogLy89RXJyb3JcbiAqIHZhbGlkYXRlQkJveCgnRm9vJylcbiAqIC8vPUVycm9yXG4gKiB2YWxpZGF0ZUJCb3goNSlcbiAqIC8vPUVycm9yXG4gKiB2YWxpZGF0ZUJCb3gobnVsbClcbiAqIC8vPUVycm9yXG4gKiB2YWxpZGF0ZUJCb3godW5kZWZpbmVkKVxuICogLy89RXJyb3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQkJveChiYm94KSB7XG4gICAgaWYgKCFiYm94KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImJib3ggaXMgcmVxdWlyZWRcIik7XG4gICAgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShiYm94KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJiYm94IG11c3QgYmUgYW4gQXJyYXlcIik7XG4gICAgfVxuICAgIGlmIChiYm94Lmxlbmd0aCAhPT0gNCAmJiBiYm94Lmxlbmd0aCAhPT0gNikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJiYm94IG11c3QgYmUgYW4gQXJyYXkgb2YgNCBvciA2IG51bWJlcnNcIik7XG4gICAgfVxuICAgIGJib3guZm9yRWFjaChmdW5jdGlvbiAobnVtKSB7XG4gICAgICAgIGlmICghaXNOdW1iZXIobnVtKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYmJveCBtdXN0IG9ubHkgY29udGFpbiBudW1iZXJzXCIpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vKipcbiAqIFZhbGlkYXRlIElkXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gaWQgSWQgdG8gdmFsaWRhdGVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICogQHRocm93cyBFcnJvciBpZiBJZCBpcyBub3QgdmFsaWRcbiAqIEBleGFtcGxlXG4gKiB2YWxpZGF0ZUlkKFstMTgwLCAtNDAsIDExMCwgNTBdKVxuICogLy89RXJyb3JcbiAqIHZhbGlkYXRlSWQoWy0xODAsIC00MF0pXG4gKiAvLz1FcnJvclxuICogdmFsaWRhdGVJZCgnRm9vJylcbiAqIC8vPU9LXG4gKiB2YWxpZGF0ZUlkKDUpXG4gKiAvLz1PS1xuICogdmFsaWRhdGVJZChudWxsKVxuICogLy89RXJyb3JcbiAqIHZhbGlkYXRlSWQodW5kZWZpbmVkKVxuICogLy89RXJyb3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlSWQoaWQpIHtcbiAgICBpZiAoIWlkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImlkIGlzIHJlcXVpcmVkXCIpO1xuICAgIH1cbiAgICBpZiAoW1wic3RyaW5nXCIsIFwibnVtYmVyXCJdLmluZGV4T2YodHlwZW9mIGlkKSA9PT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWQgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZ1wiKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBmZWF0dXJlLCBsaW5lU3RyaW5nLCBpc09iamVjdCwgcG9pbnQgfSBmcm9tICdAdHVyZi9oZWxwZXJzJztcblxuLyoqXG4gKiBDYWxsYmFjayBmb3IgY29vcmRFYWNoXG4gKlxuICogQGNhbGxiYWNrIGNvb3JkRWFjaENhbGxiYWNrXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGN1cnJlbnRDb29yZCBUaGUgY3VycmVudCBjb29yZGluYXRlIGJlaW5nIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjb29yZEluZGV4IFRoZSBjdXJyZW50IGluZGV4IG9mIHRoZSBjb29yZGluYXRlIGJlaW5nIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmZWF0dXJlSW5kZXggVGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIEZlYXR1cmUgYmVpbmcgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtudW1iZXJ9IG11bHRpRmVhdHVyZUluZGV4IFRoZSBjdXJyZW50IGluZGV4IG9mIHRoZSBNdWx0aS1GZWF0dXJlIGJlaW5nIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBnZW9tZXRyeUluZGV4IFRoZSBjdXJyZW50IGluZGV4IG9mIHRoZSBHZW9tZXRyeSBiZWluZyBwcm9jZXNzZWQuXG4gKi9cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgY29vcmRpbmF0ZXMgaW4gYW55IEdlb0pTT04gb2JqZWN0LCBzaW1pbGFyIHRvIEFycmF5LmZvckVhY2goKVxuICpcbiAqIEBuYW1lIGNvb3JkRWFjaFxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbnxGZWF0dXJlfEdlb21ldHJ5fSBnZW9qc29uIGFueSBHZW9KU09OIG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgYSBtZXRob2QgdGhhdCB0YWtlcyAoY3VycmVudENvb3JkLCBjb29yZEluZGV4LCBmZWF0dXJlSW5kZXgsIG11bHRpRmVhdHVyZUluZGV4KVxuICogQHBhcmFtIHtib29sZWFufSBbZXhjbHVkZVdyYXBDb29yZD1mYWxzZV0gd2hldGhlciBvciBub3QgdG8gaW5jbHVkZSB0aGUgZmluYWwgY29vcmRpbmF0ZSBvZiBMaW5lYXJSaW5ncyB0aGF0IHdyYXBzIHRoZSByaW5nIGluIGl0cyBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqIEBleGFtcGxlXG4gKiB2YXIgZmVhdHVyZXMgPSB0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtcbiAqICAgdHVyZi5wb2ludChbMjYsIDM3XSwge1wiZm9vXCI6IFwiYmFyXCJ9KSxcbiAqICAgdHVyZi5wb2ludChbMzYsIDUzXSwge1wiaGVsbG9cIjogXCJ3b3JsZFwifSlcbiAqIF0pO1xuICpcbiAqIHR1cmYuY29vcmRFYWNoKGZlYXR1cmVzLCBmdW5jdGlvbiAoY3VycmVudENvb3JkLCBjb29yZEluZGV4LCBmZWF0dXJlSW5kZXgsIG11bHRpRmVhdHVyZUluZGV4LCBnZW9tZXRyeUluZGV4KSB7XG4gKiAgIC8vPWN1cnJlbnRDb29yZFxuICogICAvLz1jb29yZEluZGV4XG4gKiAgIC8vPWZlYXR1cmVJbmRleFxuICogICAvLz1tdWx0aUZlYXR1cmVJbmRleFxuICogICAvLz1nZW9tZXRyeUluZGV4XG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gY29vcmRFYWNoKGdlb2pzb24sIGNhbGxiYWNrLCBleGNsdWRlV3JhcENvb3JkKSB7XG4gIC8vIEhhbmRsZXMgbnVsbCBHZW9tZXRyeSAtLSBTa2lwcyB0aGlzIEdlb0pTT05cbiAgaWYgKGdlb2pzb24gPT09IG51bGwpIHJldHVybjtcbiAgdmFyIGosXG4gICAgayxcbiAgICBsLFxuICAgIGdlb21ldHJ5LFxuICAgIHN0b3BHLFxuICAgIGNvb3JkcyxcbiAgICBnZW9tZXRyeU1heWJlQ29sbGVjdGlvbixcbiAgICB3cmFwU2hyaW5rID0gMCxcbiAgICBjb29yZEluZGV4ID0gMCxcbiAgICBpc0dlb21ldHJ5Q29sbGVjdGlvbixcbiAgICB0eXBlID0gZ2VvanNvbi50eXBlLFxuICAgIGlzRmVhdHVyZUNvbGxlY3Rpb24gPSB0eXBlID09PSBcIkZlYXR1cmVDb2xsZWN0aW9uXCIsXG4gICAgaXNGZWF0dXJlID0gdHlwZSA9PT0gXCJGZWF0dXJlXCIsXG4gICAgc3RvcCA9IGlzRmVhdHVyZUNvbGxlY3Rpb24gPyBnZW9qc29uLmZlYXR1cmVzLmxlbmd0aCA6IDE7XG5cbiAgLy8gVGhpcyBsb2dpYyBtYXkgbG9vayBhIGxpdHRsZSB3ZWlyZC4gVGhlIHJlYXNvbiB3aHkgaXQgaXMgdGhhdCB3YXlcbiAgLy8gaXMgYmVjYXVzZSBpdCdzIHRyeWluZyB0byBiZSBmYXN0LiBHZW9KU09OIHN1cHBvcnRzIG11bHRpcGxlIGtpbmRzXG4gIC8vIG9mIG9iamVjdHMgYXQgaXRzIHJvb3Q6IEZlYXR1cmVDb2xsZWN0aW9uLCBGZWF0dXJlcywgR2VvbWV0cmllcy5cbiAgLy8gVGhpcyBmdW5jdGlvbiBoYXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIGhhbmRsaW5nIGFsbCBvZiB0aGVtLCBhbmQgdGhhdFxuICAvLyBtZWFucyB0aGF0IHNvbWUgb2YgdGhlIGBmb3JgIGxvb3BzIHlvdSBzZWUgYmVsb3cgYWN0dWFsbHkganVzdCBkb24ndCBhcHBseVxuICAvLyB0byBjZXJ0YWluIGlucHV0cy4gRm9yIGluc3RhbmNlLCBpZiB5b3UgZ2l2ZSB0aGlzIGp1c3QgYVxuICAvLyBQb2ludCBnZW9tZXRyeSwgdGhlbiBib3RoIGxvb3BzIGFyZSBzaG9ydC1jaXJjdWl0ZWQgYW5kIGFsbCB3ZSBkb1xuICAvLyBpcyBncmFkdWFsbHkgcmVuYW1lIHRoZSBpbnB1dCB1bnRpbCBpdCdzIGNhbGxlZCAnZ2VvbWV0cnknLlxuICAvL1xuICAvLyBUaGlzIGFsc28gYWltcyB0byBhbGxvY2F0ZSBhcyBmZXcgcmVzb3VyY2VzIGFzIHBvc3NpYmxlOiBqdXN0IGFcbiAgLy8gZmV3IG51bWJlcnMgYW5kIGJvb2xlYW5zLCByYXRoZXIgdGhhbiBhbnkgdGVtcG9yYXJ5IGFycmF5cyBhcyB3b3VsZFxuICAvLyBiZSByZXF1aXJlZCB3aXRoIHRoZSBub3JtYWxpemF0aW9uIGFwcHJvYWNoLlxuICBmb3IgKHZhciBmZWF0dXJlSW5kZXggPSAwOyBmZWF0dXJlSW5kZXggPCBzdG9wOyBmZWF0dXJlSW5kZXgrKykge1xuICAgIGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uID0gaXNGZWF0dXJlQ29sbGVjdGlvblxuICAgICAgPyBnZW9qc29uLmZlYXR1cmVzW2ZlYXR1cmVJbmRleF0uZ2VvbWV0cnlcbiAgICAgIDogaXNGZWF0dXJlXG4gICAgICA/IGdlb2pzb24uZ2VvbWV0cnlcbiAgICAgIDogZ2VvanNvbjtcbiAgICBpc0dlb21ldHJ5Q29sbGVjdGlvbiA9IGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uXG4gICAgICA/IGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uLnR5cGUgPT09IFwiR2VvbWV0cnlDb2xsZWN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gICAgc3RvcEcgPSBpc0dlb21ldHJ5Q29sbGVjdGlvblxuICAgICAgPyBnZW9tZXRyeU1heWJlQ29sbGVjdGlvbi5nZW9tZXRyaWVzLmxlbmd0aFxuICAgICAgOiAxO1xuXG4gICAgZm9yICh2YXIgZ2VvbUluZGV4ID0gMDsgZ2VvbUluZGV4IDwgc3RvcEc7IGdlb21JbmRleCsrKSB7XG4gICAgICB2YXIgbXVsdGlGZWF0dXJlSW5kZXggPSAwO1xuICAgICAgdmFyIGdlb21ldHJ5SW5kZXggPSAwO1xuICAgICAgZ2VvbWV0cnkgPSBpc0dlb21ldHJ5Q29sbGVjdGlvblxuICAgICAgICA/IGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uLmdlb21ldHJpZXNbZ2VvbUluZGV4XVxuICAgICAgICA6IGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uO1xuXG4gICAgICAvLyBIYW5kbGVzIG51bGwgR2VvbWV0cnkgLS0gU2tpcHMgdGhpcyBnZW9tZXRyeVxuICAgICAgaWYgKGdlb21ldHJ5ID09PSBudWxsKSBjb250aW51ZTtcbiAgICAgIGNvb3JkcyA9IGdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgICAgdmFyIGdlb21UeXBlID0gZ2VvbWV0cnkudHlwZTtcblxuICAgICAgd3JhcFNocmluayA9XG4gICAgICAgIGV4Y2x1ZGVXcmFwQ29vcmQgJiZcbiAgICAgICAgKGdlb21UeXBlID09PSBcIlBvbHlnb25cIiB8fCBnZW9tVHlwZSA9PT0gXCJNdWx0aVBvbHlnb25cIilcbiAgICAgICAgICA/IDFcbiAgICAgICAgICA6IDA7XG5cbiAgICAgIHN3aXRjaCAoZ2VvbVR5cGUpIHtcbiAgICAgICAgY2FzZSBudWxsOlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiUG9pbnRcIjpcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBjYWxsYmFjayhcbiAgICAgICAgICAgICAgY29vcmRzLFxuICAgICAgICAgICAgICBjb29yZEluZGV4LFxuICAgICAgICAgICAgICBmZWF0dXJlSW5kZXgsXG4gICAgICAgICAgICAgIG11bHRpRmVhdHVyZUluZGV4LFxuICAgICAgICAgICAgICBnZW9tZXRyeUluZGV4XG4gICAgICAgICAgICApID09PSBmYWxzZVxuICAgICAgICAgIClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBjb29yZEluZGV4Kys7XG4gICAgICAgICAgbXVsdGlGZWF0dXJlSW5kZXgrKztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIkxpbmVTdHJpbmdcIjpcbiAgICAgICAgY2FzZSBcIk11bHRpUG9pbnRcIjpcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgY29vcmRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIGNhbGxiYWNrKFxuICAgICAgICAgICAgICAgIGNvb3Jkc1tqXSxcbiAgICAgICAgICAgICAgICBjb29yZEluZGV4LFxuICAgICAgICAgICAgICAgIGZlYXR1cmVJbmRleCxcbiAgICAgICAgICAgICAgICBtdWx0aUZlYXR1cmVJbmRleCxcbiAgICAgICAgICAgICAgICBnZW9tZXRyeUluZGV4XG4gICAgICAgICAgICAgICkgPT09IGZhbHNlXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGNvb3JkSW5kZXgrKztcbiAgICAgICAgICAgIGlmIChnZW9tVHlwZSA9PT0gXCJNdWx0aVBvaW50XCIpIG11bHRpRmVhdHVyZUluZGV4Kys7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChnZW9tVHlwZSA9PT0gXCJMaW5lU3RyaW5nXCIpIG11bHRpRmVhdHVyZUluZGV4Kys7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJQb2x5Z29uXCI6XG4gICAgICAgIGNhc2UgXCJNdWx0aUxpbmVTdHJpbmdcIjpcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgY29vcmRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgY29vcmRzW2pdLmxlbmd0aCAtIHdyYXBTaHJpbms7IGsrKykge1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soXG4gICAgICAgICAgICAgICAgICBjb29yZHNbal1ba10sXG4gICAgICAgICAgICAgICAgICBjb29yZEluZGV4LFxuICAgICAgICAgICAgICAgICAgZmVhdHVyZUluZGV4LFxuICAgICAgICAgICAgICAgICAgbXVsdGlGZWF0dXJlSW5kZXgsXG4gICAgICAgICAgICAgICAgICBnZW9tZXRyeUluZGV4XG4gICAgICAgICAgICAgICAgKSA9PT0gZmFsc2VcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgY29vcmRJbmRleCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdlb21UeXBlID09PSBcIk11bHRpTGluZVN0cmluZ1wiKSBtdWx0aUZlYXR1cmVJbmRleCsrO1xuICAgICAgICAgICAgaWYgKGdlb21UeXBlID09PSBcIlBvbHlnb25cIikgZ2VvbWV0cnlJbmRleCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZ2VvbVR5cGUgPT09IFwiUG9seWdvblwiKSBtdWx0aUZlYXR1cmVJbmRleCsrO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiTXVsdGlQb2x5Z29uXCI6XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGNvb3Jkcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgZ2VvbWV0cnlJbmRleCA9IDA7XG4gICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgY29vcmRzW2pdLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgIGZvciAobCA9IDA7IGwgPCBjb29yZHNbal1ba10ubGVuZ3RoIC0gd3JhcFNocmluazsgbCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgY2FsbGJhY2soXG4gICAgICAgICAgICAgICAgICAgIGNvb3Jkc1tqXVtrXVtsXSxcbiAgICAgICAgICAgICAgICAgICAgY29vcmRJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZUluZGV4LFxuICAgICAgICAgICAgICAgICAgICBtdWx0aUZlYXR1cmVJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnlJbmRleFxuICAgICAgICAgICAgICAgICAgKSA9PT0gZmFsc2VcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29vcmRJbmRleCsrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGdlb21ldHJ5SW5kZXgrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG11bHRpRmVhdHVyZUluZGV4Kys7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiR2VvbWV0cnlDb2xsZWN0aW9uXCI6XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGdlb21ldHJ5Lmdlb21ldHJpZXMubGVuZ3RoOyBqKyspXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIGNvb3JkRWFjaChnZW9tZXRyeS5nZW9tZXRyaWVzW2pdLCBjYWxsYmFjaywgZXhjbHVkZVdyYXBDb29yZCkgPT09XG4gICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIEdlb21ldHJ5IFR5cGVcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2FsbGJhY2sgZm9yIGNvb3JkUmVkdWNlXG4gKlxuICogVGhlIGZpcnN0IHRpbWUgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIGNhbGxlZCwgdGhlIHZhbHVlcyBwcm92aWRlZCBhcyBhcmd1bWVudHMgZGVwZW5kXG4gKiBvbiB3aGV0aGVyIHRoZSByZWR1Y2UgbWV0aG9kIGhhcyBhbiBpbml0aWFsVmFsdWUgYXJndW1lbnQuXG4gKlxuICogSWYgYW4gaW5pdGlhbFZhbHVlIGlzIHByb3ZpZGVkIHRvIHRoZSByZWR1Y2UgbWV0aG9kOlxuICogIC0gVGhlIHByZXZpb3VzVmFsdWUgYXJndW1lbnQgaXMgaW5pdGlhbFZhbHVlLlxuICogIC0gVGhlIGN1cnJlbnRWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKlxuICogSWYgYW4gaW5pdGlhbFZhbHVlIGlzIG5vdCBwcm92aWRlZDpcbiAqICAtIFRoZSBwcmV2aW91c1ZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgZWxlbWVudCBwcmVzZW50IGluIHRoZSBhcnJheS5cbiAqICAtIFRoZSBjdXJyZW50VmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBzZWNvbmQgZWxlbWVudCBwcmVzZW50IGluIHRoZSBhcnJheS5cbiAqXG4gKiBAY2FsbGJhY2sgY29vcmRSZWR1Y2VDYWxsYmFja1xuICogQHBhcmFtIHsqfSBwcmV2aW91c1ZhbHVlIFRoZSBhY2N1bXVsYXRlZCB2YWx1ZSBwcmV2aW91c2x5IHJldHVybmVkIGluIHRoZSBsYXN0IGludm9jYXRpb25cbiAqIG9mIHRoZSBjYWxsYmFjaywgb3IgaW5pdGlhbFZhbHVlLCBpZiBzdXBwbGllZC5cbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gY3VycmVudENvb3JkIFRoZSBjdXJyZW50IGNvb3JkaW5hdGUgYmVpbmcgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtudW1iZXJ9IGNvb3JkSW5kZXggVGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIGNvb3JkaW5hdGUgYmVpbmcgcHJvY2Vzc2VkLlxuICogU3RhcnRzIGF0IGluZGV4IDAsIGlmIGFuIGluaXRpYWxWYWx1ZSBpcyBwcm92aWRlZCwgYW5kIGF0IGluZGV4IDEgb3RoZXJ3aXNlLlxuICogQHBhcmFtIHtudW1iZXJ9IGZlYXR1cmVJbmRleCBUaGUgY3VycmVudCBpbmRleCBvZiB0aGUgRmVhdHVyZSBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gbXVsdGlGZWF0dXJlSW5kZXggVGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIE11bHRpLUZlYXR1cmUgYmVpbmcgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtudW1iZXJ9IGdlb21ldHJ5SW5kZXggVGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIEdlb21ldHJ5IGJlaW5nIHByb2Nlc3NlZC5cbiAqL1xuXG4vKipcbiAqIFJlZHVjZSBjb29yZGluYXRlcyBpbiBhbnkgR2VvSlNPTiBvYmplY3QsIHNpbWlsYXIgdG8gQXJyYXkucmVkdWNlKClcbiAqXG4gKiBAbmFtZSBjb29yZFJlZHVjZVxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbnxHZW9tZXRyeXxGZWF0dXJlfSBnZW9qc29uIGFueSBHZW9KU09OIG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgYSBtZXRob2QgdGhhdCB0YWtlcyAocHJldmlvdXNWYWx1ZSwgY3VycmVudENvb3JkLCBjb29yZEluZGV4KVxuICogQHBhcmFtIHsqfSBbaW5pdGlhbFZhbHVlXSBWYWx1ZSB0byB1c2UgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBmaXJzdCBjYWxsIG9mIHRoZSBjYWxsYmFjay5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2V4Y2x1ZGVXcmFwQ29vcmQ9ZmFsc2VdIHdoZXRoZXIgb3Igbm90IHRvIGluY2x1ZGUgdGhlIGZpbmFsIGNvb3JkaW5hdGUgb2YgTGluZWFyUmluZ3MgdGhhdCB3cmFwcyB0aGUgcmluZyBpbiBpdHMgaXRlcmF0aW9uLlxuICogQHJldHVybnMgeyp9IFRoZSB2YWx1ZSB0aGF0IHJlc3VsdHMgZnJvbSB0aGUgcmVkdWN0aW9uLlxuICogQGV4YW1wbGVcbiAqIHZhciBmZWF0dXJlcyA9IHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW1xuICogICB0dXJmLnBvaW50KFsyNiwgMzddLCB7XCJmb29cIjogXCJiYXJcIn0pLFxuICogICB0dXJmLnBvaW50KFszNiwgNTNdLCB7XCJoZWxsb1wiOiBcIndvcmxkXCJ9KVxuICogXSk7XG4gKlxuICogdHVyZi5jb29yZFJlZHVjZShmZWF0dXJlcywgZnVuY3Rpb24gKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRDb29yZCwgY29vcmRJbmRleCwgZmVhdHVyZUluZGV4LCBtdWx0aUZlYXR1cmVJbmRleCwgZ2VvbWV0cnlJbmRleCkge1xuICogICAvLz1wcmV2aW91c1ZhbHVlXG4gKiAgIC8vPWN1cnJlbnRDb29yZFxuICogICAvLz1jb29yZEluZGV4XG4gKiAgIC8vPWZlYXR1cmVJbmRleFxuICogICAvLz1tdWx0aUZlYXR1cmVJbmRleFxuICogICAvLz1nZW9tZXRyeUluZGV4XG4gKiAgIHJldHVybiBjdXJyZW50Q29vcmQ7XG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gY29vcmRSZWR1Y2UoZ2VvanNvbiwgY2FsbGJhY2ssIGluaXRpYWxWYWx1ZSwgZXhjbHVkZVdyYXBDb29yZCkge1xuICB2YXIgcHJldmlvdXNWYWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgY29vcmRFYWNoKFxuICAgIGdlb2pzb24sXG4gICAgZnVuY3Rpb24gKFxuICAgICAgY3VycmVudENvb3JkLFxuICAgICAgY29vcmRJbmRleCxcbiAgICAgIGZlYXR1cmVJbmRleCxcbiAgICAgIG11bHRpRmVhdHVyZUluZGV4LFxuICAgICAgZ2VvbWV0cnlJbmRleFxuICAgICkge1xuICAgICAgaWYgKGNvb3JkSW5kZXggPT09IDAgJiYgaW5pdGlhbFZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgIHByZXZpb3VzVmFsdWUgPSBjdXJyZW50Q29vcmQ7XG4gICAgICBlbHNlXG4gICAgICAgIHByZXZpb3VzVmFsdWUgPSBjYWxsYmFjayhcbiAgICAgICAgICBwcmV2aW91c1ZhbHVlLFxuICAgICAgICAgIGN1cnJlbnRDb29yZCxcbiAgICAgICAgICBjb29yZEluZGV4LFxuICAgICAgICAgIGZlYXR1cmVJbmRleCxcbiAgICAgICAgICBtdWx0aUZlYXR1cmVJbmRleCxcbiAgICAgICAgICBnZW9tZXRyeUluZGV4XG4gICAgICAgICk7XG4gICAgfSxcbiAgICBleGNsdWRlV3JhcENvb3JkXG4gICk7XG4gIHJldHVybiBwcmV2aW91c1ZhbHVlO1xufVxuXG4vKipcbiAqIENhbGxiYWNrIGZvciBwcm9wRWFjaFxuICpcbiAqIEBjYWxsYmFjayBwcm9wRWFjaENhbGxiYWNrXG4gKiBAcGFyYW0ge09iamVjdH0gY3VycmVudFByb3BlcnRpZXMgVGhlIGN1cnJlbnQgUHJvcGVydGllcyBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gZmVhdHVyZUluZGV4IFRoZSBjdXJyZW50IGluZGV4IG9mIHRoZSBGZWF0dXJlIGJlaW5nIHByb2Nlc3NlZC5cbiAqL1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBwcm9wZXJ0aWVzIGluIGFueSBHZW9KU09OIG9iamVjdCwgc2ltaWxhciB0byBBcnJheS5mb3JFYWNoKClcbiAqXG4gKiBAbmFtZSBwcm9wRWFjaFxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbnxGZWF0dXJlfSBnZW9qc29uIGFueSBHZW9KU09OIG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgYSBtZXRob2QgdGhhdCB0YWtlcyAoY3VycmVudFByb3BlcnRpZXMsIGZlYXR1cmVJbmRleClcbiAqIEByZXR1cm5zIHt2b2lkfVxuICogQGV4YW1wbGVcbiAqIHZhciBmZWF0dXJlcyA9IHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW1xuICogICAgIHR1cmYucG9pbnQoWzI2LCAzN10sIHtmb286ICdiYXInfSksXG4gKiAgICAgdHVyZi5wb2ludChbMzYsIDUzXSwge2hlbGxvOiAnd29ybGQnfSlcbiAqIF0pO1xuICpcbiAqIHR1cmYucHJvcEVhY2goZmVhdHVyZXMsIGZ1bmN0aW9uIChjdXJyZW50UHJvcGVydGllcywgZmVhdHVyZUluZGV4KSB7XG4gKiAgIC8vPWN1cnJlbnRQcm9wZXJ0aWVzXG4gKiAgIC8vPWZlYXR1cmVJbmRleFxuICogfSk7XG4gKi9cbmZ1bmN0aW9uIHByb3BFYWNoKGdlb2pzb24sIGNhbGxiYWNrKSB7XG4gIHZhciBpO1xuICBzd2l0Y2ggKGdlb2pzb24udHlwZSkge1xuICAgIGNhc2UgXCJGZWF0dXJlQ29sbGVjdGlvblwiOlxuICAgICAgZm9yIChpID0gMDsgaSA8IGdlb2pzb24uZmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKGdlb2pzb24uZmVhdHVyZXNbaV0ucHJvcGVydGllcywgaSkgPT09IGZhbHNlKSBicmVhaztcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJGZWF0dXJlXCI6XG4gICAgICBjYWxsYmFjayhnZW9qc29uLnByb3BlcnRpZXMsIDApO1xuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuLyoqXG4gKiBDYWxsYmFjayBmb3IgcHJvcFJlZHVjZVxuICpcbiAqIFRoZSBmaXJzdCB0aW1lIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBpcyBjYWxsZWQsIHRoZSB2YWx1ZXMgcHJvdmlkZWQgYXMgYXJndW1lbnRzIGRlcGVuZFxuICogb24gd2hldGhlciB0aGUgcmVkdWNlIG1ldGhvZCBoYXMgYW4gaW5pdGlhbFZhbHVlIGFyZ3VtZW50LlxuICpcbiAqIElmIGFuIGluaXRpYWxWYWx1ZSBpcyBwcm92aWRlZCB0byB0aGUgcmVkdWNlIG1ldGhvZDpcbiAqICAtIFRoZSBwcmV2aW91c1ZhbHVlIGFyZ3VtZW50IGlzIGluaXRpYWxWYWx1ZS5cbiAqICAtIFRoZSBjdXJyZW50VmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBlbGVtZW50IHByZXNlbnQgaW4gdGhlIGFycmF5LlxuICpcbiAqIElmIGFuIGluaXRpYWxWYWx1ZSBpcyBub3QgcHJvdmlkZWQ6XG4gKiAgLSBUaGUgcHJldmlvdXNWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKiAgLSBUaGUgY3VycmVudFZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgc2Vjb25kIGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKlxuICogQGNhbGxiYWNrIHByb3BSZWR1Y2VDYWxsYmFja1xuICogQHBhcmFtIHsqfSBwcmV2aW91c1ZhbHVlIFRoZSBhY2N1bXVsYXRlZCB2YWx1ZSBwcmV2aW91c2x5IHJldHVybmVkIGluIHRoZSBsYXN0IGludm9jYXRpb25cbiAqIG9mIHRoZSBjYWxsYmFjaywgb3IgaW5pdGlhbFZhbHVlLCBpZiBzdXBwbGllZC5cbiAqIEBwYXJhbSB7Kn0gY3VycmVudFByb3BlcnRpZXMgVGhlIGN1cnJlbnQgUHJvcGVydGllcyBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gZmVhdHVyZUluZGV4IFRoZSBjdXJyZW50IGluZGV4IG9mIHRoZSBGZWF0dXJlIGJlaW5nIHByb2Nlc3NlZC5cbiAqL1xuXG4vKipcbiAqIFJlZHVjZSBwcm9wZXJ0aWVzIGluIGFueSBHZW9KU09OIG9iamVjdCBpbnRvIGEgc2luZ2xlIHZhbHVlLFxuICogc2ltaWxhciB0byBob3cgQXJyYXkucmVkdWNlIHdvcmtzLiBIb3dldmVyLCBpbiB0aGlzIGNhc2Ugd2UgbGF6aWx5IHJ1blxuICogdGhlIHJlZHVjdGlvbiwgc28gYW4gYXJyYXkgb2YgYWxsIHByb3BlcnRpZXMgaXMgdW5uZWNlc3NhcnkuXG4gKlxuICogQG5hbWUgcHJvcFJlZHVjZVxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbnxGZWF0dXJlfSBnZW9qc29uIGFueSBHZW9KU09OIG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgYSBtZXRob2QgdGhhdCB0YWtlcyAocHJldmlvdXNWYWx1ZSwgY3VycmVudFByb3BlcnRpZXMsIGZlYXR1cmVJbmRleClcbiAqIEBwYXJhbSB7Kn0gW2luaXRpYWxWYWx1ZV0gVmFsdWUgdG8gdXNlIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgZmlyc3QgY2FsbCBvZiB0aGUgY2FsbGJhY2suXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIHRoYXQgcmVzdWx0cyBmcm9tIHRoZSByZWR1Y3Rpb24uXG4gKiBAZXhhbXBsZVxuICogdmFyIGZlYXR1cmVzID0gdHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXG4gKiAgICAgdHVyZi5wb2ludChbMjYsIDM3XSwge2ZvbzogJ2Jhcid9KSxcbiAqICAgICB0dXJmLnBvaW50KFszNiwgNTNdLCB7aGVsbG86ICd3b3JsZCd9KVxuICogXSk7XG4gKlxuICogdHVyZi5wcm9wUmVkdWNlKGZlYXR1cmVzLCBmdW5jdGlvbiAocHJldmlvdXNWYWx1ZSwgY3VycmVudFByb3BlcnRpZXMsIGZlYXR1cmVJbmRleCkge1xuICogICAvLz1wcmV2aW91c1ZhbHVlXG4gKiAgIC8vPWN1cnJlbnRQcm9wZXJ0aWVzXG4gKiAgIC8vPWZlYXR1cmVJbmRleFxuICogICByZXR1cm4gY3VycmVudFByb3BlcnRpZXNcbiAqIH0pO1xuICovXG5mdW5jdGlvbiBwcm9wUmVkdWNlKGdlb2pzb24sIGNhbGxiYWNrLCBpbml0aWFsVmFsdWUpIHtcbiAgdmFyIHByZXZpb3VzVmFsdWUgPSBpbml0aWFsVmFsdWU7XG4gIHByb3BFYWNoKGdlb2pzb24sIGZ1bmN0aW9uIChjdXJyZW50UHJvcGVydGllcywgZmVhdHVyZUluZGV4KSB7XG4gICAgaWYgKGZlYXR1cmVJbmRleCA9PT0gMCAmJiBpbml0aWFsVmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgIHByZXZpb3VzVmFsdWUgPSBjdXJyZW50UHJvcGVydGllcztcbiAgICBlbHNlXG4gICAgICBwcmV2aW91c1ZhbHVlID0gY2FsbGJhY2socHJldmlvdXNWYWx1ZSwgY3VycmVudFByb3BlcnRpZXMsIGZlYXR1cmVJbmRleCk7XG4gIH0pO1xuICByZXR1cm4gcHJldmlvdXNWYWx1ZTtcbn1cblxuLyoqXG4gKiBDYWxsYmFjayBmb3IgZmVhdHVyZUVhY2hcbiAqXG4gKiBAY2FsbGJhY2sgZmVhdHVyZUVhY2hDYWxsYmFja1xuICogQHBhcmFtIHtGZWF0dXJlPGFueT59IGN1cnJlbnRGZWF0dXJlIFRoZSBjdXJyZW50IEZlYXR1cmUgYmVpbmcgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtudW1iZXJ9IGZlYXR1cmVJbmRleCBUaGUgY3VycmVudCBpbmRleCBvZiB0aGUgRmVhdHVyZSBiZWluZyBwcm9jZXNzZWQuXG4gKi9cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgZmVhdHVyZXMgaW4gYW55IEdlb0pTT04gb2JqZWN0LCBzaW1pbGFyIHRvXG4gKiBBcnJheS5mb3JFYWNoLlxuICpcbiAqIEBuYW1lIGZlYXR1cmVFYWNoXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmV8R2VvbWV0cnl9IGdlb2pzb24gYW55IEdlb0pTT04gb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBhIG1ldGhvZCB0aGF0IHRha2VzIChjdXJyZW50RmVhdHVyZSwgZmVhdHVyZUluZGV4KVxuICogQHJldHVybnMge3ZvaWR9XG4gKiBAZXhhbXBsZVxuICogdmFyIGZlYXR1cmVzID0gdHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXG4gKiAgIHR1cmYucG9pbnQoWzI2LCAzN10sIHtmb286ICdiYXInfSksXG4gKiAgIHR1cmYucG9pbnQoWzM2LCA1M10sIHtoZWxsbzogJ3dvcmxkJ30pXG4gKiBdKTtcbiAqXG4gKiB0dXJmLmZlYXR1cmVFYWNoKGZlYXR1cmVzLCBmdW5jdGlvbiAoY3VycmVudEZlYXR1cmUsIGZlYXR1cmVJbmRleCkge1xuICogICAvLz1jdXJyZW50RmVhdHVyZVxuICogICAvLz1mZWF0dXJlSW5kZXhcbiAqIH0pO1xuICovXG5mdW5jdGlvbiBmZWF0dXJlRWFjaChnZW9qc29uLCBjYWxsYmFjaykge1xuICBpZiAoZ2VvanNvbi50eXBlID09PSBcIkZlYXR1cmVcIikge1xuICAgIGNhbGxiYWNrKGdlb2pzb24sIDApO1xuICB9IGVsc2UgaWYgKGdlb2pzb24udHlwZSA9PT0gXCJGZWF0dXJlQ29sbGVjdGlvblwiKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnZW9qc29uLmZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoY2FsbGJhY2soZ2VvanNvbi5mZWF0dXJlc1tpXSwgaSkgPT09IGZhbHNlKSBicmVhaztcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDYWxsYmFjayBmb3IgZmVhdHVyZVJlZHVjZVxuICpcbiAqIFRoZSBmaXJzdCB0aW1lIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBpcyBjYWxsZWQsIHRoZSB2YWx1ZXMgcHJvdmlkZWQgYXMgYXJndW1lbnRzIGRlcGVuZFxuICogb24gd2hldGhlciB0aGUgcmVkdWNlIG1ldGhvZCBoYXMgYW4gaW5pdGlhbFZhbHVlIGFyZ3VtZW50LlxuICpcbiAqIElmIGFuIGluaXRpYWxWYWx1ZSBpcyBwcm92aWRlZCB0byB0aGUgcmVkdWNlIG1ldGhvZDpcbiAqICAtIFRoZSBwcmV2aW91c1ZhbHVlIGFyZ3VtZW50IGlzIGluaXRpYWxWYWx1ZS5cbiAqICAtIFRoZSBjdXJyZW50VmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBlbGVtZW50IHByZXNlbnQgaW4gdGhlIGFycmF5LlxuICpcbiAqIElmIGFuIGluaXRpYWxWYWx1ZSBpcyBub3QgcHJvdmlkZWQ6XG4gKiAgLSBUaGUgcHJldmlvdXNWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKiAgLSBUaGUgY3VycmVudFZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgc2Vjb25kIGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKlxuICogQGNhbGxiYWNrIGZlYXR1cmVSZWR1Y2VDYWxsYmFja1xuICogQHBhcmFtIHsqfSBwcmV2aW91c1ZhbHVlIFRoZSBhY2N1bXVsYXRlZCB2YWx1ZSBwcmV2aW91c2x5IHJldHVybmVkIGluIHRoZSBsYXN0IGludm9jYXRpb25cbiAqIG9mIHRoZSBjYWxsYmFjaywgb3IgaW5pdGlhbFZhbHVlLCBpZiBzdXBwbGllZC5cbiAqIEBwYXJhbSB7RmVhdHVyZX0gY3VycmVudEZlYXR1cmUgVGhlIGN1cnJlbnQgRmVhdHVyZSBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gZmVhdHVyZUluZGV4IFRoZSBjdXJyZW50IGluZGV4IG9mIHRoZSBGZWF0dXJlIGJlaW5nIHByb2Nlc3NlZC5cbiAqL1xuXG4vKipcbiAqIFJlZHVjZSBmZWF0dXJlcyBpbiBhbnkgR2VvSlNPTiBvYmplY3QsIHNpbWlsYXIgdG8gQXJyYXkucmVkdWNlKCkuXG4gKlxuICogQG5hbWUgZmVhdHVyZVJlZHVjZVxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbnxGZWF0dXJlfEdlb21ldHJ5fSBnZW9qc29uIGFueSBHZW9KU09OIG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgYSBtZXRob2QgdGhhdCB0YWtlcyAocHJldmlvdXNWYWx1ZSwgY3VycmVudEZlYXR1cmUsIGZlYXR1cmVJbmRleClcbiAqIEBwYXJhbSB7Kn0gW2luaXRpYWxWYWx1ZV0gVmFsdWUgdG8gdXNlIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgZmlyc3QgY2FsbCBvZiB0aGUgY2FsbGJhY2suXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIHRoYXQgcmVzdWx0cyBmcm9tIHRoZSByZWR1Y3Rpb24uXG4gKiBAZXhhbXBsZVxuICogdmFyIGZlYXR1cmVzID0gdHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXG4gKiAgIHR1cmYucG9pbnQoWzI2LCAzN10sIHtcImZvb1wiOiBcImJhclwifSksXG4gKiAgIHR1cmYucG9pbnQoWzM2LCA1M10sIHtcImhlbGxvXCI6IFwid29ybGRcIn0pXG4gKiBdKTtcbiAqXG4gKiB0dXJmLmZlYXR1cmVSZWR1Y2UoZmVhdHVyZXMsIGZ1bmN0aW9uIChwcmV2aW91c1ZhbHVlLCBjdXJyZW50RmVhdHVyZSwgZmVhdHVyZUluZGV4KSB7XG4gKiAgIC8vPXByZXZpb3VzVmFsdWVcbiAqICAgLy89Y3VycmVudEZlYXR1cmVcbiAqICAgLy89ZmVhdHVyZUluZGV4XG4gKiAgIHJldHVybiBjdXJyZW50RmVhdHVyZVxuICogfSk7XG4gKi9cbmZ1bmN0aW9uIGZlYXR1cmVSZWR1Y2UoZ2VvanNvbiwgY2FsbGJhY2ssIGluaXRpYWxWYWx1ZSkge1xuICB2YXIgcHJldmlvdXNWYWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgZmVhdHVyZUVhY2goZ2VvanNvbiwgZnVuY3Rpb24gKGN1cnJlbnRGZWF0dXJlLCBmZWF0dXJlSW5kZXgpIHtcbiAgICBpZiAoZmVhdHVyZUluZGV4ID09PSAwICYmIGluaXRpYWxWYWx1ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgcHJldmlvdXNWYWx1ZSA9IGN1cnJlbnRGZWF0dXJlO1xuICAgIGVsc2UgcHJldmlvdXNWYWx1ZSA9IGNhbGxiYWNrKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRGZWF0dXJlLCBmZWF0dXJlSW5kZXgpO1xuICB9KTtcbiAgcmV0dXJuIHByZXZpb3VzVmFsdWU7XG59XG5cbi8qKlxuICogR2V0IGFsbCBjb29yZGluYXRlcyBmcm9tIGFueSBHZW9KU09OIG9iamVjdC5cbiAqXG4gKiBAbmFtZSBjb29yZEFsbFxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbnxGZWF0dXJlfEdlb21ldHJ5fSBnZW9qc29uIGFueSBHZW9KU09OIG9iamVjdFxuICogQHJldHVybnMge0FycmF5PEFycmF5PG51bWJlcj4+fSBjb29yZGluYXRlIHBvc2l0aW9uIGFycmF5XG4gKiBAZXhhbXBsZVxuICogdmFyIGZlYXR1cmVzID0gdHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXG4gKiAgIHR1cmYucG9pbnQoWzI2LCAzN10sIHtmb286ICdiYXInfSksXG4gKiAgIHR1cmYucG9pbnQoWzM2LCA1M10sIHtoZWxsbzogJ3dvcmxkJ30pXG4gKiBdKTtcbiAqXG4gKiB2YXIgY29vcmRzID0gdHVyZi5jb29yZEFsbChmZWF0dXJlcyk7XG4gKiAvLz0gW1syNiwgMzddLCBbMzYsIDUzXV1cbiAqL1xuZnVuY3Rpb24gY29vcmRBbGwoZ2VvanNvbikge1xuICB2YXIgY29vcmRzID0gW107XG4gIGNvb3JkRWFjaChnZW9qc29uLCBmdW5jdGlvbiAoY29vcmQpIHtcbiAgICBjb29yZHMucHVzaChjb29yZCk7XG4gIH0pO1xuICByZXR1cm4gY29vcmRzO1xufVxuXG4vKipcbiAqIENhbGxiYWNrIGZvciBnZW9tRWFjaFxuICpcbiAqIEBjYWxsYmFjayBnZW9tRWFjaENhbGxiYWNrXG4gKiBAcGFyYW0ge0dlb21ldHJ5fSBjdXJyZW50R2VvbWV0cnkgVGhlIGN1cnJlbnQgR2VvbWV0cnkgYmVpbmcgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtudW1iZXJ9IGZlYXR1cmVJbmRleCBUaGUgY3VycmVudCBpbmRleCBvZiB0aGUgRmVhdHVyZSBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge09iamVjdH0gZmVhdHVyZVByb3BlcnRpZXMgVGhlIGN1cnJlbnQgRmVhdHVyZSBQcm9wZXJ0aWVzIGJlaW5nIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gZmVhdHVyZUJCb3ggVGhlIGN1cnJlbnQgRmVhdHVyZSBCQm94IGJlaW5nIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gZmVhdHVyZUlkIFRoZSBjdXJyZW50IEZlYXR1cmUgSWQgYmVpbmcgcHJvY2Vzc2VkLlxuICovXG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGVhY2ggZ2VvbWV0cnkgaW4gYW55IEdlb0pTT04gb2JqZWN0LCBzaW1pbGFyIHRvIEFycmF5LmZvckVhY2goKVxuICpcbiAqIEBuYW1lIGdlb21FYWNoXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmV8R2VvbWV0cnl9IGdlb2pzb24gYW55IEdlb0pTT04gb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBhIG1ldGhvZCB0aGF0IHRha2VzIChjdXJyZW50R2VvbWV0cnksIGZlYXR1cmVJbmRleCwgZmVhdHVyZVByb3BlcnRpZXMsIGZlYXR1cmVCQm94LCBmZWF0dXJlSWQpXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqIEBleGFtcGxlXG4gKiB2YXIgZmVhdHVyZXMgPSB0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtcbiAqICAgICB0dXJmLnBvaW50KFsyNiwgMzddLCB7Zm9vOiAnYmFyJ30pLFxuICogICAgIHR1cmYucG9pbnQoWzM2LCA1M10sIHtoZWxsbzogJ3dvcmxkJ30pXG4gKiBdKTtcbiAqXG4gKiB0dXJmLmdlb21FYWNoKGZlYXR1cmVzLCBmdW5jdGlvbiAoY3VycmVudEdlb21ldHJ5LCBmZWF0dXJlSW5kZXgsIGZlYXR1cmVQcm9wZXJ0aWVzLCBmZWF0dXJlQkJveCwgZmVhdHVyZUlkKSB7XG4gKiAgIC8vPWN1cnJlbnRHZW9tZXRyeVxuICogICAvLz1mZWF0dXJlSW5kZXhcbiAqICAgLy89ZmVhdHVyZVByb3BlcnRpZXNcbiAqICAgLy89ZmVhdHVyZUJCb3hcbiAqICAgLy89ZmVhdHVyZUlkXG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gZ2VvbUVhY2goZ2VvanNvbiwgY2FsbGJhY2spIHtcbiAgdmFyIGksXG4gICAgaixcbiAgICBnLFxuICAgIGdlb21ldHJ5LFxuICAgIHN0b3BHLFxuICAgIGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uLFxuICAgIGlzR2VvbWV0cnlDb2xsZWN0aW9uLFxuICAgIGZlYXR1cmVQcm9wZXJ0aWVzLFxuICAgIGZlYXR1cmVCQm94LFxuICAgIGZlYXR1cmVJZCxcbiAgICBmZWF0dXJlSW5kZXggPSAwLFxuICAgIGlzRmVhdHVyZUNvbGxlY3Rpb24gPSBnZW9qc29uLnR5cGUgPT09IFwiRmVhdHVyZUNvbGxlY3Rpb25cIixcbiAgICBpc0ZlYXR1cmUgPSBnZW9qc29uLnR5cGUgPT09IFwiRmVhdHVyZVwiLFxuICAgIHN0b3AgPSBpc0ZlYXR1cmVDb2xsZWN0aW9uID8gZ2VvanNvbi5mZWF0dXJlcy5sZW5ndGggOiAxO1xuXG4gIC8vIFRoaXMgbG9naWMgbWF5IGxvb2sgYSBsaXR0bGUgd2VpcmQuIFRoZSByZWFzb24gd2h5IGl0IGlzIHRoYXQgd2F5XG4gIC8vIGlzIGJlY2F1c2UgaXQncyB0cnlpbmcgdG8gYmUgZmFzdC4gR2VvSlNPTiBzdXBwb3J0cyBtdWx0aXBsZSBraW5kc1xuICAvLyBvZiBvYmplY3RzIGF0IGl0cyByb290OiBGZWF0dXJlQ29sbGVjdGlvbiwgRmVhdHVyZXMsIEdlb21ldHJpZXMuXG4gIC8vIFRoaXMgZnVuY3Rpb24gaGFzIHRoZSByZXNwb25zaWJpbGl0eSBvZiBoYW5kbGluZyBhbGwgb2YgdGhlbSwgYW5kIHRoYXRcbiAgLy8gbWVhbnMgdGhhdCBzb21lIG9mIHRoZSBgZm9yYCBsb29wcyB5b3Ugc2VlIGJlbG93IGFjdHVhbGx5IGp1c3QgZG9uJ3QgYXBwbHlcbiAgLy8gdG8gY2VydGFpbiBpbnB1dHMuIEZvciBpbnN0YW5jZSwgaWYgeW91IGdpdmUgdGhpcyBqdXN0IGFcbiAgLy8gUG9pbnQgZ2VvbWV0cnksIHRoZW4gYm90aCBsb29wcyBhcmUgc2hvcnQtY2lyY3VpdGVkIGFuZCBhbGwgd2UgZG9cbiAgLy8gaXMgZ3JhZHVhbGx5IHJlbmFtZSB0aGUgaW5wdXQgdW50aWwgaXQncyBjYWxsZWQgJ2dlb21ldHJ5Jy5cbiAgLy9cbiAgLy8gVGhpcyBhbHNvIGFpbXMgdG8gYWxsb2NhdGUgYXMgZmV3IHJlc291cmNlcyBhcyBwb3NzaWJsZToganVzdCBhXG4gIC8vIGZldyBudW1iZXJzIGFuZCBib29sZWFucywgcmF0aGVyIHRoYW4gYW55IHRlbXBvcmFyeSBhcnJheXMgYXMgd291bGRcbiAgLy8gYmUgcmVxdWlyZWQgd2l0aCB0aGUgbm9ybWFsaXphdGlvbiBhcHByb2FjaC5cbiAgZm9yIChpID0gMDsgaSA8IHN0b3A7IGkrKykge1xuICAgIGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uID0gaXNGZWF0dXJlQ29sbGVjdGlvblxuICAgICAgPyBnZW9qc29uLmZlYXR1cmVzW2ldLmdlb21ldHJ5XG4gICAgICA6IGlzRmVhdHVyZVxuICAgICAgPyBnZW9qc29uLmdlb21ldHJ5XG4gICAgICA6IGdlb2pzb247XG4gICAgZmVhdHVyZVByb3BlcnRpZXMgPSBpc0ZlYXR1cmVDb2xsZWN0aW9uXG4gICAgICA/IGdlb2pzb24uZmVhdHVyZXNbaV0ucHJvcGVydGllc1xuICAgICAgOiBpc0ZlYXR1cmVcbiAgICAgID8gZ2VvanNvbi5wcm9wZXJ0aWVzXG4gICAgICA6IHt9O1xuICAgIGZlYXR1cmVCQm94ID0gaXNGZWF0dXJlQ29sbGVjdGlvblxuICAgICAgPyBnZW9qc29uLmZlYXR1cmVzW2ldLmJib3hcbiAgICAgIDogaXNGZWF0dXJlXG4gICAgICA/IGdlb2pzb24uYmJveFxuICAgICAgOiB1bmRlZmluZWQ7XG4gICAgZmVhdHVyZUlkID0gaXNGZWF0dXJlQ29sbGVjdGlvblxuICAgICAgPyBnZW9qc29uLmZlYXR1cmVzW2ldLmlkXG4gICAgICA6IGlzRmVhdHVyZVxuICAgICAgPyBnZW9qc29uLmlkXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgICBpc0dlb21ldHJ5Q29sbGVjdGlvbiA9IGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uXG4gICAgICA/IGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uLnR5cGUgPT09IFwiR2VvbWV0cnlDb2xsZWN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gICAgc3RvcEcgPSBpc0dlb21ldHJ5Q29sbGVjdGlvblxuICAgICAgPyBnZW9tZXRyeU1heWJlQ29sbGVjdGlvbi5nZW9tZXRyaWVzLmxlbmd0aFxuICAgICAgOiAxO1xuXG4gICAgZm9yIChnID0gMDsgZyA8IHN0b3BHOyBnKyspIHtcbiAgICAgIGdlb21ldHJ5ID0gaXNHZW9tZXRyeUNvbGxlY3Rpb25cbiAgICAgICAgPyBnZW9tZXRyeU1heWJlQ29sbGVjdGlvbi5nZW9tZXRyaWVzW2ddXG4gICAgICAgIDogZ2VvbWV0cnlNYXliZUNvbGxlY3Rpb247XG5cbiAgICAgIC8vIEhhbmRsZSBudWxsIEdlb21ldHJ5XG4gICAgICBpZiAoZ2VvbWV0cnkgPT09IG51bGwpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGNhbGxiYWNrKFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGZlYXR1cmVJbmRleCxcbiAgICAgICAgICAgIGZlYXR1cmVQcm9wZXJ0aWVzLFxuICAgICAgICAgICAgZmVhdHVyZUJCb3gsXG4gICAgICAgICAgICBmZWF0dXJlSWRcbiAgICAgICAgICApID09PSBmYWxzZVxuICAgICAgICApXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoZ2VvbWV0cnkudHlwZSkge1xuICAgICAgICBjYXNlIFwiUG9pbnRcIjpcbiAgICAgICAgY2FzZSBcIkxpbmVTdHJpbmdcIjpcbiAgICAgICAgY2FzZSBcIk11bHRpUG9pbnRcIjpcbiAgICAgICAgY2FzZSBcIlBvbHlnb25cIjpcbiAgICAgICAgY2FzZSBcIk11bHRpTGluZVN0cmluZ1wiOlxuICAgICAgICBjYXNlIFwiTXVsdGlQb2x5Z29uXCI6IHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBjYWxsYmFjayhcbiAgICAgICAgICAgICAgZ2VvbWV0cnksXG4gICAgICAgICAgICAgIGZlYXR1cmVJbmRleCxcbiAgICAgICAgICAgICAgZmVhdHVyZVByb3BlcnRpZXMsXG4gICAgICAgICAgICAgIGZlYXR1cmVCQm94LFxuICAgICAgICAgICAgICBmZWF0dXJlSWRcbiAgICAgICAgICAgICkgPT09IGZhbHNlXG4gICAgICAgICAgKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJHZW9tZXRyeUNvbGxlY3Rpb25cIjoge1xuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBnZW9tZXRyeS5nZW9tZXRyaWVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIGNhbGxiYWNrKFxuICAgICAgICAgICAgICAgIGdlb21ldHJ5Lmdlb21ldHJpZXNbal0sXG4gICAgICAgICAgICAgICAgZmVhdHVyZUluZGV4LFxuICAgICAgICAgICAgICAgIGZlYXR1cmVQcm9wZXJ0aWVzLFxuICAgICAgICAgICAgICAgIGZlYXR1cmVCQm94LFxuICAgICAgICAgICAgICAgIGZlYXR1cmVJZFxuICAgICAgICAgICAgICApID09PSBmYWxzZVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBHZW9tZXRyeSBUeXBlXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBPbmx5IGluY3JlYXNlIGBmZWF0dXJlSW5kZXhgIHBlciBlYWNoIGZlYXR1cmVcbiAgICBmZWF0dXJlSW5kZXgrKztcbiAgfVxufVxuXG4vKipcbiAqIENhbGxiYWNrIGZvciBnZW9tUmVkdWNlXG4gKlxuICogVGhlIGZpcnN0IHRpbWUgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIGNhbGxlZCwgdGhlIHZhbHVlcyBwcm92aWRlZCBhcyBhcmd1bWVudHMgZGVwZW5kXG4gKiBvbiB3aGV0aGVyIHRoZSByZWR1Y2UgbWV0aG9kIGhhcyBhbiBpbml0aWFsVmFsdWUgYXJndW1lbnQuXG4gKlxuICogSWYgYW4gaW5pdGlhbFZhbHVlIGlzIHByb3ZpZGVkIHRvIHRoZSByZWR1Y2UgbWV0aG9kOlxuICogIC0gVGhlIHByZXZpb3VzVmFsdWUgYXJndW1lbnQgaXMgaW5pdGlhbFZhbHVlLlxuICogIC0gVGhlIGN1cnJlbnRWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKlxuICogSWYgYW4gaW5pdGlhbFZhbHVlIGlzIG5vdCBwcm92aWRlZDpcbiAqICAtIFRoZSBwcmV2aW91c1ZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgZWxlbWVudCBwcmVzZW50IGluIHRoZSBhcnJheS5cbiAqICAtIFRoZSBjdXJyZW50VmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBzZWNvbmQgZWxlbWVudCBwcmVzZW50IGluIHRoZSBhcnJheS5cbiAqXG4gKiBAY2FsbGJhY2sgZ2VvbVJlZHVjZUNhbGxiYWNrXG4gKiBAcGFyYW0geyp9IHByZXZpb3VzVmFsdWUgVGhlIGFjY3VtdWxhdGVkIHZhbHVlIHByZXZpb3VzbHkgcmV0dXJuZWQgaW4gdGhlIGxhc3QgaW52b2NhdGlvblxuICogb2YgdGhlIGNhbGxiYWNrLCBvciBpbml0aWFsVmFsdWUsIGlmIHN1cHBsaWVkLlxuICogQHBhcmFtIHtHZW9tZXRyeX0gY3VycmVudEdlb21ldHJ5IFRoZSBjdXJyZW50IEdlb21ldHJ5IGJlaW5nIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmZWF0dXJlSW5kZXggVGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIEZlYXR1cmUgYmVpbmcgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtPYmplY3R9IGZlYXR1cmVQcm9wZXJ0aWVzIFRoZSBjdXJyZW50IEZlYXR1cmUgUHJvcGVydGllcyBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGZlYXR1cmVCQm94IFRoZSBjdXJyZW50IEZlYXR1cmUgQkJveCBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IGZlYXR1cmVJZCBUaGUgY3VycmVudCBGZWF0dXJlIElkIGJlaW5nIHByb2Nlc3NlZC5cbiAqL1xuXG4vKipcbiAqIFJlZHVjZSBnZW9tZXRyeSBpbiBhbnkgR2VvSlNPTiBvYmplY3QsIHNpbWlsYXIgdG8gQXJyYXkucmVkdWNlKCkuXG4gKlxuICogQG5hbWUgZ2VvbVJlZHVjZVxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbnxGZWF0dXJlfEdlb21ldHJ5fSBnZW9qc29uIGFueSBHZW9KU09OIG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgYSBtZXRob2QgdGhhdCB0YWtlcyAocHJldmlvdXNWYWx1ZSwgY3VycmVudEdlb21ldHJ5LCBmZWF0dXJlSW5kZXgsIGZlYXR1cmVQcm9wZXJ0aWVzLCBmZWF0dXJlQkJveCwgZmVhdHVyZUlkKVxuICogQHBhcmFtIHsqfSBbaW5pdGlhbFZhbHVlXSBWYWx1ZSB0byB1c2UgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBmaXJzdCBjYWxsIG9mIHRoZSBjYWxsYmFjay5cbiAqIEByZXR1cm5zIHsqfSBUaGUgdmFsdWUgdGhhdCByZXN1bHRzIGZyb20gdGhlIHJlZHVjdGlvbi5cbiAqIEBleGFtcGxlXG4gKiB2YXIgZmVhdHVyZXMgPSB0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtcbiAqICAgICB0dXJmLnBvaW50KFsyNiwgMzddLCB7Zm9vOiAnYmFyJ30pLFxuICogICAgIHR1cmYucG9pbnQoWzM2LCA1M10sIHtoZWxsbzogJ3dvcmxkJ30pXG4gKiBdKTtcbiAqXG4gKiB0dXJmLmdlb21SZWR1Y2UoZmVhdHVyZXMsIGZ1bmN0aW9uIChwcmV2aW91c1ZhbHVlLCBjdXJyZW50R2VvbWV0cnksIGZlYXR1cmVJbmRleCwgZmVhdHVyZVByb3BlcnRpZXMsIGZlYXR1cmVCQm94LCBmZWF0dXJlSWQpIHtcbiAqICAgLy89cHJldmlvdXNWYWx1ZVxuICogICAvLz1jdXJyZW50R2VvbWV0cnlcbiAqICAgLy89ZmVhdHVyZUluZGV4XG4gKiAgIC8vPWZlYXR1cmVQcm9wZXJ0aWVzXG4gKiAgIC8vPWZlYXR1cmVCQm94XG4gKiAgIC8vPWZlYXR1cmVJZFxuICogICByZXR1cm4gY3VycmVudEdlb21ldHJ5XG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gZ2VvbVJlZHVjZShnZW9qc29uLCBjYWxsYmFjaywgaW5pdGlhbFZhbHVlKSB7XG4gIHZhciBwcmV2aW91c1ZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICBnZW9tRWFjaChcbiAgICBnZW9qc29uLFxuICAgIGZ1bmN0aW9uIChcbiAgICAgIGN1cnJlbnRHZW9tZXRyeSxcbiAgICAgIGZlYXR1cmVJbmRleCxcbiAgICAgIGZlYXR1cmVQcm9wZXJ0aWVzLFxuICAgICAgZmVhdHVyZUJCb3gsXG4gICAgICBmZWF0dXJlSWRcbiAgICApIHtcbiAgICAgIGlmIChmZWF0dXJlSW5kZXggPT09IDAgJiYgaW5pdGlhbFZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgIHByZXZpb3VzVmFsdWUgPSBjdXJyZW50R2VvbWV0cnk7XG4gICAgICBlbHNlXG4gICAgICAgIHByZXZpb3VzVmFsdWUgPSBjYWxsYmFjayhcbiAgICAgICAgICBwcmV2aW91c1ZhbHVlLFxuICAgICAgICAgIGN1cnJlbnRHZW9tZXRyeSxcbiAgICAgICAgICBmZWF0dXJlSW5kZXgsXG4gICAgICAgICAgZmVhdHVyZVByb3BlcnRpZXMsXG4gICAgICAgICAgZmVhdHVyZUJCb3gsXG4gICAgICAgICAgZmVhdHVyZUlkXG4gICAgICAgICk7XG4gICAgfVxuICApO1xuICByZXR1cm4gcHJldmlvdXNWYWx1ZTtcbn1cblxuLyoqXG4gKiBDYWxsYmFjayBmb3IgZmxhdHRlbkVhY2hcbiAqXG4gKiBAY2FsbGJhY2sgZmxhdHRlbkVhY2hDYWxsYmFja1xuICogQHBhcmFtIHtGZWF0dXJlfSBjdXJyZW50RmVhdHVyZSBUaGUgY3VycmVudCBmbGF0dGVuZWQgZmVhdHVyZSBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gZmVhdHVyZUluZGV4IFRoZSBjdXJyZW50IGluZGV4IG9mIHRoZSBGZWF0dXJlIGJlaW5nIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aUZlYXR1cmVJbmRleCBUaGUgY3VycmVudCBpbmRleCBvZiB0aGUgTXVsdGktRmVhdHVyZSBiZWluZyBwcm9jZXNzZWQuXG4gKi9cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgZmxhdHRlbmVkIGZlYXR1cmVzIGluIGFueSBHZW9KU09OIG9iamVjdCwgc2ltaWxhciB0b1xuICogQXJyYXkuZm9yRWFjaC5cbiAqXG4gKiBAbmFtZSBmbGF0dGVuRWFjaFxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbnxGZWF0dXJlfEdlb21ldHJ5fSBnZW9qc29uIGFueSBHZW9KU09OIG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgYSBtZXRob2QgdGhhdCB0YWtlcyAoY3VycmVudEZlYXR1cmUsIGZlYXR1cmVJbmRleCwgbXVsdGlGZWF0dXJlSW5kZXgpXG4gKiBAZXhhbXBsZVxuICogdmFyIGZlYXR1cmVzID0gdHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXG4gKiAgICAgdHVyZi5wb2ludChbMjYsIDM3XSwge2ZvbzogJ2Jhcid9KSxcbiAqICAgICB0dXJmLm11bHRpUG9pbnQoW1s0MCwgMzBdLCBbMzYsIDUzXV0sIHtoZWxsbzogJ3dvcmxkJ30pXG4gKiBdKTtcbiAqXG4gKiB0dXJmLmZsYXR0ZW5FYWNoKGZlYXR1cmVzLCBmdW5jdGlvbiAoY3VycmVudEZlYXR1cmUsIGZlYXR1cmVJbmRleCwgbXVsdGlGZWF0dXJlSW5kZXgpIHtcbiAqICAgLy89Y3VycmVudEZlYXR1cmVcbiAqICAgLy89ZmVhdHVyZUluZGV4XG4gKiAgIC8vPW11bHRpRmVhdHVyZUluZGV4XG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gZmxhdHRlbkVhY2goZ2VvanNvbiwgY2FsbGJhY2spIHtcbiAgZ2VvbUVhY2goZ2VvanNvbiwgZnVuY3Rpb24gKGdlb21ldHJ5LCBmZWF0dXJlSW5kZXgsIHByb3BlcnRpZXMsIGJib3gsIGlkKSB7XG4gICAgLy8gQ2FsbGJhY2sgZm9yIHNpbmdsZSBnZW9tZXRyeVxuICAgIHZhciB0eXBlID0gZ2VvbWV0cnkgPT09IG51bGwgPyBudWxsIDogZ2VvbWV0cnkudHlwZTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgbnVsbDpcbiAgICAgIGNhc2UgXCJQb2ludFwiOlxuICAgICAgY2FzZSBcIkxpbmVTdHJpbmdcIjpcbiAgICAgIGNhc2UgXCJQb2x5Z29uXCI6XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjYWxsYmFjayhcbiAgICAgICAgICAgIGZlYXR1cmUoZ2VvbWV0cnksIHByb3BlcnRpZXMsIHsgYmJveDogYmJveCwgaWQ6IGlkIH0pLFxuICAgICAgICAgICAgZmVhdHVyZUluZGV4LFxuICAgICAgICAgICAgMFxuICAgICAgICAgICkgPT09IGZhbHNlXG4gICAgICAgIClcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZ2VvbVR5cGU7XG5cbiAgICAvLyBDYWxsYmFjayBmb3IgbXVsdGktZ2VvbWV0cnlcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJNdWx0aVBvaW50XCI6XG4gICAgICAgIGdlb21UeXBlID0gXCJQb2ludFwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJNdWx0aUxpbmVTdHJpbmdcIjpcbiAgICAgICAgZ2VvbVR5cGUgPSBcIkxpbmVTdHJpbmdcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlQb2x5Z29uXCI6XG4gICAgICAgIGdlb21UeXBlID0gXCJQb2x5Z29uXCI7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGZvciAoXG4gICAgICB2YXIgbXVsdGlGZWF0dXJlSW5kZXggPSAwO1xuICAgICAgbXVsdGlGZWF0dXJlSW5kZXggPCBnZW9tZXRyeS5jb29yZGluYXRlcy5sZW5ndGg7XG4gICAgICBtdWx0aUZlYXR1cmVJbmRleCsrXG4gICAgKSB7XG4gICAgICB2YXIgY29vcmRpbmF0ZSA9IGdlb21ldHJ5LmNvb3JkaW5hdGVzW211bHRpRmVhdHVyZUluZGV4XTtcbiAgICAgIHZhciBnZW9tID0ge1xuICAgICAgICB0eXBlOiBnZW9tVHlwZSxcbiAgICAgICAgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGUsXG4gICAgICB9O1xuICAgICAgaWYgKFxuICAgICAgICBjYWxsYmFjayhmZWF0dXJlKGdlb20sIHByb3BlcnRpZXMpLCBmZWF0dXJlSW5kZXgsIG11bHRpRmVhdHVyZUluZGV4KSA9PT1cbiAgICAgICAgZmFsc2VcbiAgICAgIClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQ2FsbGJhY2sgZm9yIGZsYXR0ZW5SZWR1Y2VcbiAqXG4gKiBUaGUgZmlyc3QgdGltZSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gaXMgY2FsbGVkLCB0aGUgdmFsdWVzIHByb3ZpZGVkIGFzIGFyZ3VtZW50cyBkZXBlbmRcbiAqIG9uIHdoZXRoZXIgdGhlIHJlZHVjZSBtZXRob2QgaGFzIGFuIGluaXRpYWxWYWx1ZSBhcmd1bWVudC5cbiAqXG4gKiBJZiBhbiBpbml0aWFsVmFsdWUgaXMgcHJvdmlkZWQgdG8gdGhlIHJlZHVjZSBtZXRob2Q6XG4gKiAgLSBUaGUgcHJldmlvdXNWYWx1ZSBhcmd1bWVudCBpcyBpbml0aWFsVmFsdWUuXG4gKiAgLSBUaGUgY3VycmVudFZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgZWxlbWVudCBwcmVzZW50IGluIHRoZSBhcnJheS5cbiAqXG4gKiBJZiBhbiBpbml0aWFsVmFsdWUgaXMgbm90IHByb3ZpZGVkOlxuICogIC0gVGhlIHByZXZpb3VzVmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBlbGVtZW50IHByZXNlbnQgaW4gdGhlIGFycmF5LlxuICogIC0gVGhlIGN1cnJlbnRWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIHNlY29uZCBlbGVtZW50IHByZXNlbnQgaW4gdGhlIGFycmF5LlxuICpcbiAqIEBjYWxsYmFjayBmbGF0dGVuUmVkdWNlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7Kn0gcHJldmlvdXNWYWx1ZSBUaGUgYWNjdW11bGF0ZWQgdmFsdWUgcHJldmlvdXNseSByZXR1cm5lZCBpbiB0aGUgbGFzdCBpbnZvY2F0aW9uXG4gKiBvZiB0aGUgY2FsbGJhY2ssIG9yIGluaXRpYWxWYWx1ZSwgaWYgc3VwcGxpZWQuXG4gKiBAcGFyYW0ge0ZlYXR1cmV9IGN1cnJlbnRGZWF0dXJlIFRoZSBjdXJyZW50IEZlYXR1cmUgYmVpbmcgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtudW1iZXJ9IGZlYXR1cmVJbmRleCBUaGUgY3VycmVudCBpbmRleCBvZiB0aGUgRmVhdHVyZSBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gbXVsdGlGZWF0dXJlSW5kZXggVGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIE11bHRpLUZlYXR1cmUgYmVpbmcgcHJvY2Vzc2VkLlxuICovXG5cbi8qKlxuICogUmVkdWNlIGZsYXR0ZW5lZCBmZWF0dXJlcyBpbiBhbnkgR2VvSlNPTiBvYmplY3QsIHNpbWlsYXIgdG8gQXJyYXkucmVkdWNlKCkuXG4gKlxuICogQG5hbWUgZmxhdHRlblJlZHVjZVxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbnxGZWF0dXJlfEdlb21ldHJ5fSBnZW9qc29uIGFueSBHZW9KU09OIG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgYSBtZXRob2QgdGhhdCB0YWtlcyAocHJldmlvdXNWYWx1ZSwgY3VycmVudEZlYXR1cmUsIGZlYXR1cmVJbmRleCwgbXVsdGlGZWF0dXJlSW5kZXgpXG4gKiBAcGFyYW0geyp9IFtpbml0aWFsVmFsdWVdIFZhbHVlIHRvIHVzZSBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIGZpcnN0IGNhbGwgb2YgdGhlIGNhbGxiYWNrLlxuICogQHJldHVybnMgeyp9IFRoZSB2YWx1ZSB0aGF0IHJlc3VsdHMgZnJvbSB0aGUgcmVkdWN0aW9uLlxuICogQGV4YW1wbGVcbiAqIHZhciBmZWF0dXJlcyA9IHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW1xuICogICAgIHR1cmYucG9pbnQoWzI2LCAzN10sIHtmb286ICdiYXInfSksXG4gKiAgICAgdHVyZi5tdWx0aVBvaW50KFtbNDAsIDMwXSwgWzM2LCA1M11dLCB7aGVsbG86ICd3b3JsZCd9KVxuICogXSk7XG4gKlxuICogdHVyZi5mbGF0dGVuUmVkdWNlKGZlYXR1cmVzLCBmdW5jdGlvbiAocHJldmlvdXNWYWx1ZSwgY3VycmVudEZlYXR1cmUsIGZlYXR1cmVJbmRleCwgbXVsdGlGZWF0dXJlSW5kZXgpIHtcbiAqICAgLy89cHJldmlvdXNWYWx1ZVxuICogICAvLz1jdXJyZW50RmVhdHVyZVxuICogICAvLz1mZWF0dXJlSW5kZXhcbiAqICAgLy89bXVsdGlGZWF0dXJlSW5kZXhcbiAqICAgcmV0dXJuIGN1cnJlbnRGZWF0dXJlXG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gZmxhdHRlblJlZHVjZShnZW9qc29uLCBjYWxsYmFjaywgaW5pdGlhbFZhbHVlKSB7XG4gIHZhciBwcmV2aW91c1ZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICBmbGF0dGVuRWFjaChcbiAgICBnZW9qc29uLFxuICAgIGZ1bmN0aW9uIChjdXJyZW50RmVhdHVyZSwgZmVhdHVyZUluZGV4LCBtdWx0aUZlYXR1cmVJbmRleCkge1xuICAgICAgaWYgKFxuICAgICAgICBmZWF0dXJlSW5kZXggPT09IDAgJiZcbiAgICAgICAgbXVsdGlGZWF0dXJlSW5kZXggPT09IDAgJiZcbiAgICAgICAgaW5pdGlhbFZhbHVlID09PSB1bmRlZmluZWRcbiAgICAgIClcbiAgICAgICAgcHJldmlvdXNWYWx1ZSA9IGN1cnJlbnRGZWF0dXJlO1xuICAgICAgZWxzZVxuICAgICAgICBwcmV2aW91c1ZhbHVlID0gY2FsbGJhY2soXG4gICAgICAgICAgcHJldmlvdXNWYWx1ZSxcbiAgICAgICAgICBjdXJyZW50RmVhdHVyZSxcbiAgICAgICAgICBmZWF0dXJlSW5kZXgsXG4gICAgICAgICAgbXVsdGlGZWF0dXJlSW5kZXhcbiAgICAgICAgKTtcbiAgICB9XG4gICk7XG4gIHJldHVybiBwcmV2aW91c1ZhbHVlO1xufVxuXG4vKipcbiAqIENhbGxiYWNrIGZvciBzZWdtZW50RWFjaFxuICpcbiAqIEBjYWxsYmFjayBzZWdtZW50RWFjaENhbGxiYWNrXG4gKiBAcGFyYW0ge0ZlYXR1cmU8TGluZVN0cmluZz59IGN1cnJlbnRTZWdtZW50IFRoZSBjdXJyZW50IFNlZ21lbnQgYmVpbmcgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtudW1iZXJ9IGZlYXR1cmVJbmRleCBUaGUgY3VycmVudCBpbmRleCBvZiB0aGUgRmVhdHVyZSBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gbXVsdGlGZWF0dXJlSW5kZXggVGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIE11bHRpLUZlYXR1cmUgYmVpbmcgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtudW1iZXJ9IGdlb21ldHJ5SW5kZXggVGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIEdlb21ldHJ5IGJlaW5nIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzZWdtZW50SW5kZXggVGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIFNlZ21lbnQgYmVpbmcgcHJvY2Vzc2VkLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgMi12ZXJ0ZXggbGluZSBzZWdtZW50IGluIGFueSBHZW9KU09OIG9iamVjdCwgc2ltaWxhciB0byBBcnJheS5mb3JFYWNoKClcbiAqIChNdWx0aSlQb2ludCBnZW9tZXRyaWVzIGRvIG5vdCBjb250YWluIHNlZ21lbnRzIHRoZXJlZm9yZSB0aGV5IGFyZSBpZ25vcmVkIGR1cmluZyB0aGlzIG9wZXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmV8R2VvbWV0cnl9IGdlb2pzb24gYW55IEdlb0pTT05cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGEgbWV0aG9kIHRoYXQgdGFrZXMgKGN1cnJlbnRTZWdtZW50LCBmZWF0dXJlSW5kZXgsIG11bHRpRmVhdHVyZUluZGV4LCBnZW9tZXRyeUluZGV4LCBzZWdtZW50SW5kZXgpXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9seWdvbiA9IHR1cmYucG9seWdvbihbW1stNTAsIDVdLCBbLTQwLCAtMTBdLCBbLTUwLCAtMTBdLCBbLTQwLCA1XSwgWy01MCwgNV1dXSk7XG4gKlxuICogLy8gSXRlcmF0ZSBvdmVyIEdlb0pTT04gYnkgMi12ZXJ0ZXggc2VnbWVudHNcbiAqIHR1cmYuc2VnbWVudEVhY2gocG9seWdvbiwgZnVuY3Rpb24gKGN1cnJlbnRTZWdtZW50LCBmZWF0dXJlSW5kZXgsIG11bHRpRmVhdHVyZUluZGV4LCBnZW9tZXRyeUluZGV4LCBzZWdtZW50SW5kZXgpIHtcbiAqICAgLy89Y3VycmVudFNlZ21lbnRcbiAqICAgLy89ZmVhdHVyZUluZGV4XG4gKiAgIC8vPW11bHRpRmVhdHVyZUluZGV4XG4gKiAgIC8vPWdlb21ldHJ5SW5kZXhcbiAqICAgLy89c2VnbWVudEluZGV4XG4gKiB9KTtcbiAqXG4gKiAvLyBDYWxjdWxhdGUgdGhlIHRvdGFsIG51bWJlciBvZiBzZWdtZW50c1xuICogdmFyIHRvdGFsID0gMDtcbiAqIHR1cmYuc2VnbWVudEVhY2gocG9seWdvbiwgZnVuY3Rpb24gKCkge1xuICogICAgIHRvdGFsKys7XG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gc2VnbWVudEVhY2goZ2VvanNvbiwgY2FsbGJhY2spIHtcbiAgZmxhdHRlbkVhY2goZ2VvanNvbiwgZnVuY3Rpb24gKGZlYXR1cmUsIGZlYXR1cmVJbmRleCwgbXVsdGlGZWF0dXJlSW5kZXgpIHtcbiAgICB2YXIgc2VnbWVudEluZGV4ID0gMDtcblxuICAgIC8vIEV4Y2x1ZGUgbnVsbCBHZW9tZXRyaWVzXG4gICAgaWYgKCFmZWF0dXJlLmdlb21ldHJ5KSByZXR1cm47XG4gICAgLy8gKE11bHRpKVBvaW50IGdlb21ldHJpZXMgZG8gbm90IGNvbnRhaW4gc2VnbWVudHMgdGhlcmVmb3JlIHRoZXkgYXJlIGlnbm9yZWQgZHVyaW5nIHRoaXMgb3BlcmF0aW9uLlxuICAgIHZhciB0eXBlID0gZmVhdHVyZS5nZW9tZXRyeS50eXBlO1xuICAgIGlmICh0eXBlID09PSBcIlBvaW50XCIgfHwgdHlwZSA9PT0gXCJNdWx0aVBvaW50XCIpIHJldHVybjtcblxuICAgIC8vIEdlbmVyYXRlIDItdmVydGV4IGxpbmUgc2VnbWVudHNcbiAgICB2YXIgcHJldmlvdXNDb29yZHM7XG4gICAgdmFyIHByZXZpb3VzRmVhdHVyZUluZGV4ID0gMDtcbiAgICB2YXIgcHJldmlvdXNNdWx0aUluZGV4ID0gMDtcbiAgICB2YXIgcHJldkdlb21JbmRleCA9IDA7XG4gICAgaWYgKFxuICAgICAgY29vcmRFYWNoKFxuICAgICAgICBmZWF0dXJlLFxuICAgICAgICBmdW5jdGlvbiAoXG4gICAgICAgICAgY3VycmVudENvb3JkLFxuICAgICAgICAgIGNvb3JkSW5kZXgsXG4gICAgICAgICAgZmVhdHVyZUluZGV4Q29vcmQsXG4gICAgICAgICAgbXVsdGlQYXJ0SW5kZXhDb29yZCxcbiAgICAgICAgICBnZW9tZXRyeUluZGV4XG4gICAgICAgICkge1xuICAgICAgICAgIC8vIFNpbXVsYXRpbmcgYSBtZXRhLmNvb3JkUmVkdWNlKCkgc2luY2UgYHJlZHVjZWAgb3BlcmF0aW9ucyBjYW5ub3QgYmUgc3RvcHBlZCBieSByZXR1cm5pbmcgYGZhbHNlYFxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHByZXZpb3VzQ29vcmRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGZlYXR1cmVJbmRleCA+IHByZXZpb3VzRmVhdHVyZUluZGV4IHx8XG4gICAgICAgICAgICBtdWx0aVBhcnRJbmRleENvb3JkID4gcHJldmlvdXNNdWx0aUluZGV4IHx8XG4gICAgICAgICAgICBnZW9tZXRyeUluZGV4ID4gcHJldkdlb21JbmRleFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcHJldmlvdXNDb29yZHMgPSBjdXJyZW50Q29vcmQ7XG4gICAgICAgICAgICBwcmV2aW91c0ZlYXR1cmVJbmRleCA9IGZlYXR1cmVJbmRleDtcbiAgICAgICAgICAgIHByZXZpb3VzTXVsdGlJbmRleCA9IG11bHRpUGFydEluZGV4Q29vcmQ7XG4gICAgICAgICAgICBwcmV2R2VvbUluZGV4ID0gZ2VvbWV0cnlJbmRleDtcbiAgICAgICAgICAgIHNlZ21lbnRJbmRleCA9IDA7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBjdXJyZW50U2VnbWVudCA9IGxpbmVTdHJpbmcoXG4gICAgICAgICAgICBbcHJldmlvdXNDb29yZHMsIGN1cnJlbnRDb29yZF0sXG4gICAgICAgICAgICBmZWF0dXJlLnByb3BlcnRpZXNcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGNhbGxiYWNrKFxuICAgICAgICAgICAgICBjdXJyZW50U2VnbWVudCxcbiAgICAgICAgICAgICAgZmVhdHVyZUluZGV4LFxuICAgICAgICAgICAgICBtdWx0aUZlYXR1cmVJbmRleCxcbiAgICAgICAgICAgICAgZ2VvbWV0cnlJbmRleCxcbiAgICAgICAgICAgICAgc2VnbWVudEluZGV4XG4gICAgICAgICAgICApID09PSBmYWxzZVxuICAgICAgICAgIClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBzZWdtZW50SW5kZXgrKztcbiAgICAgICAgICBwcmV2aW91c0Nvb3JkcyA9IGN1cnJlbnRDb29yZDtcbiAgICAgICAgfVxuICAgICAgKSA9PT0gZmFsc2VcbiAgICApXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xufVxuXG4vKipcbiAqIENhbGxiYWNrIGZvciBzZWdtZW50UmVkdWNlXG4gKlxuICogVGhlIGZpcnN0IHRpbWUgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIGNhbGxlZCwgdGhlIHZhbHVlcyBwcm92aWRlZCBhcyBhcmd1bWVudHMgZGVwZW5kXG4gKiBvbiB3aGV0aGVyIHRoZSByZWR1Y2UgbWV0aG9kIGhhcyBhbiBpbml0aWFsVmFsdWUgYXJndW1lbnQuXG4gKlxuICogSWYgYW4gaW5pdGlhbFZhbHVlIGlzIHByb3ZpZGVkIHRvIHRoZSByZWR1Y2UgbWV0aG9kOlxuICogIC0gVGhlIHByZXZpb3VzVmFsdWUgYXJndW1lbnQgaXMgaW5pdGlhbFZhbHVlLlxuICogIC0gVGhlIGN1cnJlbnRWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKlxuICogSWYgYW4gaW5pdGlhbFZhbHVlIGlzIG5vdCBwcm92aWRlZDpcbiAqICAtIFRoZSBwcmV2aW91c1ZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgZWxlbWVudCBwcmVzZW50IGluIHRoZSBhcnJheS5cbiAqICAtIFRoZSBjdXJyZW50VmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBzZWNvbmQgZWxlbWVudCBwcmVzZW50IGluIHRoZSBhcnJheS5cbiAqXG4gKiBAY2FsbGJhY2sgc2VnbWVudFJlZHVjZUNhbGxiYWNrXG4gKiBAcGFyYW0geyp9IHByZXZpb3VzVmFsdWUgVGhlIGFjY3VtdWxhdGVkIHZhbHVlIHByZXZpb3VzbHkgcmV0dXJuZWQgaW4gdGhlIGxhc3QgaW52b2NhdGlvblxuICogb2YgdGhlIGNhbGxiYWNrLCBvciBpbml0aWFsVmFsdWUsIGlmIHN1cHBsaWVkLlxuICogQHBhcmFtIHtGZWF0dXJlPExpbmVTdHJpbmc+fSBjdXJyZW50U2VnbWVudCBUaGUgY3VycmVudCBTZWdtZW50IGJlaW5nIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmZWF0dXJlSW5kZXggVGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIEZlYXR1cmUgYmVpbmcgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtudW1iZXJ9IG11bHRpRmVhdHVyZUluZGV4IFRoZSBjdXJyZW50IGluZGV4IG9mIHRoZSBNdWx0aS1GZWF0dXJlIGJlaW5nIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBnZW9tZXRyeUluZGV4IFRoZSBjdXJyZW50IGluZGV4IG9mIHRoZSBHZW9tZXRyeSBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gc2VnbWVudEluZGV4IFRoZSBjdXJyZW50IGluZGV4IG9mIHRoZSBTZWdtZW50IGJlaW5nIHByb2Nlc3NlZC5cbiAqL1xuXG4vKipcbiAqIFJlZHVjZSAyLXZlcnRleCBsaW5lIHNlZ21lbnQgaW4gYW55IEdlb0pTT04gb2JqZWN0LCBzaW1pbGFyIHRvIEFycmF5LnJlZHVjZSgpXG4gKiAoTXVsdGkpUG9pbnQgZ2VvbWV0cmllcyBkbyBub3QgY29udGFpbiBzZWdtZW50cyB0aGVyZWZvcmUgdGhleSBhcmUgaWdub3JlZCBkdXJpbmcgdGhpcyBvcGVyYXRpb24uXG4gKlxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbnxGZWF0dXJlfEdlb21ldHJ5fSBnZW9qc29uIGFueSBHZW9KU09OXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBhIG1ldGhvZCB0aGF0IHRha2VzIChwcmV2aW91c1ZhbHVlLCBjdXJyZW50U2VnbWVudCwgY3VycmVudEluZGV4KVxuICogQHBhcmFtIHsqfSBbaW5pdGlhbFZhbHVlXSBWYWx1ZSB0byB1c2UgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBmaXJzdCBjYWxsIG9mIHRoZSBjYWxsYmFjay5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICogQGV4YW1wbGVcbiAqIHZhciBwb2x5Z29uID0gdHVyZi5wb2x5Z29uKFtbWy01MCwgNV0sIFstNDAsIC0xMF0sIFstNTAsIC0xMF0sIFstNDAsIDVdLCBbLTUwLCA1XV1dKTtcbiAqXG4gKiAvLyBJdGVyYXRlIG92ZXIgR2VvSlNPTiBieSAyLXZlcnRleCBzZWdtZW50c1xuICogdHVyZi5zZWdtZW50UmVkdWNlKHBvbHlnb24sIGZ1bmN0aW9uIChwcmV2aW91c1NlZ21lbnQsIGN1cnJlbnRTZWdtZW50LCBmZWF0dXJlSW5kZXgsIG11bHRpRmVhdHVyZUluZGV4LCBnZW9tZXRyeUluZGV4LCBzZWdtZW50SW5kZXgpIHtcbiAqICAgLy89IHByZXZpb3VzU2VnbWVudFxuICogICAvLz0gY3VycmVudFNlZ21lbnRcbiAqICAgLy89IGZlYXR1cmVJbmRleFxuICogICAvLz0gbXVsdGlGZWF0dXJlSW5kZXhcbiAqICAgLy89IGdlb21ldHJ5SW5kZXhcbiAqICAgLy89IHNlZ21lbnRJbmRleFxuICogICByZXR1cm4gY3VycmVudFNlZ21lbnRcbiAqIH0pO1xuICpcbiAqIC8vIENhbGN1bGF0ZSB0aGUgdG90YWwgbnVtYmVyIG9mIHNlZ21lbnRzXG4gKiB2YXIgaW5pdGlhbFZhbHVlID0gMFxuICogdmFyIHRvdGFsID0gdHVyZi5zZWdtZW50UmVkdWNlKHBvbHlnb24sIGZ1bmN0aW9uIChwcmV2aW91c1ZhbHVlKSB7XG4gKiAgICAgcHJldmlvdXNWYWx1ZSsrO1xuICogICAgIHJldHVybiBwcmV2aW91c1ZhbHVlO1xuICogfSwgaW5pdGlhbFZhbHVlKTtcbiAqL1xuZnVuY3Rpb24gc2VnbWVudFJlZHVjZShnZW9qc29uLCBjYWxsYmFjaywgaW5pdGlhbFZhbHVlKSB7XG4gIHZhciBwcmV2aW91c1ZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICB2YXIgc3RhcnRlZCA9IGZhbHNlO1xuICBzZWdtZW50RWFjaChcbiAgICBnZW9qc29uLFxuICAgIGZ1bmN0aW9uIChcbiAgICAgIGN1cnJlbnRTZWdtZW50LFxuICAgICAgZmVhdHVyZUluZGV4LFxuICAgICAgbXVsdGlGZWF0dXJlSW5kZXgsXG4gICAgICBnZW9tZXRyeUluZGV4LFxuICAgICAgc2VnbWVudEluZGV4XG4gICAgKSB7XG4gICAgICBpZiAoc3RhcnRlZCA9PT0gZmFsc2UgJiYgaW5pdGlhbFZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgIHByZXZpb3VzVmFsdWUgPSBjdXJyZW50U2VnbWVudDtcbiAgICAgIGVsc2VcbiAgICAgICAgcHJldmlvdXNWYWx1ZSA9IGNhbGxiYWNrKFxuICAgICAgICAgIHByZXZpb3VzVmFsdWUsXG4gICAgICAgICAgY3VycmVudFNlZ21lbnQsXG4gICAgICAgICAgZmVhdHVyZUluZGV4LFxuICAgICAgICAgIG11bHRpRmVhdHVyZUluZGV4LFxuICAgICAgICAgIGdlb21ldHJ5SW5kZXgsXG4gICAgICAgICAgc2VnbWVudEluZGV4XG4gICAgICAgICk7XG4gICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICB9XG4gICk7XG4gIHJldHVybiBwcmV2aW91c1ZhbHVlO1xufVxuXG4vKipcbiAqIENhbGxiYWNrIGZvciBsaW5lRWFjaFxuICpcbiAqIEBjYWxsYmFjayBsaW5lRWFjaENhbGxiYWNrXG4gKiBAcGFyYW0ge0ZlYXR1cmU8TGluZVN0cmluZz59IGN1cnJlbnRMaW5lIFRoZSBjdXJyZW50IExpbmVTdHJpbmd8TGluZWFyUmluZyBiZWluZyBwcm9jZXNzZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBmZWF0dXJlSW5kZXggVGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIEZlYXR1cmUgYmVpbmcgcHJvY2Vzc2VkXG4gKiBAcGFyYW0ge251bWJlcn0gbXVsdGlGZWF0dXJlSW5kZXggVGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIE11bHRpLUZlYXR1cmUgYmVpbmcgcHJvY2Vzc2VkXG4gKiBAcGFyYW0ge251bWJlcn0gZ2VvbWV0cnlJbmRleCBUaGUgY3VycmVudCBpbmRleCBvZiB0aGUgR2VvbWV0cnkgYmVpbmcgcHJvY2Vzc2VkXG4gKi9cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgbGluZSBvciByaW5nIGNvb3JkaW5hdGVzIGluIExpbmVTdHJpbmcsIFBvbHlnb24sIE11bHRpTGluZVN0cmluZywgTXVsdGlQb2x5Z29uIEZlYXR1cmVzIG9yIEdlb21ldHJpZXMsXG4gKiBzaW1pbGFyIHRvIEFycmF5LmZvckVhY2guXG4gKlxuICogQG5hbWUgbGluZUVhY2hcbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZTxMaW5lU3RyaW5nfFBvbHlnb258TXVsdGlMaW5lU3RyaW5nfE11bHRpUG9seWdvbj59IGdlb2pzb24gb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBhIG1ldGhvZCB0aGF0IHRha2VzIChjdXJyZW50TGluZSwgZmVhdHVyZUluZGV4LCBtdWx0aUZlYXR1cmVJbmRleCwgZ2VvbWV0cnlJbmRleClcbiAqIEBleGFtcGxlXG4gKiB2YXIgbXVsdGlMaW5lID0gdHVyZi5tdWx0aUxpbmVTdHJpbmcoW1xuICogICBbWzI2LCAzN10sIFszNSwgNDVdXSxcbiAqICAgW1szNiwgNTNdLCBbMzgsIDUwXSwgWzQxLCA1NV1dXG4gKiBdKTtcbiAqXG4gKiB0dXJmLmxpbmVFYWNoKG11bHRpTGluZSwgZnVuY3Rpb24gKGN1cnJlbnRMaW5lLCBmZWF0dXJlSW5kZXgsIG11bHRpRmVhdHVyZUluZGV4LCBnZW9tZXRyeUluZGV4KSB7XG4gKiAgIC8vPWN1cnJlbnRMaW5lXG4gKiAgIC8vPWZlYXR1cmVJbmRleFxuICogICAvLz1tdWx0aUZlYXR1cmVJbmRleFxuICogICAvLz1nZW9tZXRyeUluZGV4XG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gbGluZUVhY2goZ2VvanNvbiwgY2FsbGJhY2spIHtcbiAgLy8gdmFsaWRhdGlvblxuICBpZiAoIWdlb2pzb24pIHRocm93IG5ldyBFcnJvcihcImdlb2pzb24gaXMgcmVxdWlyZWRcIik7XG5cbiAgZmxhdHRlbkVhY2goZ2VvanNvbiwgZnVuY3Rpb24gKGZlYXR1cmUsIGZlYXR1cmVJbmRleCwgbXVsdGlGZWF0dXJlSW5kZXgpIHtcbiAgICBpZiAoZmVhdHVyZS5nZW9tZXRyeSA9PT0gbnVsbCkgcmV0dXJuO1xuICAgIHZhciB0eXBlID0gZmVhdHVyZS5nZW9tZXRyeS50eXBlO1xuICAgIHZhciBjb29yZHMgPSBmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcIkxpbmVTdHJpbmdcIjpcbiAgICAgICAgaWYgKGNhbGxiYWNrKGZlYXR1cmUsIGZlYXR1cmVJbmRleCwgbXVsdGlGZWF0dXJlSW5kZXgsIDAsIDApID09PSBmYWxzZSlcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIlBvbHlnb25cIjpcbiAgICAgICAgZm9yIChcbiAgICAgICAgICB2YXIgZ2VvbWV0cnlJbmRleCA9IDA7XG4gICAgICAgICAgZ2VvbWV0cnlJbmRleCA8IGNvb3Jkcy5sZW5ndGg7XG4gICAgICAgICAgZ2VvbWV0cnlJbmRleCsrXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGNhbGxiYWNrKFxuICAgICAgICAgICAgICBsaW5lU3RyaW5nKGNvb3Jkc1tnZW9tZXRyeUluZGV4XSwgZmVhdHVyZS5wcm9wZXJ0aWVzKSxcbiAgICAgICAgICAgICAgZmVhdHVyZUluZGV4LFxuICAgICAgICAgICAgICBtdWx0aUZlYXR1cmVJbmRleCxcbiAgICAgICAgICAgICAgZ2VvbWV0cnlJbmRleFxuICAgICAgICAgICAgKSA9PT0gZmFsc2VcbiAgICAgICAgICApXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBDYWxsYmFjayBmb3IgbGluZVJlZHVjZVxuICpcbiAqIFRoZSBmaXJzdCB0aW1lIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBpcyBjYWxsZWQsIHRoZSB2YWx1ZXMgcHJvdmlkZWQgYXMgYXJndW1lbnRzIGRlcGVuZFxuICogb24gd2hldGhlciB0aGUgcmVkdWNlIG1ldGhvZCBoYXMgYW4gaW5pdGlhbFZhbHVlIGFyZ3VtZW50LlxuICpcbiAqIElmIGFuIGluaXRpYWxWYWx1ZSBpcyBwcm92aWRlZCB0byB0aGUgcmVkdWNlIG1ldGhvZDpcbiAqICAtIFRoZSBwcmV2aW91c1ZhbHVlIGFyZ3VtZW50IGlzIGluaXRpYWxWYWx1ZS5cbiAqICAtIFRoZSBjdXJyZW50VmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBlbGVtZW50IHByZXNlbnQgaW4gdGhlIGFycmF5LlxuICpcbiAqIElmIGFuIGluaXRpYWxWYWx1ZSBpcyBub3QgcHJvdmlkZWQ6XG4gKiAgLSBUaGUgcHJldmlvdXNWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKiAgLSBUaGUgY3VycmVudFZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgc2Vjb25kIGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKlxuICogQGNhbGxiYWNrIGxpbmVSZWR1Y2VDYWxsYmFja1xuICogQHBhcmFtIHsqfSBwcmV2aW91c1ZhbHVlIFRoZSBhY2N1bXVsYXRlZCB2YWx1ZSBwcmV2aW91c2x5IHJldHVybmVkIGluIHRoZSBsYXN0IGludm9jYXRpb25cbiAqIG9mIHRoZSBjYWxsYmFjaywgb3IgaW5pdGlhbFZhbHVlLCBpZiBzdXBwbGllZC5cbiAqIEBwYXJhbSB7RmVhdHVyZTxMaW5lU3RyaW5nPn0gY3VycmVudExpbmUgVGhlIGN1cnJlbnQgTGluZVN0cmluZ3xMaW5lYXJSaW5nIGJlaW5nIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmZWF0dXJlSW5kZXggVGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIEZlYXR1cmUgYmVpbmcgcHJvY2Vzc2VkXG4gKiBAcGFyYW0ge251bWJlcn0gbXVsdGlGZWF0dXJlSW5kZXggVGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIE11bHRpLUZlYXR1cmUgYmVpbmcgcHJvY2Vzc2VkXG4gKiBAcGFyYW0ge251bWJlcn0gZ2VvbWV0cnlJbmRleCBUaGUgY3VycmVudCBpbmRleCBvZiB0aGUgR2VvbWV0cnkgYmVpbmcgcHJvY2Vzc2VkXG4gKi9cblxuLyoqXG4gKiBSZWR1Y2UgZmVhdHVyZXMgaW4gYW55IEdlb0pTT04gb2JqZWN0LCBzaW1pbGFyIHRvIEFycmF5LnJlZHVjZSgpLlxuICpcbiAqIEBuYW1lIGxpbmVSZWR1Y2VcbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZTxMaW5lU3RyaW5nfFBvbHlnb258TXVsdGlMaW5lU3RyaW5nfE11bHRpUG9seWdvbj59IGdlb2pzb24gb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBhIG1ldGhvZCB0aGF0IHRha2VzIChwcmV2aW91c1ZhbHVlLCBjdXJyZW50TGluZSwgZmVhdHVyZUluZGV4LCBtdWx0aUZlYXR1cmVJbmRleCwgZ2VvbWV0cnlJbmRleClcbiAqIEBwYXJhbSB7Kn0gW2luaXRpYWxWYWx1ZV0gVmFsdWUgdG8gdXNlIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgZmlyc3QgY2FsbCBvZiB0aGUgY2FsbGJhY2suXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIHRoYXQgcmVzdWx0cyBmcm9tIHRoZSByZWR1Y3Rpb24uXG4gKiBAZXhhbXBsZVxuICogdmFyIG11bHRpUG9seSA9IHR1cmYubXVsdGlQb2x5Z29uKFtcbiAqICAgdHVyZi5wb2x5Z29uKFtbWzEyLDQ4XSxbMiw0MV0sWzI0LDM4XSxbMTIsNDhdXSwgW1s5LDQ0XSxbMTMsNDFdLFsxMyw0NV0sWzksNDRdXV0pLFxuICogICB0dXJmLnBvbHlnb24oW1tbNSwgNV0sIFswLCAwXSwgWzIsIDJdLCBbNCwgNF0sIFs1LCA1XV1dKVxuICogXSk7XG4gKlxuICogdHVyZi5saW5lUmVkdWNlKG11bHRpUG9seSwgZnVuY3Rpb24gKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRMaW5lLCBmZWF0dXJlSW5kZXgsIG11bHRpRmVhdHVyZUluZGV4LCBnZW9tZXRyeUluZGV4KSB7XG4gKiAgIC8vPXByZXZpb3VzVmFsdWVcbiAqICAgLy89Y3VycmVudExpbmVcbiAqICAgLy89ZmVhdHVyZUluZGV4XG4gKiAgIC8vPW11bHRpRmVhdHVyZUluZGV4XG4gKiAgIC8vPWdlb21ldHJ5SW5kZXhcbiAqICAgcmV0dXJuIGN1cnJlbnRMaW5lXG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gbGluZVJlZHVjZShnZW9qc29uLCBjYWxsYmFjaywgaW5pdGlhbFZhbHVlKSB7XG4gIHZhciBwcmV2aW91c1ZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICBsaW5lRWFjaChcbiAgICBnZW9qc29uLFxuICAgIGZ1bmN0aW9uIChjdXJyZW50TGluZSwgZmVhdHVyZUluZGV4LCBtdWx0aUZlYXR1cmVJbmRleCwgZ2VvbWV0cnlJbmRleCkge1xuICAgICAgaWYgKGZlYXR1cmVJbmRleCA9PT0gMCAmJiBpbml0aWFsVmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcHJldmlvdXNWYWx1ZSA9IGN1cnJlbnRMaW5lO1xuICAgICAgZWxzZVxuICAgICAgICBwcmV2aW91c1ZhbHVlID0gY2FsbGJhY2soXG4gICAgICAgICAgcHJldmlvdXNWYWx1ZSxcbiAgICAgICAgICBjdXJyZW50TGluZSxcbiAgICAgICAgICBmZWF0dXJlSW5kZXgsXG4gICAgICAgICAgbXVsdGlGZWF0dXJlSW5kZXgsXG4gICAgICAgICAgZ2VvbWV0cnlJbmRleFxuICAgICAgICApO1xuICAgIH1cbiAgKTtcbiAgcmV0dXJuIHByZXZpb3VzVmFsdWU7XG59XG5cbi8qKlxuICogRmluZHMgYSBwYXJ0aWN1bGFyIDItdmVydGV4IExpbmVTdHJpbmcgU2VnbWVudCBmcm9tIGEgR2VvSlNPTiB1c2luZyBgQHR1cmYvbWV0YWAgaW5kZXhlcy5cbiAqXG4gKiBOZWdhdGl2ZSBpbmRleGVzIGFyZSBwZXJtaXR0ZWQuXG4gKiBQb2ludCAmIE11bHRpUG9pbnQgd2lsbCBhbHdheXMgcmV0dXJuIG51bGwuXG4gKlxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbnxGZWF0dXJlfEdlb21ldHJ5fSBnZW9qc29uIEFueSBHZW9KU09OIEZlYXR1cmUgb3IgR2VvbWV0cnlcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gT3B0aW9uYWwgcGFyYW1ldGVyc1xuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmZlYXR1cmVJbmRleD0wXSBGZWF0dXJlIEluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubXVsdGlGZWF0dXJlSW5kZXg9MF0gTXVsdGktRmVhdHVyZSBJbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmdlb21ldHJ5SW5kZXg9MF0gR2VvbWV0cnkgSW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zZWdtZW50SW5kZXg9MF0gU2VnbWVudCBJbmRleFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLnByb3BlcnRpZXM9e31dIFRyYW5zbGF0ZSBQcm9wZXJ0aWVzIHRvIG91dHB1dCBMaW5lU3RyaW5nXG4gKiBAcGFyYW0ge0JCb3h9IFtvcHRpb25zLmJib3g9e31dIFRyYW5zbGF0ZSBCQm94IHRvIG91dHB1dCBMaW5lU3RyaW5nXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IFtvcHRpb25zLmlkPXt9XSBUcmFuc2xhdGUgSWQgdG8gb3V0cHV0IExpbmVTdHJpbmdcbiAqIEByZXR1cm5zIHtGZWF0dXJlPExpbmVTdHJpbmc+fSAyLXZlcnRleCBHZW9KU09OIEZlYXR1cmUgTGluZVN0cmluZ1xuICogQGV4YW1wbGVcbiAqIHZhciBtdWx0aUxpbmUgPSB0dXJmLm11bHRpTGluZVN0cmluZyhbXG4gKiAgICAgW1sxMCwgMTBdLCBbNTAsIDMwXSwgWzMwLCA0MF1dLFxuICogICAgIFtbLTEwLCAtMTBdLCBbLTUwLCAtMzBdLCBbLTMwLCAtNDBdXVxuICogXSk7XG4gKlxuICogLy8gRmlyc3QgU2VnbWVudCAoZGVmYXVsdHMgYXJlIDApXG4gKiB0dXJmLmZpbmRTZWdtZW50KG11bHRpTGluZSk7XG4gKiAvLyA9PiBGZWF0dXJlPExpbmVTdHJpbmc8W1sxMCwgMTBdLCBbNTAsIDMwXV0+PlxuICpcbiAqIC8vIEZpcnN0IFNlZ21lbnQgb2YgMm5kIE11bHRpIEZlYXR1cmVcbiAqIHR1cmYuZmluZFNlZ21lbnQobXVsdGlMaW5lLCB7bXVsdGlGZWF0dXJlSW5kZXg6IDF9KTtcbiAqIC8vID0+IEZlYXR1cmU8TGluZVN0cmluZzxbWy0xMCwgLTEwXSwgWy01MCwgLTMwXV0+PlxuICpcbiAqIC8vIExhc3QgU2VnbWVudCBvZiBMYXN0IE11bHRpIEZlYXR1cmVcbiAqIHR1cmYuZmluZFNlZ21lbnQobXVsdGlMaW5lLCB7bXVsdGlGZWF0dXJlSW5kZXg6IC0xLCBzZWdtZW50SW5kZXg6IC0xfSk7XG4gKiAvLyA9PiBGZWF0dXJlPExpbmVTdHJpbmc8W1stNTAsIC0zMF0sIFstMzAsIC00MF1dPj5cbiAqL1xuZnVuY3Rpb24gZmluZFNlZ21lbnQoZ2VvanNvbiwgb3B0aW9ucykge1xuICAvLyBPcHRpb25hbCBQYXJhbWV0ZXJzXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZiAoIWlzT2JqZWN0KG9wdGlvbnMpKSB0aHJvdyBuZXcgRXJyb3IoXCJvcHRpb25zIGlzIGludmFsaWRcIik7XG4gIHZhciBmZWF0dXJlSW5kZXggPSBvcHRpb25zLmZlYXR1cmVJbmRleCB8fCAwO1xuICB2YXIgbXVsdGlGZWF0dXJlSW5kZXggPSBvcHRpb25zLm11bHRpRmVhdHVyZUluZGV4IHx8IDA7XG4gIHZhciBnZW9tZXRyeUluZGV4ID0gb3B0aW9ucy5nZW9tZXRyeUluZGV4IHx8IDA7XG4gIHZhciBzZWdtZW50SW5kZXggPSBvcHRpb25zLnNlZ21lbnRJbmRleCB8fCAwO1xuXG4gIC8vIEZpbmQgRmVhdHVyZUluZGV4XG4gIHZhciBwcm9wZXJ0aWVzID0gb3B0aW9ucy5wcm9wZXJ0aWVzO1xuICB2YXIgZ2VvbWV0cnk7XG5cbiAgc3dpdGNoIChnZW9qc29uLnR5cGUpIHtcbiAgICBjYXNlIFwiRmVhdHVyZUNvbGxlY3Rpb25cIjpcbiAgICAgIGlmIChmZWF0dXJlSW5kZXggPCAwKVxuICAgICAgICBmZWF0dXJlSW5kZXggPSBnZW9qc29uLmZlYXR1cmVzLmxlbmd0aCArIGZlYXR1cmVJbmRleDtcbiAgICAgIHByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzIHx8IGdlb2pzb24uZmVhdHVyZXNbZmVhdHVyZUluZGV4XS5wcm9wZXJ0aWVzO1xuICAgICAgZ2VvbWV0cnkgPSBnZW9qc29uLmZlYXR1cmVzW2ZlYXR1cmVJbmRleF0uZ2VvbWV0cnk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiRmVhdHVyZVwiOlxuICAgICAgcHJvcGVydGllcyA9IHByb3BlcnRpZXMgfHwgZ2VvanNvbi5wcm9wZXJ0aWVzO1xuICAgICAgZ2VvbWV0cnkgPSBnZW9qc29uLmdlb21ldHJ5O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlBvaW50XCI6XG4gICAgY2FzZSBcIk11bHRpUG9pbnRcIjpcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgXCJMaW5lU3RyaW5nXCI6XG4gICAgY2FzZSBcIlBvbHlnb25cIjpcbiAgICBjYXNlIFwiTXVsdGlMaW5lU3RyaW5nXCI6XG4gICAgY2FzZSBcIk11bHRpUG9seWdvblwiOlxuICAgICAgZ2VvbWV0cnkgPSBnZW9qc29uO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImdlb2pzb24gaXMgaW52YWxpZFwiKTtcbiAgfVxuXG4gIC8vIEZpbmQgU2VnbWVudEluZGV4XG4gIGlmIChnZW9tZXRyeSA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gIHZhciBjb29yZHMgPSBnZW9tZXRyeS5jb29yZGluYXRlcztcbiAgc3dpdGNoIChnZW9tZXRyeS50eXBlKSB7XG4gICAgY2FzZSBcIlBvaW50XCI6XG4gICAgY2FzZSBcIk11bHRpUG9pbnRcIjpcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgXCJMaW5lU3RyaW5nXCI6XG4gICAgICBpZiAoc2VnbWVudEluZGV4IDwgMCkgc2VnbWVudEluZGV4ID0gY29vcmRzLmxlbmd0aCArIHNlZ21lbnRJbmRleCAtIDE7XG4gICAgICByZXR1cm4gbGluZVN0cmluZyhcbiAgICAgICAgW2Nvb3Jkc1tzZWdtZW50SW5kZXhdLCBjb29yZHNbc2VnbWVudEluZGV4ICsgMV1dLFxuICAgICAgICBwcm9wZXJ0aWVzLFxuICAgICAgICBvcHRpb25zXG4gICAgICApO1xuICAgIGNhc2UgXCJQb2x5Z29uXCI6XG4gICAgICBpZiAoZ2VvbWV0cnlJbmRleCA8IDApIGdlb21ldHJ5SW5kZXggPSBjb29yZHMubGVuZ3RoICsgZ2VvbWV0cnlJbmRleDtcbiAgICAgIGlmIChzZWdtZW50SW5kZXggPCAwKVxuICAgICAgICBzZWdtZW50SW5kZXggPSBjb29yZHNbZ2VvbWV0cnlJbmRleF0ubGVuZ3RoICsgc2VnbWVudEluZGV4IC0gMTtcbiAgICAgIHJldHVybiBsaW5lU3RyaW5nKFxuICAgICAgICBbXG4gICAgICAgICAgY29vcmRzW2dlb21ldHJ5SW5kZXhdW3NlZ21lbnRJbmRleF0sXG4gICAgICAgICAgY29vcmRzW2dlb21ldHJ5SW5kZXhdW3NlZ21lbnRJbmRleCArIDFdLFxuICAgICAgICBdLFxuICAgICAgICBwcm9wZXJ0aWVzLFxuICAgICAgICBvcHRpb25zXG4gICAgICApO1xuICAgIGNhc2UgXCJNdWx0aUxpbmVTdHJpbmdcIjpcbiAgICAgIGlmIChtdWx0aUZlYXR1cmVJbmRleCA8IDApXG4gICAgICAgIG11bHRpRmVhdHVyZUluZGV4ID0gY29vcmRzLmxlbmd0aCArIG11bHRpRmVhdHVyZUluZGV4O1xuICAgICAgaWYgKHNlZ21lbnRJbmRleCA8IDApXG4gICAgICAgIHNlZ21lbnRJbmRleCA9IGNvb3Jkc1ttdWx0aUZlYXR1cmVJbmRleF0ubGVuZ3RoICsgc2VnbWVudEluZGV4IC0gMTtcbiAgICAgIHJldHVybiBsaW5lU3RyaW5nKFxuICAgICAgICBbXG4gICAgICAgICAgY29vcmRzW211bHRpRmVhdHVyZUluZGV4XVtzZWdtZW50SW5kZXhdLFxuICAgICAgICAgIGNvb3Jkc1ttdWx0aUZlYXR1cmVJbmRleF1bc2VnbWVudEluZGV4ICsgMV0sXG4gICAgICAgIF0sXG4gICAgICAgIHByb3BlcnRpZXMsXG4gICAgICAgIG9wdGlvbnNcbiAgICAgICk7XG4gICAgY2FzZSBcIk11bHRpUG9seWdvblwiOlxuICAgICAgaWYgKG11bHRpRmVhdHVyZUluZGV4IDwgMClcbiAgICAgICAgbXVsdGlGZWF0dXJlSW5kZXggPSBjb29yZHMubGVuZ3RoICsgbXVsdGlGZWF0dXJlSW5kZXg7XG4gICAgICBpZiAoZ2VvbWV0cnlJbmRleCA8IDApXG4gICAgICAgIGdlb21ldHJ5SW5kZXggPSBjb29yZHNbbXVsdGlGZWF0dXJlSW5kZXhdLmxlbmd0aCArIGdlb21ldHJ5SW5kZXg7XG4gICAgICBpZiAoc2VnbWVudEluZGV4IDwgMClcbiAgICAgICAgc2VnbWVudEluZGV4ID1cbiAgICAgICAgICBjb29yZHNbbXVsdGlGZWF0dXJlSW5kZXhdW2dlb21ldHJ5SW5kZXhdLmxlbmd0aCAtIHNlZ21lbnRJbmRleCAtIDE7XG4gICAgICByZXR1cm4gbGluZVN0cmluZyhcbiAgICAgICAgW1xuICAgICAgICAgIGNvb3Jkc1ttdWx0aUZlYXR1cmVJbmRleF1bZ2VvbWV0cnlJbmRleF1bc2VnbWVudEluZGV4XSxcbiAgICAgICAgICBjb29yZHNbbXVsdGlGZWF0dXJlSW5kZXhdW2dlb21ldHJ5SW5kZXhdW3NlZ21lbnRJbmRleCArIDFdLFxuICAgICAgICBdLFxuICAgICAgICBwcm9wZXJ0aWVzLFxuICAgICAgICBvcHRpb25zXG4gICAgICApO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcImdlb2pzb24gaXMgaW52YWxpZFwiKTtcbn1cblxuLyoqXG4gKiBGaW5kcyBhIHBhcnRpY3VsYXIgUG9pbnQgZnJvbSBhIEdlb0pTT04gdXNpbmcgYEB0dXJmL21ldGFgIGluZGV4ZXMuXG4gKlxuICogTmVnYXRpdmUgaW5kZXhlcyBhcmUgcGVybWl0dGVkLlxuICpcbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb258RmVhdHVyZXxHZW9tZXRyeX0gZ2VvanNvbiBBbnkgR2VvSlNPTiBGZWF0dXJlIG9yIEdlb21ldHJ5XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5mZWF0dXJlSW5kZXg9MF0gRmVhdHVyZSBJbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm11bHRpRmVhdHVyZUluZGV4PTBdIE11bHRpLUZlYXR1cmUgSW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5nZW9tZXRyeUluZGV4PTBdIEdlb21ldHJ5IEluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuY29vcmRJbmRleD0wXSBDb29yZCBJbmRleFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLnByb3BlcnRpZXM9e31dIFRyYW5zbGF0ZSBQcm9wZXJ0aWVzIHRvIG91dHB1dCBQb2ludFxuICogQHBhcmFtIHtCQm94fSBbb3B0aW9ucy5iYm94PXt9XSBUcmFuc2xhdGUgQkJveCB0byBvdXRwdXQgUG9pbnRcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gW29wdGlvbnMuaWQ9e31dIFRyYW5zbGF0ZSBJZCB0byBvdXRwdXQgUG9pbnRcbiAqIEByZXR1cm5zIHtGZWF0dXJlPFBvaW50Pn0gMi12ZXJ0ZXggR2VvSlNPTiBGZWF0dXJlIFBvaW50XG4gKiBAZXhhbXBsZVxuICogdmFyIG11bHRpTGluZSA9IHR1cmYubXVsdGlMaW5lU3RyaW5nKFtcbiAqICAgICBbWzEwLCAxMF0sIFs1MCwgMzBdLCBbMzAsIDQwXV0sXG4gKiAgICAgW1stMTAsIC0xMF0sIFstNTAsIC0zMF0sIFstMzAsIC00MF1dXG4gKiBdKTtcbiAqXG4gKiAvLyBGaXJzdCBTZWdtZW50IChkZWZhdWx0cyBhcmUgMClcbiAqIHR1cmYuZmluZFBvaW50KG11bHRpTGluZSk7XG4gKiAvLyA9PiBGZWF0dXJlPFBvaW50PFsxMCwgMTBdPj5cbiAqXG4gKiAvLyBGaXJzdCBTZWdtZW50IG9mIHRoZSAybmQgTXVsdGktRmVhdHVyZVxuICogdHVyZi5maW5kUG9pbnQobXVsdGlMaW5lLCB7bXVsdGlGZWF0dXJlSW5kZXg6IDF9KTtcbiAqIC8vID0+IEZlYXR1cmU8UG9pbnQ8Wy0xMCwgLTEwXT4+XG4gKlxuICogLy8gTGFzdCBTZWdtZW50IG9mIGxhc3QgTXVsdGktRmVhdHVyZVxuICogdHVyZi5maW5kUG9pbnQobXVsdGlMaW5lLCB7bXVsdGlGZWF0dXJlSW5kZXg6IC0xLCBjb29yZEluZGV4OiAtMX0pO1xuICogLy8gPT4gRmVhdHVyZTxQb2ludDxbLTMwLCAtNDBdPj5cbiAqL1xuZnVuY3Rpb24gZmluZFBvaW50KGdlb2pzb24sIG9wdGlvbnMpIHtcbiAgLy8gT3B0aW9uYWwgUGFyYW1ldGVyc1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgaWYgKCFpc09iamVjdChvcHRpb25zKSkgdGhyb3cgbmV3IEVycm9yKFwib3B0aW9ucyBpcyBpbnZhbGlkXCIpO1xuICB2YXIgZmVhdHVyZUluZGV4ID0gb3B0aW9ucy5mZWF0dXJlSW5kZXggfHwgMDtcbiAgdmFyIG11bHRpRmVhdHVyZUluZGV4ID0gb3B0aW9ucy5tdWx0aUZlYXR1cmVJbmRleCB8fCAwO1xuICB2YXIgZ2VvbWV0cnlJbmRleCA9IG9wdGlvbnMuZ2VvbWV0cnlJbmRleCB8fCAwO1xuICB2YXIgY29vcmRJbmRleCA9IG9wdGlvbnMuY29vcmRJbmRleCB8fCAwO1xuXG4gIC8vIEZpbmQgRmVhdHVyZUluZGV4XG4gIHZhciBwcm9wZXJ0aWVzID0gb3B0aW9ucy5wcm9wZXJ0aWVzO1xuICB2YXIgZ2VvbWV0cnk7XG5cbiAgc3dpdGNoIChnZW9qc29uLnR5cGUpIHtcbiAgICBjYXNlIFwiRmVhdHVyZUNvbGxlY3Rpb25cIjpcbiAgICAgIGlmIChmZWF0dXJlSW5kZXggPCAwKVxuICAgICAgICBmZWF0dXJlSW5kZXggPSBnZW9qc29uLmZlYXR1cmVzLmxlbmd0aCArIGZlYXR1cmVJbmRleDtcbiAgICAgIHByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzIHx8IGdlb2pzb24uZmVhdHVyZXNbZmVhdHVyZUluZGV4XS5wcm9wZXJ0aWVzO1xuICAgICAgZ2VvbWV0cnkgPSBnZW9qc29uLmZlYXR1cmVzW2ZlYXR1cmVJbmRleF0uZ2VvbWV0cnk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiRmVhdHVyZVwiOlxuICAgICAgcHJvcGVydGllcyA9IHByb3BlcnRpZXMgfHwgZ2VvanNvbi5wcm9wZXJ0aWVzO1xuICAgICAgZ2VvbWV0cnkgPSBnZW9qc29uLmdlb21ldHJ5O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlBvaW50XCI6XG4gICAgY2FzZSBcIk11bHRpUG9pbnRcIjpcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgXCJMaW5lU3RyaW5nXCI6XG4gICAgY2FzZSBcIlBvbHlnb25cIjpcbiAgICBjYXNlIFwiTXVsdGlMaW5lU3RyaW5nXCI6XG4gICAgY2FzZSBcIk11bHRpUG9seWdvblwiOlxuICAgICAgZ2VvbWV0cnkgPSBnZW9qc29uO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImdlb2pzb24gaXMgaW52YWxpZFwiKTtcbiAgfVxuXG4gIC8vIEZpbmQgQ29vcmQgSW5kZXhcbiAgaWYgKGdlb21ldHJ5ID09PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgdmFyIGNvb3JkcyA9IGdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICBzd2l0Y2ggKGdlb21ldHJ5LnR5cGUpIHtcbiAgICBjYXNlIFwiUG9pbnRcIjpcbiAgICAgIHJldHVybiBwb2ludChjb29yZHMsIHByb3BlcnRpZXMsIG9wdGlvbnMpO1xuICAgIGNhc2UgXCJNdWx0aVBvaW50XCI6XG4gICAgICBpZiAobXVsdGlGZWF0dXJlSW5kZXggPCAwKVxuICAgICAgICBtdWx0aUZlYXR1cmVJbmRleCA9IGNvb3Jkcy5sZW5ndGggKyBtdWx0aUZlYXR1cmVJbmRleDtcbiAgICAgIHJldHVybiBwb2ludChjb29yZHNbbXVsdGlGZWF0dXJlSW5kZXhdLCBwcm9wZXJ0aWVzLCBvcHRpb25zKTtcbiAgICBjYXNlIFwiTGluZVN0cmluZ1wiOlxuICAgICAgaWYgKGNvb3JkSW5kZXggPCAwKSBjb29yZEluZGV4ID0gY29vcmRzLmxlbmd0aCArIGNvb3JkSW5kZXg7XG4gICAgICByZXR1cm4gcG9pbnQoY29vcmRzW2Nvb3JkSW5kZXhdLCBwcm9wZXJ0aWVzLCBvcHRpb25zKTtcbiAgICBjYXNlIFwiUG9seWdvblwiOlxuICAgICAgaWYgKGdlb21ldHJ5SW5kZXggPCAwKSBnZW9tZXRyeUluZGV4ID0gY29vcmRzLmxlbmd0aCArIGdlb21ldHJ5SW5kZXg7XG4gICAgICBpZiAoY29vcmRJbmRleCA8IDApXG4gICAgICAgIGNvb3JkSW5kZXggPSBjb29yZHNbZ2VvbWV0cnlJbmRleF0ubGVuZ3RoICsgY29vcmRJbmRleDtcbiAgICAgIHJldHVybiBwb2ludChjb29yZHNbZ2VvbWV0cnlJbmRleF1bY29vcmRJbmRleF0sIHByb3BlcnRpZXMsIG9wdGlvbnMpO1xuICAgIGNhc2UgXCJNdWx0aUxpbmVTdHJpbmdcIjpcbiAgICAgIGlmIChtdWx0aUZlYXR1cmVJbmRleCA8IDApXG4gICAgICAgIG11bHRpRmVhdHVyZUluZGV4ID0gY29vcmRzLmxlbmd0aCArIG11bHRpRmVhdHVyZUluZGV4O1xuICAgICAgaWYgKGNvb3JkSW5kZXggPCAwKVxuICAgICAgICBjb29yZEluZGV4ID0gY29vcmRzW211bHRpRmVhdHVyZUluZGV4XS5sZW5ndGggKyBjb29yZEluZGV4O1xuICAgICAgcmV0dXJuIHBvaW50KGNvb3Jkc1ttdWx0aUZlYXR1cmVJbmRleF1bY29vcmRJbmRleF0sIHByb3BlcnRpZXMsIG9wdGlvbnMpO1xuICAgIGNhc2UgXCJNdWx0aVBvbHlnb25cIjpcbiAgICAgIGlmIChtdWx0aUZlYXR1cmVJbmRleCA8IDApXG4gICAgICAgIG11bHRpRmVhdHVyZUluZGV4ID0gY29vcmRzLmxlbmd0aCArIG11bHRpRmVhdHVyZUluZGV4O1xuICAgICAgaWYgKGdlb21ldHJ5SW5kZXggPCAwKVxuICAgICAgICBnZW9tZXRyeUluZGV4ID0gY29vcmRzW211bHRpRmVhdHVyZUluZGV4XS5sZW5ndGggKyBnZW9tZXRyeUluZGV4O1xuICAgICAgaWYgKGNvb3JkSW5kZXggPCAwKVxuICAgICAgICBjb29yZEluZGV4ID1cbiAgICAgICAgICBjb29yZHNbbXVsdGlGZWF0dXJlSW5kZXhdW2dlb21ldHJ5SW5kZXhdLmxlbmd0aCAtIGNvb3JkSW5kZXg7XG4gICAgICByZXR1cm4gcG9pbnQoXG4gICAgICAgIGNvb3Jkc1ttdWx0aUZlYXR1cmVJbmRleF1bZ2VvbWV0cnlJbmRleF1bY29vcmRJbmRleF0sXG4gICAgICAgIHByb3BlcnRpZXMsXG4gICAgICAgIG9wdGlvbnNcbiAgICAgICk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFwiZ2VvanNvbiBpcyBpbnZhbGlkXCIpO1xufVxuXG5leHBvcnQgeyBjb29yZEFsbCwgY29vcmRFYWNoLCBjb29yZFJlZHVjZSwgZmVhdHVyZUVhY2gsIGZlYXR1cmVSZWR1Y2UsIGZpbmRQb2ludCwgZmluZFNlZ21lbnQsIGZsYXR0ZW5FYWNoLCBmbGF0dGVuUmVkdWNlLCBnZW9tRWFjaCwgZ2VvbVJlZHVjZSwgbGluZUVhY2gsIGxpbmVSZWR1Y2UsIHByb3BFYWNoLCBwcm9wUmVkdWNlLCBzZWdtZW50RWFjaCwgc2VnbWVudFJlZHVjZSB9O1xuIiwiaW1wb3J0IE1hcGJveEdsRHJhdyBmcm9tICdAbWFwYm94L21hcGJveC1nbC1kcmF3JztcbmltcG9ydCBzaW1wbGlmeSBmcm9tIFwiQHR1cmYvc2ltcGxpZnlcIjtcbmNvbnN0IHtcbiAgICBnZW9qc29uVHlwZXMsIGN1cnNvcnMsIHR5cGVzLCB1cGRhdGVBY3Rpb25zLCBtb2RlcywgZXZlbnRzXG59ID0gTWFwYm94R2xEcmF3LmNvbnN0YW50cztcblxuY29uc3QgRnJlZWhhbmRNb2RlID0gT2JqZWN0LmFzc2lnbih7fSwgTWFwYm94R2xEcmF3Lm1vZGVzLmRyYXdfcG9seWdvbilcbkZyZWVoYW5kTW9kZS5vblNldHVwID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgcG9seWdvbiA9IHRoaXMubmV3RmVhdHVyZSh7XG4gICAgICAgIHR5cGU6IGdlb2pzb25UeXBlcy5GRUFUVVJFLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgZ2VvbWV0cnk6IHtcbiAgICAgICAgICAgIHR5cGU6IGdlb2pzb25UeXBlcy5QT0xZR09OLFxuICAgICAgICAgICAgY29vcmRpbmF0ZXM6IFtbXV1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5hZGRGZWF0dXJlKHBvbHlnb24pO1xuICAgIHRoaXMuY2xlYXJTZWxlY3RlZEZlYXR1cmVzKCk7XG4gICAgXG4gICAgLy8gZGlzYWJsZSBkcmFnUGFuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5tYXAgfHwgIXRoaXMubWFwLmRyYWdQYW4pIHJldHVybjtcbiAgICAgICAgdGhpcy5tYXAuZHJhZ1Bhbi5kaXNhYmxlKCk7XG4gICAgfSwgMCk7XG5cbiAgICB0aGlzLnVwZGF0ZVVJQ2xhc3Nlcyh7IG1vdXNlOiBjdXJzb3JzLkFERCB9KTtcbiAgICB0aGlzLmFjdGl2YXRlVUlCdXR0b24odHlwZXMuUE9MWUdPTik7XG4gICAgdGhpcy5zZXRBY3Rpb25hYmxlU3RhdGUoe1xuICAgICAgICB0cmFzaDogdHJ1ZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcG9seWdvbixcbiAgICAgICAgY3VycmVudFZlcnRleFBvc2l0aW9uOiAwLFxuICAgICAgICBkcmFnTW92aW5nOiBmYWxzZVxuICAgIH07XG59O1xuXG5GcmVlaGFuZE1vZGUub25EcmFnID0gRnJlZWhhbmRNb2RlLm9uVG91Y2hNb3ZlID0gZnVuY3Rpb24gKHN0YXRlLCBlKXtcbiAgICBzdGF0ZS5kcmFnTW92aW5nID0gdHJ1ZTtcbiAgICB0aGlzLnVwZGF0ZVVJQ2xhc3Nlcyh7IG1vdXNlOiBjdXJzb3JzLkFERCB9KTtcbiAgICBzdGF0ZS5wb2x5Z29uLnVwZGF0ZUNvb3JkaW5hdGUoYDAuJHtzdGF0ZS5jdXJyZW50VmVydGV4UG9zaXRpb259YCwgZS5sbmdMYXQubG5nLCBlLmxuZ0xhdC5sYXQpO1xuICAgIHN0YXRlLmN1cnJlbnRWZXJ0ZXhQb3NpdGlvbisrO1xuICAgIHN0YXRlLnBvbHlnb24udXBkYXRlQ29vcmRpbmF0ZShgMC4ke3N0YXRlLmN1cnJlbnRWZXJ0ZXhQb3NpdGlvbn1gLCBlLmxuZ0xhdC5sbmcsIGUubG5nTGF0LmxhdCk7XG59XG5cbkZyZWVoYW5kTW9kZS5vbk1vdXNlVXAgPSBmdW5jdGlvbiAoc3RhdGUsIGUpe1xuICAgIGlmIChzdGF0ZS5kcmFnTW92aW5nKSB7XG4gICAgICAgIHRoaXMuc2ltcGxpZnkoc3RhdGUucG9seWdvbik7XG4gICAgICAgIHRoaXMuZmlyZVVwZGF0ZSgpO1xuICAgICAgICB0aGlzLmNoYW5nZU1vZGUobW9kZXMuU0lNUExFX1NFTEVDVCwgeyBmZWF0dXJlSWRzOiBbc3RhdGUucG9seWdvbi5pZF0gfSk7XG4gICAgfVxufVxuXG5GcmVlaGFuZE1vZGUub25Ub3VjaEVuZCA9IGZ1bmN0aW9uKHN0YXRlLCBlKSB7XG4gICAgdGhpcy5vbk1vdXNlVXAoc3RhdGUsIGUpXG59XG5cbkZyZWVoYW5kTW9kZS5maXJlVXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5tYXAuZmlyZShldmVudHMuVVBEQVRFLCB7XG4gICAgICAgIGFjdGlvbjogdXBkYXRlQWN0aW9ucy5NT1ZFLFxuICAgICAgICBmZWF0dXJlczogdGhpcy5nZXRTZWxlY3RlZCgpLm1hcChmID0+IGYudG9HZW9KU09OKCkpXG4gICAgfSk7XG59O1xuXG5GcmVlaGFuZE1vZGUuc2ltcGxpZnkgPSBmdW5jdGlvbihwb2x5Z29uKSB7XG4gICAgY29uc3QgdG9sZXJhbmNlID0gMSAvIE1hdGgucG93KDEuMDUsIDEwICogdGhpcy5tYXAuZ2V0Wm9vbSgpKSAvLyBodHRwczovL3d3dy5kZXNtb3MuY29tL2NhbGN1bGF0b3Ivbm9scDBnNnB3clxuICAgIHNpbXBsaWZ5KHBvbHlnb24sIHtcbiAgICAgICAgbXV0YXRlOiB0cnVlLFxuICAgICAgICB0b2xlcmFuY2U6IHRvbGVyYW5jZSxcbiAgICAgICAgaGlnaFF1YWxpdHk6IHRydWVcbiAgICB9KTtcbn1cblxuRnJlZWhhbmRNb2RlLmZpcmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuZmlyZVxufVxuXG5GcmVlaGFuZE1vZGUub25TdG9wID0gZnVuY3Rpb24gKHN0YXRlLCAuLi5hcmdzKSB7XG4gICAgTWFwYm94R2xEcmF3Lm1vZGVzLmRyYXdfcG9seWdvbi5vblN0b3AuY2FsbCh0aGlzLCBzdGF0ZSwgLi4uYXJncylcbiAgICBcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLm1hcCB8fCAhdGhpcy5tYXAuZHJhZ1BhbikgcmV0dXJuO1xuICAgICAgICB0aGlzLm1hcC5kcmFnUGFuLmVuYWJsZSgpO1xuICAgIH0sIDApO1xufTtcbiAgXG5leHBvcnQgZGVmYXVsdCBGcmVlaGFuZE1vZGVcbiIsImltcG9ydCBGcmVlaGFuZE1vZGUgZnJvbSAnLi4vc3JjL2luZGV4LmpzJztcblxubWFwYm94Z2wuYWNjZXNzVG9rZW4gPSAncGsuZXlKMUlqb2lZbVZ1WldodGEyVWlMQ0poSWpvaVkyMWhlbWx0YTNWbE1HeGhPVEpxY0hCa2QzSTVkWFpuYWlKOS5Oem9uVkQ5bDM5WFBZSWtJZnlGaTl3JztcbiAgdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoe1xuICBjb250YWluZXI6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAnKSxcbiAgc3R5bGU6ICdtYXBib3g6Ly9zdHlsZXMvbWFwYm94L3N0cmVldHMtdjExJyxcbiAgY2VudGVyOiBbLTk0LjczNzIzNiwgXHQzMi41MTQ4ODVdLFxuICB6b29tOiAxMlxufSk7XG5cbnZhciBEcmF3ID0gbmV3IE1hcGJveERyYXcoe1xuICBtb2RlczogT2JqZWN0LmFzc2lnbihNYXBib3hEcmF3Lm1vZGVzLCB7XG4gICAgZHJhd19wb2x5Z29uOiBGcmVlaGFuZE1vZGVcbiAgfSlcbn0pO1xuXG5tYXAuYWRkQ29udHJvbChEcmF3LCAndG9wLWxlZnQnKTtcbm1hcC5vbignZHJhdy5jcmVhdGUnLCBnZW9qc29uRnJvbURyYXdpbmcpO1xuZnVuY3Rpb24gZ2VvanNvbkZyb21EcmF3aW5nKCl7XG4gICAgY29uc29sZS5sb2coYXJndW1lbnRzLCBEcmF3LmdldEFsbCgpKTtcbn0iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImVxdWFsIiwiYSIsImIiLCJjb25zdHJ1Y3RvciIsImxlbmd0aCIsImkiLCJrZXlzIiwiQXJyYXkiLCJpc0FycmF5IiwiUmVnRXhwIiwic291cmNlIiwiZmxhZ3MiLCJ2YWx1ZU9mIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJrZXkiLCJnaiIsInR5cGUiLCJ0eXBlcyIsImZlYXR1cmVzIiwicHJvcGVydGllcyIsImdlb21ldHJ5IiwiUG9pbnQiLCJNdWx0aVBvaW50IiwiTGluZVN0cmluZyIsIk11bHRpTGluZVN0cmluZyIsIlBvbHlnb24iLCJNdWx0aVBvbHlnb24iLCJHZW9tZXRyeUNvbGxlY3Rpb24iLCJGZWF0dXJlIiwiRmVhdHVyZUNvbGxlY3Rpb24iLCJSQURJVVMiLCJGTEFUVEVOSU5HIiwiUE9MQVJfUkFESVVTIiwid2dzODQiLCJwb2x5Z29uQXJlYSIsImNvb3JkcyIsImFyZWEiLCJNYXRoIiwiYWJzIiwicmluZ0FyZWEiLCJwMSIsInAyIiwibG93ZXJJbmRleCIsIm1pZGRsZUluZGV4IiwidXBwZXJJbmRleCIsImNvb3Jkc0xlbmd0aCIsInJhZCIsInNpbiIsIl8iLCJQSSIsImNvb3JkaW5hdGVzIiwiZ2VvbWV0cmllcyIsInJpbmciLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZCIsImRlZmluaXRpb24iLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwibW9kZSIsIkRyYXdDb250ZXh0IiwiaGFuZGxlcnMiLCJkcmFnIiwiY2xpY2siLCJtb3VzZW1vdmUiLCJtb3VzZWRvd24iLCJtb3VzZXVwIiwibW91c2VvdXQiLCJrZXlkb3duIiwia2V5dXAiLCJ0b3VjaHN0YXJ0IiwidG91Y2htb3ZlIiwidG91Y2hlbmQiLCJ0YXAiLCJjdHgiLCJvbiIsImV2ZW50Iiwic2VsZWN0b3IiLCJmbiIsIkVycm9yIiwicHVzaCIsInJlbmRlciIsImlkIiwic3RvcmUiLCJmZWF0dXJlQ2hhbmdlZCIsImRlbGVnYXRlIiwiZXZlbnROYW1lIiwiaGFuZGxlcyIsImlIYW5kbGUiLCJoYW5kbGUiLCJ1aSIsInVwZGF0ZU1hcENsYXNzZXMiLCJzdGFydCIsInN0b3AiLCJ0cmFzaCIsImNvbWJpbmVGZWF0dXJlcyIsInVuY29tYmluZUZlYXR1cmVzIiwiY2xhc3NlcyIsIkNBTlZBUyIsIkNPTlRST0xfQkFTRSIsIkNPTlRST0xfUFJFRklYIiwiQ09OVFJPTF9CVVRUT04iLCJDT05UUk9MX0JVVFRPTl9MSU5FIiwiQ09OVFJPTF9CVVRUT05fUE9MWUdPTiIsIkNPTlRST0xfQlVUVE9OX1BPSU5UIiwiQ09OVFJPTF9CVVRUT05fVFJBU0giLCJDT05UUk9MX0JVVFRPTl9DT01CSU5FX0ZFQVRVUkVTIiwiQ09OVFJPTF9CVVRUT05fVU5DT01CSU5FX0ZFQVRVUkVTIiwiQ09OVFJPTF9HUk9VUCIsIkFUVFJJQlVUSU9OIiwiQUNUSVZFX0JVVFRPTiIsIkJPWF9TRUxFQ1QiLCJzb3VyY2VzIiwiSE9UIiwiQ09MRCIsImN1cnNvcnMiLCJBREQiLCJNT1ZFIiwiRFJBRyIsIlBPSU5URVIiLCJOT05FIiwiUE9MWUdPTiIsIkxJTkUiLCJQT0lOVCIsImdlb2pzb25UeXBlcyIsIkZFQVRVUkUiLCJMSU5FX1NUUklORyIsIkZFQVRVUkVfQ09MTEVDVElPTiIsIk1VTFRJX1BSRUZJWCIsIk1VTFRJX1BPSU5UIiwiTVVMVElfTElORV9TVFJJTkciLCJNVUxUSV9QT0xZR09OIiwiRFJBV19MSU5FX1NUUklORyIsIkRSQVdfUE9MWUdPTiIsIkRSQVdfUE9JTlQiLCJTSU1QTEVfU0VMRUNUIiwiRElSRUNUX1NFTEVDVCIsIkNSRUFURSIsIkRFTEVURSIsIlVQREFURSIsIlNFTEVDVElPTl9DSEFOR0UiLCJNT0RFX0NIQU5HRSIsIkFDVElPTkFCTEUiLCJSRU5ERVIiLCJDT01CSU5FX0ZFQVRVUkVTIiwiVU5DT01CSU5FX0ZFQVRVUkVTIiwidXBkYXRlQWN0aW9ucyIsIkNIQU5HRV9QUk9QRVJUSUVTIiwiQ0hBTkdFX0NPT1JESU5BVEVTIiwibWV0YSIsIk1JRFBPSU5UIiwiVkVSVEVYIiwiYWN0aXZlU3RhdGVzIiwiQUNUSVZFIiwiSU5BQ1RJVkUiLCJpbnRlcmFjdGlvbnMiLCJMQVRfTUlOIiwiTEFUX1JFTkRFUkVEX01JTiIsIkxBVF9NQVgiLCJMQVRfUkVOREVSRURfTUFYIiwiTE5HX01JTiIsIkxOR19NQVgiLCJGRUFUVVJFX1NPUlRfUkFOS1MiLCJjb21wYXJhdG9yIiwic2NvcmUiLCJtYXAiLCJmZWF0dXJlIiwicHJvcGVydHkiLCJzb3J0IiwibWFwRXZlbnQiLCJidWZmZXIiLCJwb2ludCIsIngiLCJ5IiwiU3RyaW5nU2V0IiwiaXRlbXMiLCJ0aGlzIiwiX2l0ZW1zIiwiX251bXMiLCJfbGVuZ3RoIiwibCIsImFkZCIsImhhcyIsImRlbGV0ZSIsInZhbHVlcyIsImZvckVhY2giLCJrIiwidiIsIkpTT04iLCJwYXJzZSIsImNsZWFyIiwiTUVUQV9UWVBFUyIsImJib3giLCJmZWF0dXJlc0F0Iiwib3B0aW9ucyIsImNsaWNrQnVmZmVyIiwidG91Y2giLCJ0b3VjaEJ1ZmZlciIsImJveCIsInF1ZXJ5UGFyYW1zIiwic3R5bGVzIiwibGF5ZXJzIiwicyIsImZpbHRlciIsImdldExheWVyIiwicXVlcnlSZW5kZXJlZEZlYXR1cmVzIiwiaW5kZXhPZiIsImZlYXR1cmVJZHMiLCJ1bmlxdWVGZWF0dXJlcyIsImZlYXR1cmVJZCIsImdldEZlYXR1cmVBdEFuZFNldEN1cnNvcnMiLCJtb3VzZSIsImFjdGl2ZSIsImV2ZW50cyIsImN1cnJlbnRNb2RlTmFtZSIsInF1ZXVlTWFwQ2xhc3NlcyIsInNxcnQiLCJGSU5FX1RPTEVSQU5DRSIsIkdST1NTX1RPTEVSQU5DRSIsIklOVEVSVkFMIiwiaXNDbGljayIsImVuZCIsImZpbmVUb2xlcmFuY2UiLCJncm9zc1RvbGVyYW5jZSIsImludGVydmFsIiwidGltZSIsIm1vdmVEaXN0YW5jZSIsIlRBUF9UT0xFUkFOQ0UiLCJUQVBfSU5URVJWQUwiLCJpc1RhcCIsInRvbGVyYW5jZSIsImFscGhhYmV0IiwiZGVmYXVsdFNpemUiLCJzaXplIiwicmFuZG9tIiwiY3VzdG9tQWxwaGFiZXQiLCJnZW5lcmF0ZUlEIiwiZ2VvanNvbiIsImNoYW5nZWQiLCJpbmNvbWluZ0Nvb3JkcyIsInNldENvb3JkaW5hdGVzIiwiZ2V0Q29vcmRpbmF0ZXMiLCJzdHJpbmdpZnkiLCJzZXRQcm9wZXJ0eSIsInRvR2VvSlNPTiIsImludGVybmFsIiwidXNlclByb3BlcnRpZXMiLCJuYW1lIiwiY3JlYXRlIiwiaXNWYWxpZCIsInVwZGF0ZUNvb3JkaW5hdGUiLCJwYXRoT3JMbmciLCJsbmdPckxhdCIsImxhdCIsImFyZ3VtZW50cyIsImdldENvb3JkaW5hdGUiLCJhZGRDb29yZGluYXRlIiwicGF0aCIsImxuZyIsInBhcnNlSW50Iiwic3BsaWNlIiwicmVtb3ZlQ29vcmRpbmF0ZSIsInNsaWNlIiwiZXZlcnkiLCJpZHMiLCJzcGxpdCIsImNvbmNhdCIsInBhcnRzIiwicmluZ0lkIiwiY29vcmRJZCIsIm1vZGVscyIsInRha2VBY3Rpb24iLCJhY3Rpb24iLCJpZHgiLCJ0YWlsIiwiam9pbiIsIk11bHRpRmVhdHVyZSIsIm1vZGVsIiwiVHlwZUVycm9yIiwiX2Nvb3JkaW5hdGVzVG9GZWF0dXJlcyIsIk1vZGVsIiwiYmluZCIsInJlcGxhY2UiLCJmIiwiZ2V0RmVhdHVyZXMiLCJNb2RlSW50ZXJmYWNlIiwiZHJhd0NvbmZpZyIsIl9jdHgiLCJzZXRTZWxlY3RlZCIsInNldFNlbGVjdGVkQ29vcmRpbmF0ZXMiLCJyZWR1Y2UiLCJtIiwiYyIsImZlYXR1cmVfaWQiLCJnZXRTZWxlY3RlZCIsImdldFNlbGVjdGVkSWRzIiwiaXNTZWxlY3RlZCIsImdldEZlYXR1cmUiLCJzZWxlY3QiLCJkZXNlbGVjdCIsImRlbGV0ZUZlYXR1cmUiLCJvcHRzIiwiYWRkRmVhdHVyZSIsImNsZWFyU2VsZWN0ZWRGZWF0dXJlcyIsImNsZWFyU2VsZWN0ZWQiLCJjbGVhclNlbGVjdGVkQ29vcmRpbmF0ZXMiLCJzZXRBY3Rpb25hYmxlU3RhdGUiLCJhY3Rpb25zIiwibmV3U2V0IiwiYWN0aW9uYWJsZSIsImNoYW5nZU1vZGUiLCJldmVudE9wdHMiLCJmaXJlIiwiZXZlbnREYXRhIiwidXBkYXRlVUlDbGFzc2VzIiwiYWN0aXZhdGVVSUJ1dHRvbiIsInNldEFjdGl2ZUJ1dHRvbiIsImJ1ZmZlclR5cGUiLCJuZXdGZWF0dXJlIiwiaXNJbnN0YW5jZU9mIiwiZG9SZW5kZXIiLCJvblNldHVwIiwib25EcmFnIiwib25DbGljayIsIm9uTW91c2VNb3ZlIiwib25Nb3VzZURvd24iLCJvbk1vdXNlVXAiLCJvbk1vdXNlT3V0Iiwib25LZXlVcCIsIm9uS2V5RG93biIsIm9uVG91Y2hTdGFydCIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaEVuZCIsIm9uVGFwIiwib25TdG9wIiwib25UcmFzaCIsIm9uQ29tYmluZUZlYXR1cmUiLCJvblVuY29tYmluZUZlYXR1cmUiLCJ0b0Rpc3BsYXlGZWF0dXJlcyIsImV2ZW50TWFwcGVyIiwiZXZlbnRLZXlzIiwiZ2V0U291cmNlIiwiY2xlYW51cCIsIm5ld0hvdElkcyIsIm5ld0NvbGRJZHMiLCJpc0RpcnR5IiwiZ2V0QWxsSWRzIiwiZ2V0Q2hhbmdlZElkcyIsImhvdCIsImxhc3RDb2xkQ291bnQiLCJjb2xkIiwicGFyZW50IiwiY29sZENoYW5nZWQiLCJyZW5kZXJGZWF0dXJlIiwiZmVhdHVyZUludGVybmFsIiwiY3VycmVudE1vZGVSZW5kZXIiLCJjbGVhckNoYW5nZWRJZHMiLCJzZXREYXRhIiwiU3RvcmUiLCJyZW5kZXJSZXF1ZXN0IiwiX2ZlYXR1cmVzIiwiX2ZlYXR1cmVJZHMiLCJfc2VsZWN0ZWRGZWF0dXJlSWRzIiwiX3NlbGVjdGVkQ29vcmRpbmF0ZXMiLCJfY2hhbmdlZEZlYXR1cmVJZHMiLCJfZW1pdFNlbGVjdGlvbkNoYW5nZSIsIl9tYXBJbml0aWFsQ29uZmlnIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicG9pbnRzIiwiZ2V0U2VsZWN0ZWRDb29yZGluYXRlcyIsImNvb3JkaW5hdGUiLCJyZWZyZXNoU2VsZWN0ZWRDb29yZGluYXRlcyIsIm5ld1NlbGVjdGVkQ29vcmRpbmF0ZXMiLCJzaWxlbnQiLCJjcmVhdGVSZW5kZXJCYXRjaCIsImhvbGRSZW5kZXIiLCJudW1SZW5kZXJzIiwic2V0RGlydHkiLCJmZWF0dXJlQ3JlYXRlZCIsInN1cHByZXNzQVBJRXZlbnRzIiwiZGVsZXRlZEZlYXR1cmVzVG9FbWl0IiwiZ2V0QWxsIiwiY29vcmRfcGF0aCIsInNldEZlYXR1cmVQcm9wZXJ0eSIsInN0b3JlTWFwQ29uZmlnIiwiaW50ZXJhY3Rpb24iLCJpc0VuYWJsZWQiLCJyZXN0b3JlTWFwQ29uZmlnIiwiZW5hYmxlIiwiZGlzYWJsZSIsImdldEluaXRpYWxDb25maWdWYWx1ZSIsImNsYXNzVHlwZXMiLCJjb250cm9sQ29udGFpbmVyIiwibWFwTG9hZGVkSW50ZXJ2YWwiLCJzZXR1cCIsIm9uUmVtb3ZlIiwib2ZmIiwiY29ubmVjdCIsImNsZWFySW50ZXJ2YWwiLCJyZW1vdmVMYXllcnMiLCJyZW1vdmVCdXR0b25zIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJjbGVhck1hcENsYXNzZXMiLCJib3hab29tSW5pdGlhbCIsImJveFpvb20iLCJjb250YWluZXIiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJhZGRMYXllcnMiLCJhZGRFdmVudExpc3RlbmVycyIsIm9uQWRkIiwibW9kZXMiLCJtb2RlT2JqZWN0IiwibW9kZU9iamVjdEtleXMiLCJzdGFydE9wdHMiLCJzdGF0ZSIsIm1vZGVIYW5kbGVyIiwiZWgiLCJlIiwib25Db21iaW5lRmVhdHVyZXMiLCJvblVuY29tYmluZUZlYXR1cmVzIiwibW91c2VEb3duSW5mbyIsInRvdWNoU3RhcnRJbmZvIiwiY3VycmVudE1vZGUiLCJpc0RyYWciLCJEYXRlIiwiZ2V0VGltZSIsIm9yaWdpbmFsRXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJtb3VzZWRyYWciLCJlbmRJbmZvIiwidG91Y2hkcmFnIiwiYnV0dG9ucyIsIndoaWNoIiwidGFyZ2V0IiwiZmVhdHVyZVRhcmdldCIsInRvdWNoRW5hYmxlZCIsInByZXZlbnREZWZhdWx0IiwiaXNLZXlNb2RlVmFsaWQiLCJjb2RlIiwibW9kZW5hbWUiLCJuZXh0TW9kZU9wdGlvbnMiLCJldmVudE9wdGlvbnMiLCJtb2RlYnVpbGRlciIsInNyY0VsZW1lbnQiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImtleUNvZGUiLCJjb250cm9scyIsImxpbmVfc3RyaW5nIiwicG9seWdvbiIsInpvb21lbmQiLCJjaGFuZ2Vab29tIiwiZGF0YSIsImRhdGFUeXBlIiwic29tZSIsInN0eWxlIiwiYWN0aW9uU3RhdGUiLCJkZWZhdWx0TW9kZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJrZXliaW5kaW5ncyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJnZXRNb2RlIiwiYnV0dG9uRWxlbWVudHMiLCJhY3RpdmVCdXR0b24iLCJjdXJyZW50TWFwQ2xhc3NlcyIsIm5leHRNYXBDbGFzc2VzIiwiYXNzaWduIiwiY2xhc3Nlc1RvUmVtb3ZlIiwiY2xhc3Nlc1RvQWRkIiwicmVtb3ZlIiwiY3JlYXRlQ29udHJvbEJ1dHRvbiIsImJ1dHRvbiIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsInNldEF0dHJpYnV0ZSIsInRpdGxlIiwiYXBwZW5kQ2hpbGQiLCJkZWFjdGl2YXRlQnV0dG9ucyIsIm9uRGVhY3RpdmF0ZSIsIm9uQWN0aXZhdGUiLCJhZGRCdXR0b25zIiwiY29udHJvbEdyb3VwIiwiY29tYmluZV9mZWF0dXJlcyIsInVuY29tYmluZV9mZWF0dXJlcyIsImJ1dHRvbklkIiwiZ2V0Q29udGFpbmVyIiwiYm94U2VsZWN0IiwiZHJhZ1BhbklzRW5hYmxlZCIsImRyYWdQYW4iLCJsb2FkZWQiLCJzZXRJbnRlcnZhbCIsImFkZFNvdXJjZSIsImFkZExheWVyIiwicmVtb3ZlTGF5ZXIiLCJyZW1vdmVTb3VyY2UiLCJibHVlIiwib3JhbmdlIiwid2hpdGUiLCJpc09mTWV0YVR5cGUiLCJpc1NoaWZ0TW91c2Vkb3duIiwic2hpZnRLZXkiLCJpc0FjdGl2ZUZlYXR1cmUiLCJpc0luYWN0aXZlRmVhdHVyZSIsIm5vVGFyZ2V0IiwiaXNWZXJ0ZXgiLCJpc1NoaWZ0RG93biIsImlzRXNjYXBlS2V5IiwiaXNFbnRlcktleSIsImlzVHJ1ZSIsImNsb25lIiwicCIsIl9hZGQiLCJzdWIiLCJfc3ViIiwibXVsdEJ5UG9pbnQiLCJfbXVsdEJ5UG9pbnQiLCJkaXZCeVBvaW50IiwiX2RpdkJ5UG9pbnQiLCJtdWx0IiwiX211bHQiLCJkaXYiLCJfZGl2Iiwicm90YXRlIiwiX3JvdGF0ZSIsInJvdGF0ZUFyb3VuZCIsIl9yb3RhdGVBcm91bmQiLCJtYXRNdWx0IiwiX21hdE11bHQiLCJ1bml0IiwiX3VuaXQiLCJwZXJwIiwiX3BlcnAiLCJyb3VuZCIsIl9yb3VuZCIsIm1hZyIsImVxdWFscyIsIm90aGVyIiwiZGlzdCIsImRpc3RTcXIiLCJkeCIsImR5IiwiYW5nbGUiLCJhdGFuMiIsImFuZ2xlVG8iLCJhbmdsZVdpdGgiLCJhbmdsZVdpdGhTZXAiLCJjb3MiLCJjb252ZXJ0IiwibW91c2VFdmVudCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRYIiwibGVmdCIsImNsaWVudExlZnQiLCJjbGllbnRZIiwidG9wIiwiY2xpZW50VG9wIiwicGFyZW50SWQiLCJzZWxlY3RlZCIsInN0YXJ0VmVydGV4IiwiZW5kVmVydGV4Iiwic3RhcnRDb29yZCIsImVuZENvb3JkIiwibWlkIiwiY3JlYXRlU3VwcGxlbWVudGFyeVBvaW50cyIsImJhc2VQYXRoIiwic3VwcGxlbWVudGFyeVBvaW50cyIsInByb2Nlc3NMaW5lIiwibGluZSIsImxpbmVCYXNlUGF0aCIsImZpcnN0UG9pbnRTdHJpbmciLCJsYXN0VmVydGV4IiwicG9pbnRJbmRleCIsInBvaW50UGF0aCIsIlN0cmluZyIsInZlcnRleCIsImlzU2VsZWN0ZWRQYXRoIiwibWlkcG9pbnRzIiwibWlkcG9pbnQiLCJzdHJpbmdpZmllZFBvaW50Iiwic2VsZWN0ZWRQYXRocyIsImxpbmVJbmRleCIsInN1YlR5cGUiLCJzdWJDb29yZGluYXRlcyIsImluZGV4Iiwic3ViRmVhdHVyZSIsInByb2Nlc3NNdWx0aUdlb21ldHJ5Iiwic2V0VGltZW91dCIsImRvdWJsZUNsaWNrWm9vbSIsImdlb2pzb25GZWF0dXJlcyIsImRlbHRhIiwibm9ydGhJbm5lckVkZ2UiLCJzb3V0aElubmVyRWRnZSIsIm5vcnRoT3V0ZXJFZGdlIiwic291dGhPdXRlckVkZ2UiLCJ3ZXN0RWRnZSIsImVhc3RFZGdlIiwiYm91bmRzIiwiZGVwdGgiLCJmbGF0IiwibG5ncyIsImNvb3JkIiwibGF0cyIsIm1pbiIsInZhbHMiLCJhcHBseSIsIm1heCIsImV4dGVudCIsImZlYXR1cmVTb3V0aEVkZ2UiLCJmZWF0dXJlTm9ydGhFZGdlIiwiZmVhdHVyZVdlc3RFZGdlIiwiZmVhdHVyZUVhc3RFZGdlIiwiY29uc3RyYWluZWREZWx0YSIsImNlaWwiLCJjdXJyZW50Q29vcmRpbmF0ZXMiLCJtb3ZlQ29vcmRpbmF0ZSIsIm1vdmVSaW5nIiwibmV4dENvb3JkaW5hdGVzIiwibXVsdGkiLCJTaW1wbGVTZWxlY3QiLCJkcmFnTW92ZUxvY2F0aW9uIiwiYm94U2VsZWN0U3RhcnRMb2NhdGlvbiIsImJveFNlbGVjdEVsZW1lbnQiLCJib3hTZWxlY3RpbmciLCJjYW5Cb3hTZWxlY3QiLCJkcmFnTW92aW5nIiwiY2FuRHJhZ01vdmUiLCJpbml0aWFsRHJhZ1BhblN0YXRlIiwiaW5pdGlhbGx5U2VsZWN0ZWRGZWF0dXJlSWRzIiwiZmlyZUFjdGlvbmFibGUiLCJzZWxlY3RlZEZlYXR1cmVzIiwibXVsdGlGZWF0dXJlcyIsImZlYXR1cmVUeXBlIiwiYWxsRmVhdHVyZXMiLCJtZW1vIiwiZmlyZVVwZGF0ZSIsInN0b3BFeHRlbmRlZEludGVyYWN0aW9ucyIsImNsaWNrQW55d2hlcmUiLCJjbGlja09uVmVydGV4IiwiY2xpY2tPbkZlYXR1cmUiLCJ3YXNTZWxlY3RlZCIsImNvb3JkUGF0aCIsInN0YXJ0UG9zIiwibG5nTGF0Iiwic3RhcnRPbkFjdGl2ZUZlYXR1cmUiLCJpc1NoaWZ0Q2xpY2siLCJzZWxlY3RlZEZlYXR1cmVJZHMiLCJpc0ZlYXR1cmVTZWxlY3RlZCIsInN0YXJ0Qm94U2VsZWN0IiwiZHJhZ01vdmUiLCJ3aGlsZUJveFNlbGVjdCIsImN1cnJlbnQiLCJtaW5YIiwibWF4WCIsIm1pblkiLCJtYXhZIiwidHJhbnNsYXRlVmFsdWUiLCJ0cmFuc2Zvcm0iLCJXZWJraXRUcmFuc2Zvcm0iLCJ3aWR0aCIsImhlaWdodCIsImZlYXR1cmVzSW5Cb3giLCJpZHNUb1NlbGVjdCIsImdldFVuaXF1ZUlkcyIsImRpc3BsYXkiLCJmZWF0dXJlc0NvbWJpbmVkIiwiaW5jbHVkZXMiLCJzdWJjb29yZHMiLCJtdWx0aUZlYXR1cmUiLCJjcmVhdGVkRmVhdHVyZXMiLCJkZWxldGVkRmVhdHVyZXMiLCJmZWF0dXJlc1VuY29tYmluZWQiLCJpc01pZHBvaW50IiwiRGlyZWN0U2VsZWN0Iiwic2VsZWN0ZWRDb29yZFBhdGhzIiwic3RhcnREcmFnZ2luZyIsImFib3V0Iiwic2VsZWN0ZWRJbmRleCIsInNlbGVjdGVkQ29vcmRpbmF0ZXMiLCJwYXRoc1RvQ29vcmRpbmF0ZXMiLCJwYXRocyIsInN0b3BEcmFnZ2luZyIsInNlbGVjdGVkQ29vcmRzIiwibG9jYWxlQ29tcGFyZSIsIm51bWVyaWMiLCJpc0ZlYXR1cmUiLCJvblZlcnRleCIsImlzTWlkUG9pbnQiLCJub0Nvb3JkcyIsIm9uRmVhdHVyZSIsIm9uTWlkcG9pbnQiLCJkcmFnVmVydGV4IiwiZHJhZ0ZlYXR1cmUiLCJjbGlja05vVGFyZ2V0IiwiY2xpY2tBY3RpdmVGZWF0dXJlIiwiY2xpY2tJbmFjdGl2ZSIsIkRyYXdQb2ludCIsImlzQWN0aXZlUG9pbnQiLCJzdG9wRHJhd2luZ0FuZFJlbW92ZSIsIkRyYXdQb2x5Z29uIiwiY3VycmVudFZlcnRleFBvc2l0aW9uIiwiaXNBY3RpdmVQb2x5Z29uIiwiY29vcmRpbmF0ZUNvdW50IiwiZW5kUG9zIiwibGluZUNvb3JkaW5hdGVzIiwiRHJhd0xpbmVTdHJpbmciLCJkaXJlY3Rpb24iLCJmcm9tIiwibGFzdENvb3JkIiwiaXNBY3RpdmVMaW5lIiwic2ltcGxlX3NlbGVjdCIsImRpcmVjdF9zZWxlY3QiLCJkcmF3X3BvaW50IiwiZHJhd19wb2x5Z29uIiwiZHJhd19saW5lX3N0cmluZyIsImRlZmF1bHRPcHRpb25zIiwiZGlzcGxheUNvbnRyb2xzRGVmYXVsdCIsInNob3dDb250cm9scyIsImhpZGVDb250cm9scyIsImFkZFNvdXJjZXMiLCJzb3VyY2VCdWNrZXQiLCJmZWF0dXJlVHlwZXMiLCJhcGkiLCJ3aXRoRGVmYXVsdHMiLCJnZXRGZWF0dXJlSWRzQXQiLCJnZXRTZWxlY3RlZFBvaW50cyIsInNldCIsImZlYXR1cmVDb2xsZWN0aW9uIiwicmVuZGVyQmF0Y2giLCJ0b0RlbGV0ZSIsIm5ld0lkcyIsIm5ld0lkc0xvb2t1cCIsImludGVybmFsRmVhdHVyZSIsIm9yaWdpbmFsUHJvcGVydGllcyIsImRlbGV0ZUFsbCIsIm1vZGVPcHRpb25zIiwic2V0dXBEcmF3IiwiY29uc3RhbnRzIiwibGliIiwiZ2V0Q29vcmRzIiwiY2xlYW5MaW5lIiwibmV3UG9pbnRzIiwic2Vjb25kVG9MYXN0IiwibmV3UG9pbnRzTGVuZ3RoIiwicHJldkFkZGVkUG9pbnQiLCJpc1BvaW50T25MaW5lU2VnbWVudCIsInB0MSIsInB0MiIsInN0YXJ0WCIsInN0YXJ0WSIsImVuZFgiLCJlbmRZIiwiZHhsIiwiZHlsIiwiY2xvbmVGZWF0dXJlIiwiY2xvbmVkIiwiY2xvbmVQcm9wZXJ0aWVzIiwiY2xvbmVHZW9tZXRyeSIsIml0ZW0iLCJnZW9tIiwiZyIsImRlZXBTbGljZSIsImdldFNxU2VnRGlzdCIsInQiLCJzaW1wbGlmeURQU3RlcCIsImZpcnN0IiwibGFzdCIsInNxVG9sZXJhbmNlIiwic2ltcGxpZmllZCIsIm1heFNxRGlzdCIsInNxRGlzdCIsInNpbXBsaWZ5RG91Z2xhc1BldWNrZXIiLCJzaW1wbGlmeSIsImhpZ2hlc3RRdWFsaXR5IiwicHJldlBvaW50IiwibGVuIiwic2ltcGxpZnlSYWRpYWxEaXN0Iiwic2ltcGxpZnlMaW5lIiwiaGlnaFF1YWxpdHkiLCJ6Iiwic2ltcGxpZnlQb2x5Z29uIiwicHRzIiwic2ltcGxlUmluZyIsImNoZWNrVmFsaWRpdHkiLCJpbnB1dCIsIm11dGF0ZSIsImNsb25lRmVhdHVyZUNvbGxlY3Rpb24iLCJjYWxsYmFjayIsImoiLCJzdG9wRyIsImdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uIiwiaXNHZW9tZXRyeUNvbGxlY3Rpb24iLCJmZWF0dXJlUHJvcGVydGllcyIsImZlYXR1cmVCQm94IiwiZmVhdHVyZUluZGV4IiwiaXNGZWF0dXJlQ29sbGVjdGlvbiIsImdlb21FYWNoIiwiZ2V0VHlwZSIsIm5ld0Nvb3JkcyIsInBvbHlnb25zIiwicG9seVBvaW50cyIsImV4aXN0aW5nIiwiZmVhdCIsImxpbmVzIiwicmluZ3MiLCJzaW1wbGlmeUdlb20iLCJGcmVlaGFuZE1vZGUiLCJwb3ciLCJnZXRab29tIiwiYXJncyIsIm1hcGJveGdsIiwiYWNjZXNzVG9rZW4iLCJNYXAiLCJnZXRFbGVtZW50QnlJZCIsImNlbnRlciIsInpvb20iLCJEcmF3IiwiTWFwYm94RHJhdyIsImFkZENvbnRyb2wiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZVJvb3QiOiIifQ==